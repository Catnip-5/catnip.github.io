<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Docker</title>
    <url>/Docker/Docker/</url>
    <content><![CDATA[<style>
.h4{
    font-size: 16px;
    color: #2c3e50;
}
</style>

<h2 id="Docker简介"><a href="#Docker简介" class="headerlink" title="Docker简介"></a>Docker简介</h2><h3 id="Docker是什么"><a href="#Docker是什么" class="headerlink" title="Docker是什么"></a>Docker是什么</h3><ul>
<li>解决了运行环境和配置问题软件容器，方便做持续集成并有助于整体发布的容器虚拟化技术</li>
</ul>
<span id="more"></span>

<h3 id="Docker理念"><a href="#Docker理念" class="headerlink" title="Docker理念"></a>Docker理念</h3><ul>
<li>Docker的主要目标是“Build，Ship and Run Any App,Anywhere”，也就是通过对应用组件的封装、分发、部署、运行等生命周期的管理，使用户的APP（可以是一个WEB应用或数据库应用等等）及其运行环境能够做到<code>“一次封装，到处运行”</code></li>
</ul>
<h3 id="Docker作用"><a href="#Docker作用" class="headerlink" title="Docker作用"></a>Docker作用</h3><ul>
<li>更高效的利用系统资源</li>
<li>更快速的启动时间</li>
<li>一致的运行环境</li>
<li>持续交付和部署</li>
<li>更轻松的迁移</li>
<li>更轻松的维护和扩展</li>
</ul>
<h3 id="Docker与虚拟机对比"><a href="#Docker与虚拟机对比" class="headerlink" title="Docker与虚拟机对比"></a>Docker与虚拟机对比</h3><p><img src="/Docker/Docker/Docker%E4%B8%8E%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AF%B9%E6%AF%94.png" alt="Docker与虚拟机对比"></p>
<p> | 虚拟机（VM） | Docker容器<br>– | – | –<br>操作系统 | 宿主机OS上运行虚拟机OS | 与宿主机共享OS<br>存储大小 | 镜像庞大（vmdk,vdi等） | 硬件小，便于存储与传输<br>运行性能 | 操作系统额外的CPU,内存消耗 | 几乎无额外性能损失<br>移植性 | 笨重，与虚拟机耦合度高 | 轻便，灵活，适用于Linux<br>硬件亲和性 | 面向硬件运维者 | 面向软件开发者<br>部署速度 | 较慢，10s以上 | 快速，秒级</p>
<h2 id="Docker基本概念"><a href="#Docker基本概念" class="headerlink" title="Docker基本概念"></a>Docker基本概念</h2><ul>
<li><code>镜像 (Image)</code> 镜像就是一个<code>只读</code>的模板。镜像可以用来创建 Docker 容器，<code>一个镜像可以创建很多容器</code></li>
<li><code>容器 (Container)</code> Docker利用容器独立运行的一个或一组应用。<code>容器是用镜像创建的运行实例</code></li>
<li><code>仓库 (Repository)</code> 仓库是<code>集中存放镜像</code>文件的场所</li>
</ul>
<h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><ul>
<li><a href="https://docs.docker.com/install/linux/docker-ce/centos/">Docker 安装</a></li>
</ul>
<h2 id="Docker镜像加速"><a href="#Docker镜像加速" class="headerlink" title="Docker镜像加速"></a>Docker镜像加速</h2><ul>
<li><a href="https://yeasy.gitbooks.io/docker_practice/install/mirror.html">Docker 镜像加速</a></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> -p /etc/docker</span><br><span class="line">sudo <span class="built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://registry.docker-cn.com&quot;</span>,<span class="string">&quot;http://hub-mirror.c.163.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>

<h2 id="Docker常用命令"><a href="#Docker常用命令" class="headerlink" title="Docker常用命令"></a>Docker常用命令</h2><p><img src="/Docker/Docker/Docker%E5%91%BD%E4%BB%A4.png" alt="Docker命令"></p>
<h3 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h3><ul>
<li><code>docker version</code> </li>
<li><code>docker info</code> </li>
<li><code>docker --help</code></li>
</ul>
<h3 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h3><div class="h4">列出镜像</div>
- 命令格式：`docker images [OPTIONS] [REPOSITORY[:TAG]]`
- 参数选项：
    - `[OPTIONS] `：
        - **-a：**列出本地所有镜像（含中间映像层）
        - **-q：**只显示镜像ID
        - **--no-trunc：**显示完整的镜像信息
        - **--digests：**显示镜像的摘要信息

<div class="h4">搜索镜像</div>
- 命令格式：`docker search [OPTIONS] TERM` 
- 参数选项：
    - `[OPTIONS] `：
        - **-s：**列出收藏数不小于指定值的镜像
        - **--no-trunc：**显示完整的镜像信息
        - **--automated：**只列出automated build类型的镜像

<div class="h4">拉取镜像</div>
- 命令格式：`docker pull [OPTIONS] NAME[:TAG|@DIGEST]` 
- 参数选项：
    - `[OPTIONS] `：
        - **-a：**拉取所有 tagged 镜像
        
<div class="h4">删除镜像</div>
- 命令格式：`docker rmi [OPTIONS] IMAGE [IMAGE...]` 
- 参数选项：
    - `[OPTIONS] `：
        - **-f：**强制删除
- 案例：
    - **docker rmi -f 镜像ID：**删除单个
    - **docker rmi -f 镜像1:TAG 镜像2:TAG：**删除多个
    - **docker rmi -f $(docker images -qa)：**删除全部
    
<div class="h4">容器生成新镜像</div>
- 命令格式：`docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]`
- 参数选项：
    - `[OPTIONS] `：
        - **-a：**提交的镜像作者
        - **-m：**提交时的说明文字
        - **-p：**在commit时，将容器暂停
        - **-c：**使用Dockerfile指令来创建镜像
        
<div class="h4">DockerFile构建新镜像</div>
- 命令格式：`docker build [OPTIONS] PATH | URL`
- 参数选项：
    - `[OPTIONS] `：
        - **-f：**指定Dockerfile文件路径
        - **-t：**设置镜像名字，镜像名[:TAG]
        - **--build-arg=[]：**设置镜像创建时的变量
        
<h3 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h3><div class="h4">新建并启动容器</div>
- 命令格式：`docker run [OPTIONS] IMAGE [COMMAND] [ARG...]` 
- 参数选项：
    - `[OPTIONS] `：
        - **-i：**以交互模式运行容器，通常与 -t 同时使用
        - **-t：**为容器重新分配一个伪输入终端，通常与 -i 同时使用
        - **-p：**指定端口映射，格式为：主机端口:容器端口
        - **-P：**随机端口映射，容器内部端口随机映射到主机的高端口
        - **-d：**后台运行容器，并返回容器ID，也即启动守护式容器
        - **-e：**设置环境变量
        - **-v：**绑定数据卷，格式为：主机目录:容器目录
        - **--privileged：**授予权限
        - **--volumes-from：**绑定数据卷容器
        - **--name="容器新名称"：**为容器指定一个名称
        
<div class="h4">列出容器</div>
- 命令格式：`docker ps [OPTIONS]` 
- 参数选项：
    - `[OPTIONS] `：
        - **-a：**显示所有的容器，包括未运行的
        - **-l：**显示最近创建的容器 
        - **-n：**列出最近创建的n个容器
        - **-q：**静默模式，只显示容器编号
        - **--no-trunc：**不截断输出
       
<div class="h4">启动容器</div>
- 命令格式：`docker start [OPTIONS] CONTAINER [CONTAINER...]`

<div class="h4">重启容器</div>
- 命令格式：`docker restart [OPTIONS] CONTAINER [CONTAINER...]`
 
<div class="h4">停止容器</div>
- 命令格式：`docker stop [OPTIONS] CONTAINER [CONTAINER...]`

<div class="h4">强制停止容器</div>
- 命令格式：`docker kill [OPTIONS] CONTAINER [CONTAINER...]`

<div class="h4">删除容器</div>
- 命令格式：`docker rm [OPTIONS] CONTAINER [CONTAINER...]`
- 参数选项：
    - `[OPTIONS] `：
        - **-f：**通过SIGKILL信号强制删除一个运行中的容器
        - **-l：**移除容器间的网络连接，而非容器本身
        - **-v：**删除与容器关联的卷
- 案例：
    - **docker rm -f $(docker ps -qa)：**删除全部
    - **docker ps -qa | xargs docker rm：**删除全部
    
<div class="h4">进入容器</div>
- 命令格式：`docker attach [OPTIONS] CONTAINER`连接到正在运行中的容器
- 命令格式：`docker exec [OPTIONS] CONTAINER COMMAND [ARG...]`在运行的容器中执行命令
- 参数选项：
    - `[OPTIONS] `：
        - **-i：**即使没有附加也保持STDIN 打开
        - **-t：**分配一个伪终端
        - **-d：**分离模式: 在后台运行
- 案例：
    - **docker attach 容器ID：**进入容器
    - **docker exec -it 容器ID /bin/bash：**进入容器
    - **docker exec -it 容器ID ls：**不进入容器，执行容器中命令

<div class="h4">退出容器</div> 
- 命令格式：`exit` 容器停止退出
- 命令格式：`Ctrl + P + Q` 容器不停止退出
  
<div class="h4">容器与主机之间的数据拷贝</div>
- 命令格式：`docker cp [OPTIONS] CONTAINER:SRC_PATH DEST_PATH`容器数据拷贝到主机
- 命令格式：`docker cp [OPTIONS] SRC_PATH CONTAINER:DEST_PATH`主机数据拷贝到容器
        
<div class="h4">查看容器日志</div>
- 命令格式：`docker logs [OPTIONS] CONTAINER`
- 参数选项：
    - `[OPTIONS] `：
        - **-f：**跟踪日志输出
        - **-t：**显示时间戳
        - **--tail：**仅列出最新N条容器日志
        - **--since：**显示某个开始时间的所有日志    

<div class="h4">查看容器中运行的进程</div>
- 命令格式：`docker top [OPTIONS] CONTAINER [ps OPTIONS]`
 
<div class="h4">查看容器内部细节</div>
- 命令格式：`docker inspect [OPTIONS] NAME|ID [NAME|ID...]`
- 参数选项：
    - `[OPTIONS] `：
        - **-f：**指定返回值的模板文件
        - **-s：**显示总的文件大小
        - **--type：**指定类型返回JSON

<h2 id="Docker容器数据卷"><a href="#Docker容器数据卷" class="headerlink" title="Docker容器数据卷"></a>Docker容器数据卷</h2><h3 id="数据卷是什么"><a href="#数据卷是什么" class="headerlink" title="数据卷是什么"></a>数据卷是什么</h3><ul>
<li>数据卷是一个可供一个或多个容器使用的特殊目录，它绕过 UFS，可以提供很多有用的特性：<ul>
<li>数据卷 可以在容器之间共享和重用</li>
<li>对 数据卷 的修改会立马生效</li>
<li>对 数据卷 的更新，不会影响镜像</li>
<li>数据卷 默认会一直存在，即使容器被删除</li>
</ul>
</li>
</ul>
<h3 id="数据卷作用"><a href="#数据卷作用" class="headerlink" title="数据卷作用"></a>数据卷作用</h3><ul>
<li>容器的持久化</li>
<li>容器间继承 + 共享数据</li>
</ul>
<h3 id="数据卷（宿主机-x2F-容器）"><a href="#数据卷（宿主机-x2F-容器）" class="headerlink" title="数据卷（宿主机&#x2F;容器）"></a>数据卷（宿主机&#x2F;容器）</h3><h4 id="直接命令添加"><a href="#直接命令添加" class="headerlink" title="直接命令添加"></a>直接命令添加</h4><ul>
<li><code>docker run -it -v /宿主机目录:/容器目录 镜像ID</code></li>
</ul>
<h4 id="DockerFile添加"><a href="#DockerFile添加" class="headerlink" title="DockerFile添加"></a>DockerFile添加</h4><ul>
<li>编写DockerFile<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">VOLUME [<span class="string">&quot;/dataVolumeContainer1&quot;</span>,<span class="string">&quot;/dataVolumeContainer2&quot;</span>]</span><br><span class="line">CMD /bin/bash</span><br></pre></td></tr></table></figure></li>
<li>构建镜像<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker build -f /mydockerfile -t my/centos .</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="数据卷容器（容器-x2F-容器）"><a href="#数据卷容器（容器-x2F-容器）" class="headerlink" title="数据卷容器（容器&#x2F;容器）"></a>数据卷容器（容器&#x2F;容器）</h3><ul>
<li><code>docker run -it --name 容器2 --volumes-from 容器1 镜像ID</code></li>
</ul>
<h2 id="DockerFile解析"><a href="#DockerFile解析" class="headerlink" title="DockerFile解析"></a>DockerFile解析</h2><h3 id="DockerFile是什么"><a href="#DockerFile是什么" class="headerlink" title="DockerFile是什么"></a>DockerFile是什么</h3><ul>
<li>DockerFile是用来构建Docker镜像的构建文件，是由一系列命令和参数构成的脚本</li>
</ul>
<h3 id="DockerFile大致执行流程"><a href="#DockerFile大致执行流程" class="headerlink" title="DockerFile大致执行流程"></a>DockerFile大致执行流程</h3><ul>
<li>1）Docker从基础镜像运行一个容器</li>
<li>2）执行一条指令并对容器做出修改</li>
<li>3）执行类似docker commit的操作提交一个新的镜像层</li>
<li>4）Docker再基于刚提交的镜像运行一个新容器</li>
<li>5）执行DockerFile中的下一条指令直到所有指令都执行完成</li>
</ul>
<h3 id="DockerFile体系结构（保留字指令）"><a href="#DockerFile体系结构（保留字指令）" class="headerlink" title="DockerFile体系结构（保留字指令）"></a>DockerFile体系结构（保留字指令）</h3><ul>
<li><code>FROM</code> 基础镜像，当前新镜像是基于哪个镜像，scratch是源镜像</li>
<li><code>MAINTAINER</code> 镜像维护者的姓名和邮箱地址</li>
<li><code>RUN</code> 容器构建时需要运行的命令</li>
<li><code>EXPOSE</code> 当前容器对外暴露的端口</li>
<li><code>WORKDIR</code> 指容器启动后默认进来的目录</li>
<li><code>ENV</code> 构建镜像过程中设置的环境变量</li>
<li><code>ADD</code> 将宿主机目录下的文件拷贝进镜像且自动处理URL和解压缩（拷贝 + 解压缩）</li>
<li><code>CORY</code> 将宿主机目录下的文件拷贝进镜像（拷贝）</li>
<li><code>VOLUME</code> 绑定数据卷</li>
<li><code>CMD</code> 指定一个容器启动时要运行的命令，如有多个CMD只有最后一个生效（替换方式）</li>
<li><code>ENTRYPOINT</code> 指定一个容器启动时要运行的命令（追加方式）</li>
<li><code>ONBUILD</code> 当构建一个被继承的DockerFile时运行命令，父镜像在被子继承后父镜像的onbuild被触发</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://www.docker.com/">Docker 官网</a></li>
<li><a href="https://hub.docker.com/">Docker Hub 仓库</a></li>
<li><a href="http://www.docker.org.cn/index.html">Docker 中文社区</a></li>
<li><a href="https://yeasy.gitbooks.io/docker_practice/introduction/what.html">Docker 从入门到实践</a></li>
<li><a href="https://jiajially.gitbooks.io/dockerguide/content/index.html">Docker 简明教程</a></li>
</ul>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Http特殊字符</title>
    <url>/Http/Http%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6/</url>
    <content><![CDATA[<p><img src="/Http/Http%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6/Http%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6.png" alt="Http特殊字符"></p>
]]></content>
      <categories>
        <category>Http</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>Http</tag>
      </tags>
  </entry>
  <entry>
    <title>JDK8：函数式接口</title>
    <url>/JDK/JDK8%EF%BC%9A%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<style>
table td, table th {
    font-size: 14px;
}
</style>

<h2 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h2><ul>
<li>函数式接口就是只有一个抽象方法的接口，如<code>Runnable</code>、<code>Callable</code>、<code>Comparable</code>都称作函数式接口。</li>
<li>java8专门新增 <code>FunctionalInterface</code> 注解, 防止破坏函数式接口的定义； <code>默认方法</code>和<code>静态方法</code>不会破坏函数式接口的定义。</li>
</ul>
<span id="more"></span>

<h2 id="内置函数式接口"><a href="#内置函数式接口" class="headerlink" title="内置函数式接口"></a>内置函数式接口</h2><table>
<thead>
<tr>
<th>名称</th>
<th>一元接口</th>
<th>说明</th>
<th>二元接口</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>函数类接口</td>
<td>Function&lt;T, R&gt;</td>
<td>接收T值，返回R值</td>
<td>BiFunction&lt;T, U, R&gt;</td>
<td>接收T, U值，返回R值</td>
</tr>
<tr>
<td>操作类接口</td>
<td>UnaryOperator&lt;T&gt;</td>
<td>接收T值，返回T值</td>
<td>BinaryOperator&lt;T&gt;</td>
<td>接收T, T值，返回T值</td>
</tr>
<tr>
<td>断言类接口</td>
<td>Predicate&lt;T&gt;</td>
<td>接收T值，返回boolean值</td>
<td>BiPredicate&lt;T, U&gt;</td>
<td>接收T, U值，返回boolean值</td>
</tr>
<tr>
<td>消费类接口</td>
<td>Consumer&lt;T&gt;</td>
<td>接收T值，无返回值</td>
<td>BiConsumer&lt;T, U&gt;</td>
<td>接收T, U值，无返回值</td>
</tr>
<tr>
<td>生产类接口</td>
<td>Supplier&lt;T&gt;</td>
<td>无接收值，返回T值</td>
<td>-</td>
<td>-</td>
</tr>
</tbody></table>
<h2 id="自定义函数式接口"><a href="#自定义函数式接口" class="headerlink" title="自定义函数式接口"></a>自定义函数式接口</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. 函数式接口只有一个抽象方法</span></span><br><span class="line"><span class="comment"> * 2. default、static方法不是抽象方法</span></span><br><span class="line"><span class="comment"> * 3. java.lang.Object中的方法不是抽象方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span> <span class="comment">// 用于编译级错误检查</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Fun</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">defaultMethod</span><span class="params">()</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">staticMethod</span><span class="params">()</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object target)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JDK</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>Java</tag>
        <tag>JDK</tag>
      </tags>
  </entry>
  <entry>
    <title>JDK8：Optional容器类</title>
    <url>/JDK/JDK8%EF%BC%9AOptional%E5%AE%B9%E5%99%A8%E7%B1%BB/</url>
    <content><![CDATA[<h2 id="传统方式处理null"><a href="#传统方式处理null" class="headerlink" title="传统方式处理null"></a>传统方式处理null</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestOptional1</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * null-安全的第一种尝试：深层质疑</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> person</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCarInsuranceName1</span><span class="params">(Person person)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (person != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> person.getCar();</span><br><span class="line">            <span class="keyword">if</span> (car != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">Insurance</span> <span class="variable">insurance</span> <span class="operator">=</span> car.getInsurance();</span><br><span class="line">                <span class="keyword">if</span> (insurance != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> insurance.getName();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Unknown&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * null-安全的第二种尝试：过多的退出语句</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> person</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCarInsuranceName2</span><span class="params">(Person person)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (person == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Unknown&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> person.getCar();</span><br><span class="line">        <span class="keyword">if</span> (car == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Unknown&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Insurance</span> <span class="variable">insurance</span> <span class="operator">=</span> car.getInsurance();</span><br><span class="line">        <span class="keyword">if</span> (insurance == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Unknown&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> insurance.getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Car car;</span><br><span class="line">    <span class="keyword">public</span> Car <span class="title function_">getCar</span><span class="params">()</span> &#123; <span class="keyword">return</span> car; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Insurance insurance;</span><br><span class="line">    <span class="keyword">public</span> Insurance <span class="title function_">getInsurance</span><span class="params">()</span> &#123; <span class="keyword">return</span> insurance; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Insurance</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123; <span class="keyword">return</span> name; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="Optional容器类避免null"><a href="#Optional容器类避免null" class="headerlink" title="Optional容器类避免null"></a>Optional容器类避免null</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Optional类方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * empty          返回一个空的 Optional 实例</span></span><br><span class="line"><span class="comment"> * filter            如果值存在且满足提供的谓词，就返回包含该值的 Optional 对象；否则返回一个空的Optional 对象</span></span><br><span class="line"><span class="comment"> * flatMap        如果值存在，就对该值执行 mapping 函数调用，返回一个 Optional 类型值，否则就返回一个空的 Optional 对象</span></span><br><span class="line"><span class="comment"> * get              如果该值存在，将该值用 Optional 封装返回，否则抛出一个 NoSuchElementException 异常</span></span><br><span class="line"><span class="comment"> * ifPresent      如果值存在，就执行使用该值的方法调用，否则什么也不做</span></span><br><span class="line"><span class="comment"> * isPresent      如果值存在就返回 true，否则返回 false</span></span><br><span class="line"><span class="comment"> * map             如果值存在，就对该值执行提供的 mapping 函数调用</span></span><br><span class="line"><span class="comment"> * of                将指定值用 Optional 封装之后返回，如果该值为 null，则抛出一个 NullPointerException异常</span></span><br><span class="line"><span class="comment"> * ofNullable     将指定值用 Optional 封装之后返回，如果该值为 null，则返回一个空的 Optional 对象</span></span><br><span class="line"><span class="comment"> * orElse          如果有值则将其返回，否则返回一个默认值</span></span><br><span class="line"><span class="comment"> * orElseGet     如果有值则将其返回，否则返回一个由指定的 Supplier 接口生成的值</span></span><br><span class="line"><span class="comment"> * orElseThrow  如果有值则将其返回，否则抛出一个由指定的 Supplier 接口生成的异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestOptional2</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCarInsuranceName</span><span class="params">(Optional&lt;Person&gt; person)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> person.flatMap(Person::getCar)</span><br><span class="line">                     .flatMap(Car::getInsurance)</span><br><span class="line">                     .map(Insurance::getName)</span><br><span class="line">                     .orElse(<span class="string">&quot;Unknown&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Optional&lt;Car&gt; car;</span><br><span class="line">    <span class="keyword">public</span> Optional&lt;Car&gt; <span class="title function_">getCar</span><span class="params">()</span> &#123; <span class="keyword">return</span> car; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Optional&lt;Insurance&gt; insurance;</span><br><span class="line">    <span class="keyword">public</span> Optional&lt;Insurance&gt; <span class="title function_">getInsurance</span><span class="params">()</span> &#123; <span class="keyword">return</span> insurance; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Insurance</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123; <span class="keyword">return</span> name; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JDK</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>Java</tag>
        <tag>JDK</tag>
      </tags>
  </entry>
  <entry>
    <title>JDK：版本选择</title>
    <url>/JDK/JDK%EF%BC%9A%E7%89%88%E6%9C%AC%E9%80%89%E6%8B%A9/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th>Java SE 版本</th>
<th>JDK 版本</th>
<th>开发代号</th>
<th>发行日期</th>
<th>最终支持日期</th>
<th>最终版本</th>
</tr>
</thead>
<tbody><tr>
<td>Oak</td>
<td>-</td>
<td>Oak(橡树)</td>
<td>1995-05-23</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Java 1.0</td>
<td>JDK 1.0</td>
<td>-</td>
<td>1996-01-23</td>
<td>-</td>
<td>1.0.2<br>1996-05-07</td>
</tr>
<tr>
<td>Java 1.1</td>
<td>JDK 1.1</td>
<td>-</td>
<td>1997-02-18</td>
<td>-</td>
<td>1.1.8_010<br>2002-10-09</td>
</tr>
<tr>
<td>J2SE 1.2</td>
<td>JDK 1.2</td>
<td>Playground(运动场)</td>
<td>1998-12-04</td>
<td>-</td>
<td>1.2.2_017<br>2003-10-02</td>
</tr>
<tr>
<td>J2SE 1.3</td>
<td>JDK 1.3</td>
<td>Kestrel(美洲红隼)</td>
<td>2000-05-08</td>
<td>-</td>
<td>1.3.1_29<br>2010-10-12</td>
</tr>
<tr>
<td>J2SE 1.4</td>
<td>JDK 1.4</td>
<td>Merlin(灰背隼)</td>
<td>2002-02-13</td>
<td>2013-02</td>
<td>1.4.2_42<br>2013-02-19</td>
</tr>
<tr>
<td>Java SE 5.0</td>
<td>JDK 1.5</td>
<td>Tiger(老虎)</td>
<td>2004-09-29</td>
<td>2015-04</td>
<td>5.0u85<br>2015-04-15</td>
</tr>
<tr>
<td>Java SE 6</td>
<td>JDK 1.6</td>
<td>Mustang(野马)</td>
<td>2006-12-12</td>
<td>2018-12</td>
<td>6u211<br>2018-10-16</td>
</tr>
<tr>
<td>Java SE 7</td>
<td>JDK 1.7</td>
<td>Dolphin(海豚)</td>
<td>2011-07-11</td>
<td>2022-07-19</td>
<td>7u321<br>2021-10-19</td>
</tr>
<tr>
<td>Java SE 8</td>
<td>JDK 1.8</td>
<td>Spider(蜘蛛)</td>
<td>2014-03-18</td>
<td>2030-12-31</td>
<td>8u311<br>2021-10-19</td>
</tr>
<tr>
<td>Java SE 9</td>
<td>JDK 1.9</td>
<td>-</td>
<td>2017-09-21</td>
<td>-</td>
<td>9.0.4<br>2018-01-16</td>
</tr>
<tr>
<td>Java SE 10</td>
<td>JDK 10</td>
<td>-</td>
<td>2018-03-20</td>
<td>-</td>
<td>10.0.2<br>2018-07-17</td>
</tr>
<tr>
<td>Java SE 11</td>
<td>JDK 11</td>
<td>-</td>
<td>2018-09-25</td>
<td>2026-09-30</td>
<td>11.0.13<br>2021-10-19</td>
</tr>
<tr>
<td>Java SE 12</td>
<td>JDK 12</td>
<td>-</td>
<td>2019-03-19</td>
<td>-</td>
<td>12.0.2<br>2019-07-16</td>
</tr>
<tr>
<td>Java SE 13</td>
<td>JDK 13</td>
<td>-</td>
<td>2019-09-19</td>
<td>-</td>
<td>13.0.2<br>2020-01-14</td>
</tr>
<tr>
<td>Java SE 14</td>
<td>JDK 14</td>
<td>-</td>
<td>2020-03-17</td>
<td>-</td>
<td>14.0.2<br>2020-07-14</td>
</tr>
<tr>
<td>Java SE 15</td>
<td>JDK 15</td>
<td>-</td>
<td>2020-09-15</td>
<td>-</td>
<td>15.0.2<br>2021-01-19</td>
</tr>
<tr>
<td>Java SE 16</td>
<td>JDK 16</td>
<td>-</td>
<td>2021-03-16</td>
<td>-</td>
<td>16.0.2<br>2021-07-20</td>
</tr>
<tr>
<td>Java SE 17</td>
<td>JDK 17</td>
<td>-</td>
<td>2021-09-14</td>
<td>2029-09-30</td>
<td>17<br>2021-09-14</td>
</tr>
<tr>
<td>Java SE 18</td>
<td>JDK 18</td>
<td>-</td>
<td>2022-03-22</td>
<td>-</td>
<td>-</td>
</tr>
</tbody></table>
<span id="more"></span>
]]></content>
      <categories>
        <category>JDK</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>Java</tag>
        <tag>JDK</tag>
      </tags>
  </entry>
  <entry>
    <title>JDK8：新时间日期API</title>
    <url>/JDK/JDK8%EF%BC%9A%E6%96%B0%E6%97%B6%E9%97%B4%E6%97%A5%E6%9C%9FAPI/</url>
    <content><![CDATA[<h2 id="API使用"><a href="#API使用" class="headerlink" title="API使用"></a>API使用</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.DayOfWeek;</span><br><span class="line"><span class="keyword">import</span> java.time.Duration;</span><br><span class="line"><span class="keyword">import</span> java.time.Instant;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.OffsetDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.Period;</span><br><span class="line"><span class="keyword">import</span> java.time.ZoneId;</span><br><span class="line"><span class="keyword">import</span> java.time.ZoneOffset;</span><br><span class="line"><span class="keyword">import</span> java.time.ZonedDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"><span class="keyword">import</span> java.time.temporal.TemporalAdjusters;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestLocalDateTime</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * LocalDate、LocalTime、LocalDateTime</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * from     依据传入的 Temporal 对象创建对象实例</span></span><br><span class="line"><span class="comment">     * now      依据系统时钟创建 Temporal 对象</span></span><br><span class="line"><span class="comment">     * of       由 Temporal 对象的某个部分创建该对象的实例</span></span><br><span class="line"><span class="comment">     * parse    由字符串创建 Temporal 对象的实例</span></span><br><span class="line"><span class="comment">     * atOffset 将 Temporal 对象和某个时区偏移相结合</span></span><br><span class="line"><span class="comment">     * atZone   将 Temporal 对象和某个时区相结合</span></span><br><span class="line"><span class="comment">     * format   使用某个指定的格式器将Temporal对象转换为字符串（Instant类不提供该方法）</span></span><br><span class="line"><span class="comment">     * get      读取 Temporal 对象的某一部分的值</span></span><br><span class="line"><span class="comment">     * minus    创建 Temporal 对象的一个副本，通过将当前 Temporal 对象的值减去一定的时长创建该副本</span></span><br><span class="line"><span class="comment">     * plus     创建 Temporal 对象的一个副本，通过将当前 Temporal 对象的值加上一定的时长创建该副本</span></span><br><span class="line"><span class="comment">     * with     以该 Temporal 对象为模板，对某些状态进行修改创建该对象的副本</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 获取时间</span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">ldt</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">        System.out.println(ldt);</span><br><span class="line">        System.out.println(ldt.getYear());</span><br><span class="line">        System.out.println(ldt.getMonthValue());</span><br><span class="line">        System.out.println(ldt.getDayOfMonth());</span><br><span class="line">        System.out.println(ldt.getHour());</span><br><span class="line">        System.out.println(ldt.getMinute());</span><br><span class="line">        System.out.println(ldt.getSecond());</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 指定时间</span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">ldt2</span> <span class="operator">=</span> LocalDateTime.of(<span class="number">2020</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">0</span>);</span><br><span class="line">        System.out.println(ldt2);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 加上时间</span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">ldt3</span> <span class="operator">=</span> ldt2.plusYears(<span class="number">20</span>);</span><br><span class="line">        System.out.println(ldt3);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 减去时间</span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">ldt4</span> <span class="operator">=</span> ldt2.minusMonths(<span class="number">2</span>);</span><br><span class="line">        System.out.println(ldt4);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * TemporalAdjuster 时间校正器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * TemporalAdjusters工具类方法：</span></span><br><span class="line"><span class="comment">     *   dayOfWeekInMonth           创建一个新的日期，它的值为同一个月中每一周的第几天</span></span><br><span class="line"><span class="comment">     *   firstDayOfMonth            创建一个新的日期，它的值为当月的第一天</span></span><br><span class="line"><span class="comment">     *   firstDayOfNextMonth        创建一个新的日期，它的值为下月的第一天</span></span><br><span class="line"><span class="comment">     *   firstDayOfNextYear         创建一个新的日期，它的值为明年的第一天</span></span><br><span class="line"><span class="comment">     *   firstDayOfYear             创建一个新的日期，它的值为当年的第一天</span></span><br><span class="line"><span class="comment">     *   firstInMonth               创建一个新的日期，它的值为同一个月中，第一个符合星期几要求的值</span></span><br><span class="line"><span class="comment">     *   lastDayOfMonth             创建一个新的日期，它的值为当月的最后一天</span></span><br><span class="line"><span class="comment">     *   lastDayOfNextMonth         创建一个新的日期，它的值为下月的最后一天</span></span><br><span class="line"><span class="comment">     *   lastDayOfNextYear          创建一个新的日期，它的值为明年的最后一天</span></span><br><span class="line"><span class="comment">     *   lastDayOfYear              创建一个新的日期，它的值为今年的最后一天</span></span><br><span class="line"><span class="comment">     *   lastInMonth                创建一个新的日期，它的值为同一个月中，最后一个符合星期几要求的值</span></span><br><span class="line"><span class="comment">     *   next/previous              创建一个新的日期，并将其值设定为日期调整后或者调整前，第一个符合指定星期几要求的日期</span></span><br><span class="line"><span class="comment">     *   nextOrSame/previousOrSame  创建一个新的日期，并将其值设定为日期调整后或者调整前，第一个符合指定星期几要求的日期，如果该日期已经符合要求，直接返回该对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 获取时间</span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">ldt</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">        System.out.println(ldt);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 修改时间</span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">ldt2</span> <span class="operator">=</span> ldt.withDayOfMonth(<span class="number">10</span>);</span><br><span class="line">        System.out.println(ldt2);</span><br><span class="line"> </span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">ldt3</span> <span class="operator">=</span> ldt.with(TemporalAdjusters.next(DayOfWeek.SUNDAY));</span><br><span class="line">        System.out.println(ldt3);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 自定义时间：下一个工作日</span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">ldt5</span> <span class="operator">=</span> ldt.with((l) -&gt; &#123;</span><br><span class="line">            <span class="type">LocalDateTime</span> <span class="variable">ldt4</span> <span class="operator">=</span> (LocalDateTime) l;</span><br><span class="line"> </span><br><span class="line">            <span class="type">DayOfWeek</span> <span class="variable">dow</span> <span class="operator">=</span> ldt4.getDayOfWeek();</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span>(dow.equals(DayOfWeek.FRIDAY))&#123;</span><br><span class="line">                <span class="keyword">return</span> ldt4.plusDays(<span class="number">3</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(dow.equals(DayOfWeek.SATURDAY))&#123;</span><br><span class="line">                <span class="keyword">return</span> ldt4.plusDays(<span class="number">2</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> ldt4.plusDays(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(ldt5);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Instant 时间戳（使用 Unix 元年  1970年1月1日 00:00:00 所经历的毫秒值）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 默认使用 UTC 时区</span></span><br><span class="line">        <span class="type">Instant</span> <span class="variable">ins1</span> <span class="operator">=</span> Instant.now(); </span><br><span class="line">        System.out.println(ins1);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 设置时区偏移量</span></span><br><span class="line">        <span class="type">OffsetDateTime</span> <span class="variable">odt</span> <span class="operator">=</span> ins1.atOffset(ZoneOffset.ofHours(<span class="number">8</span>));</span><br><span class="line">        System.out.println(odt);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 获取秒值</span></span><br><span class="line">        System.out.println(ins1.getEpochSecond());</span><br><span class="line">        System.out.println(ins1.toEpochMilli());</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 设置秒值</span></span><br><span class="line">        <span class="type">Instant</span> <span class="variable">ins2</span> <span class="operator">=</span> Instant.ofEpochSecond(<span class="number">5</span>);</span><br><span class="line">        System.out.println(ins2);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Duration 用于计算两个“时间”间隔</span></span><br><span class="line"><span class="comment">     * Period   用于计算两个“日期”间隔</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 计算两个“时间”间隔</span></span><br><span class="line">        <span class="type">Instant</span> <span class="variable">ins1</span> <span class="operator">=</span> Instant.now();</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="type">Instant</span> <span class="variable">ins2</span> <span class="operator">=</span> Instant.now();</span><br><span class="line"> </span><br><span class="line">        <span class="type">Duration</span> <span class="variable">duration</span> <span class="operator">=</span> Duration.between(ins1, ins2);</span><br><span class="line">        System.out.println(duration);</span><br><span class="line">        System.out.println(duration.getSeconds());</span><br><span class="line">        System.out.println(duration.toMillis());</span><br><span class="line"> </span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------------&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 计算两个“日期”间隔</span></span><br><span class="line">        <span class="type">LocalDate</span> <span class="variable">ld1</span> <span class="operator">=</span> LocalDate.of(<span class="number">2018</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="type">LocalDate</span> <span class="variable">ld2</span> <span class="operator">=</span> LocalDate.now();</span><br><span class="line"> </span><br><span class="line">        <span class="type">Period</span> <span class="variable">pe</span> <span class="operator">=</span> Period.between(ld1, ld2);</span><br><span class="line">        System.out.println(pe.getYears());</span><br><span class="line">        System.out.println(pe.getMonths());</span><br><span class="line">        System.out.println(pe.getDays());</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * DateTimeFormatter 解析和格式化日期或时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test5</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//DateTimeFormatter dtf = DateTimeFormatter.ISO_DATE;</span></span><br><span class="line">        <span class="type">DateTimeFormatter</span> <span class="variable">dtf</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy年MM月dd日 HH:mm:ss E&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">ldt</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line"> </span><br><span class="line">        <span class="type">String</span> <span class="variable">date</span> <span class="operator">=</span> ldt.format(dtf);</span><br><span class="line">        System.out.println(date);</span><br><span class="line"> </span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">ldt2</span> <span class="operator">=</span> ldt.parse(date, dtf);</span><br><span class="line">        System.out.println(ldt2);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取所有可用时区</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test6</span><span class="params">()</span> &#123;</span><br><span class="line">        Set&lt;String&gt; set = ZoneId.getAvailableZoneIds();</span><br><span class="line">        set.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ZonedDate、ZonedTime、ZonedDateTime 带时区的时间或日期</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test7</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">ldt</span> <span class="operator">=</span> LocalDateTime.now(ZoneId.of(<span class="string">&quot;Asia/Shanghai&quot;</span>));</span><br><span class="line">        System.out.println(ldt);</span><br><span class="line"> </span><br><span class="line">        <span class="type">ZonedDateTime</span> <span class="variable">zdt</span> <span class="operator">=</span> ZonedDateTime.now(ZoneId.of(<span class="string">&quot;US/Pacific&quot;</span>));</span><br><span class="line">        System.out.println(zdt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="传统日期转换"><a href="#传统日期转换" class="headerlink" title="传统日期转换"></a>传统日期转换</h2><table>
<thead>
<tr>
<th>类</th>
<th>To 遗留类</th>
<th>From 遗留类</th>
</tr>
</thead>
<tbody><tr>
<td>java.time.Instant<br>java.util.Date</td>
<td>Date.from(instant)</td>
<td>date.toInstant()</td>
</tr>
<tr>
<td>java.time.Instant<br>java.sql.Timestamp</td>
<td>Timestamp.from(instant)</td>
<td>timestamp.toInstant()</td>
</tr>
<tr>
<td>java.time.ZonedDateTime<br>java.util.GregorianCalendar</td>
<td>GregorianCalendar.from(zonedDateTime)</td>
<td>cal.toZonedDateTime()</td>
</tr>
<tr>
<td>java.time.LocalDate<br>java.sql.Time</td>
<td>Date.valueOf(localDate)</td>
<td>date.toLocalDate()</td>
</tr>
<tr>
<td>java.time.LocalTime<br>java.sql.Time</td>
<td>Date.valueOf(localDate)</td>
<td>date.toLocalTime()</td>
</tr>
<tr>
<td>java.time.LocalDateTime<br>java.sql.Timestamp</td>
<td>Timestamp.valueOf(localDateTime)</td>
<td>timestamp.toLocalDateTime()</td>
</tr>
<tr>
<td>java.time.ZoneId<br>java.util.TimeZone</td>
<td>Timezone.getTimeZone(id)</td>
<td>timeZone.toZoneId()</td>
</tr>
<tr>
<td>java.time.format.DateTimeFormatter<br>java.text.DateFormat</td>
<td>formatter.toFormat()</td>
<td>无</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>JDK</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>Java</tag>
        <tag>JDK</tag>
      </tags>
  </entry>
  <entry>
    <title>GC机制</title>
    <url>/JVM/GC%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<!-- ## JVM内存结构
![JVM内存结构](JVM_GC机制/JVM内存结构.png)

### 新生代(Young Generation) 
- 大多数对象在新生代中被创建，其中很多对象的生命周期很短。每次新生代的垃圾回收（又称`Minor GC`）后只有少量对象存活，所以选用`复制算法`，只需要少量的复制成本就可以完成回收。

- 新生代内又分三个区：一个`Eden`区，两个`Survivor`区，大部分对象在Eden区中生成。当Eden区满时，还存活的对象将被复制到两个Survivor区（中的一个）。当这个Survivor区满时，此区的存活且不满足“晋升”条件的对象将被复制到另外一个Survivor区。`对象每经历一次Minor GC，年龄加1，达到“晋升年龄阈值”后，被放到老年代，这个过程也称为“晋升”`。显然，“晋升年龄阈值”的大小直接影响着对象在新生代中的停留时间，在`Serial`和`ParNew` 两种GC回收器中，`“晋升年龄阈值”通过参数MaxTenuringThreshold设定，默认值为15`。

### 老年代(Old Generation)  
- 在新生代中经历了N次垃圾回收后仍存活的对象，就会被放到年老代，该区域中对象存活率高。老年代的垃圾回收（又称`Major GC`）通常使用`“标记-清理”`或`“标记-整理”`算法。整堆包括新生代和老年代的垃圾回收称为`Full GC`（HotSpot VM里，除了`CMS`之外，其它能收集老年代的GC都会同时收集整个GC堆，包括新生代）

### 永久代(Perm Generation) `
- 主要存放元数据，例如Class、Method的元信息，与垃圾回收要回收的Java对象关系不大。相对于新生代和年老代来说，该区域的划分对垃圾回收影响比较小。 -->
<h2 id="GC判断策略"><a href="#GC判断策略" class="headerlink" title="GC判断策略"></a>GC判断策略</h2><p><img src="/JVM/GC%E6%9C%BA%E5%88%B6/%E5%88%A4%E6%96%AD%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%94%9F%E6%AD%BB.png" alt="判断对象的生死"></p>
<span id="more"></span>

<h3 id="判断对象是否可回收"><a href="#判断对象是否可回收" class="headerlink" title="判断对象是否可回收"></a>判断对象是否可回收</h3><h4 id="引用计数法-Reference-Counting"><a href="#引用计数法-Reference-Counting" class="headerlink" title="引用计数法 (Reference Counting)"></a><strong>引用计数法 (Reference Counting)</strong></h4><ul>
<li><p>算法描述：</p>
<ul>
<li>给对象添加一个引用计数器</li>
<li>每有一个地方引用它，计数器加 1</li>
<li>引用失效时，计数器减 1</li>
<li>计数器值为 0 的对象不再可用</li>
</ul>
</li>
<li><p>缺点：</p>
<ul>
<li>很难解决循环引用的问题。即 <code>objA.instance = objB; objB.instance = objA;</code>，objA 和 objB 都不会再被访问后，它们仍然相互引用着对方，所以它们的引用计数器不为 0，将永远不能被判为不可用。</li>
</ul>
</li>
</ul>
<h4 id="可达性分析法-Reachability-Analysis"><a href="#可达性分析法-Reachability-Analysis" class="headerlink" title="可达性分析法 (Reachability Analysis)"></a><strong>可达性分析法 (Reachability Analysis)</strong></h4><ul>
<li><p>算法描述：</p>
<ul>
<li>从 “GC Root” 对象作为起点开始向下搜索，走过的路径称为引用链（Reference Chain）；</li>
<li>从 “GC Root” 开始，不可达的对象被判为不可用。</li>
</ul>
</li>
<li><p>Java 中可作为 “GC Root” 的对象：</p>
<ul>
<li>栈中（本地变量表中的reference）<ul>
<li>虚拟机栈中，栈帧中的本地变量表引用的对象</li>
<li>本地方法栈中，JNI 引用的对象（native方法）</li>
</ul>
</li>
<li>方法区中<ul>
<li>类的静态属性引用的对象</li>
<li>常量引用的对象</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="四种引用类型"><a href="#四种引用类型" class="headerlink" title="四种引用类型"></a>四种引用类型</h3><p><img src="/JVM/GC%E6%9C%BA%E5%88%B6/%E5%9B%9B%E7%A7%8D%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B.png" alt="四种引用类型"></p>
<ul>
<li><code>强引用 </code> 默认情况下，对象采用的均为强引用（这个对象的实例没有其他对象引用，GC时才会被回收）</li>
<li><code>软引用 </code> 软引用是Java中提供的一种比较适合于缓存场景的应用（只有在内存不够用的情况下才会被GC）</li>
<li><code>弱引用 </code> 在GC时一定会被GC回收</li>
<li><code>虚引用 </code> 由于虚引用只是用来得知对象是否被GC</li>
</ul>
<h2 id="GC算法"><a href="#GC算法" class="headerlink" title="GC算法"></a>GC算法</h2><h3 id="复制拷贝-Copying"><a href="#复制拷贝-Copying" class="headerlink" title="复制拷贝 (Copying)"></a>复制拷贝 (Copying)</h3><p><img src="/JVM/GC%E6%9C%BA%E5%88%B6/%E5%A4%8D%E5%88%B6%E6%8B%B7%E8%B4%9D.png" alt="复制拷贝"></p>
<h3 id="标记清除-Mark-Sweep"><a href="#标记清除-Mark-Sweep" class="headerlink" title="标记清除 (Mark-Sweep)"></a>标记清除 (Mark-Sweep)</h3><p><img src="/JVM/GC%E6%9C%BA%E5%88%B6/%E6%A0%87%E8%AE%B0%E6%B8%85%E9%99%A4.png" alt="标记清除"></p>
<h3 id="标记整理-Mark-Compact"><a href="#标记整理-Mark-Compact" class="headerlink" title="标记整理 (Mark-Compact)"></a>标记整理 (Mark-Compact)</h3><p><img src="/JVM/GC%E6%9C%BA%E5%88%B6/%E6%A0%87%E8%AE%B0%E6%95%B4%E7%90%86.png" alt="标记整理"></p>
<h3 id="分代收集-Generational-GC"><a href="#分代收集-Generational-GC" class="headerlink" title="分代收集 (Generational GC)"></a>分代收集 (Generational GC)</h3><ul>
<li><code>新生代</code>： GC 过后只有少量对象存活 —— 复制拷贝</li>
<li><code>老年代</code>： GC 过后对象存活率高 —— 标记整理</li>
</ul>
<h2 id="GC收集器"><a href="#GC收集器" class="headerlink" title="GC收集器"></a>GC收集器</h2><ul>
<li>GC算法是内存回收的方法论（类似接口），GC收集器是算法落地实现（类似实现）。</li>
</ul>
<h3 id="垃圾收集器类型"><a href="#垃圾收集器类型" class="headerlink" title="垃圾收集器类型"></a>垃圾收集器类型</h3><p><img src="/JVM/GC%E6%9C%BA%E5%88%B6/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8%E7%B1%BB%E5%9E%8B.jpg" alt="垃圾收集器类型"></p>
<ul>
<li><code>串行垃圾回收器(Serial) </code> 它为单线程环境设计且只使用一个线程进行垃圾回收，会暂停所有的用户线程。所以不适合服务器环境。</li>
<li><code>并行垃圾回收器(Parallel) </code> 多个垃圾收集线程并行工作，此时用户线程是暂停的，适用于科学计算&#x2F;大数据处理首台处理等弱交互场景。</li>
<li><code>并发垃圾回收器(CMS) </code> 用户线程和垃圾收集线程同时执行（不一定是并行，可能交替执行），不需要停顿，适用对响应时间有要求的场景。</li>
<li><code>G1垃圾回收器(G1) </code> 将堆内存分割成不同的区域然后并发的对其进行垃圾回收。</li>
</ul>
<h3 id="七种垃圾收集器"><a href="#七种垃圾收集器" class="headerlink" title="七种垃圾收集器"></a>七种垃圾收集器</h3><p><img src="/JVM/GC%E6%9C%BA%E5%88%B6/7%E7%A7%8D%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8.jpg" alt="7种垃圾回收器"></p>
<h3 id="垃圾收集器组合"><a href="#垃圾收集器组合" class="headerlink" title="垃圾收集器组合"></a>垃圾收集器组合</h3><p><img src="/JVM/GC%E6%9C%BA%E5%88%B6/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8%E7%BB%84%E5%90%88.jpg" alt="圾回收集器组合"><br><img src="/JVM/GC%E6%9C%BA%E5%88%B6/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8%E5%8F%82%E6%95%B0.jpg" alt="圾回收集器参数"></p>
<h3 id="垃圾回收器选择"><a href="#垃圾回收器选择" class="headerlink" title="垃圾回收器选择"></a>垃圾回收器选择</h3><ul>
<li>单CPU或小内存，单机程序<ul>
<li><code>-XX:+UseSerialGC</code></li>
</ul>
</li>
<li>多CPU，需要最大吞吐量，如后台计算型应用<ul>
<li><code>-XX:+UseParallelGC</code></li>
<li><code>-XX:+UseParallelOldGC</code></li>
</ul>
</li>
<li>多CPU，追求低停顿时间，需快速响应如互联网应用<ul>
<li><code>-XX:+UseConcMarkSweepGC</code></li>
<li><code>-XX:+UseParNewGC </code></li>
</ul>
</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="http://tang.love/2017/10/29/gc_category_in_jvm/">大唐札记</a></li>
<li><a href="https://www.happyheihei.com/2019/03/10/02-%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86&#40;GC&#41;.html">happyheihei</a></li>
</ul>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>GC调优</title>
    <url>/JVM/GC%E8%B0%83%E4%BC%98/</url>
    <content><![CDATA[<h2 id="JVM参数类型"><a href="#JVM参数类型" class="headerlink" title="JVM参数类型"></a>JVM参数类型</h2><h3 id="标配参数-了解"><a href="#标配参数-了解" class="headerlink" title="标配参数 (了解)"></a>标配参数 (了解)</h3><ul>
<li><code>-version</code></li>
<li><code>-help</code></li>
<li><code>-showversion</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~  java -version</span><br><span class="line">   java version <span class="string">&quot;1.8.0_201&quot;</span></span><br><span class="line">   Java(TM) SE Runtime Environment (build 1.8.0_201-b09)</span><br><span class="line">   Java HotSpot(TM) 64-Bit Server VM (build 25.201-b09, mixed mode)</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="X参数-了解"><a href="#X参数-了解" class="headerlink" title="X参数 (了解)"></a>X参数 (了解)</h3><ul>
<li><code>-Xint</code> 解释执行</li>
<li><code>-Xcomp</code> 第一次使用就编译成本地代码</li>
<li><code>-Xmixed</code> 混合模式</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~  java -version</span><br><span class="line">   java version <span class="string">&quot;1.8.0_201&quot;</span></span><br><span class="line">   Java(TM) SE Runtime Environment (build 1.8.0_201-b09)</span><br><span class="line">   Java HotSpot(TM) 64-Bit Server VM (build 25.201-b09, mixed mode)</span><br><span class="line">   </span><br><span class="line">~  java -Xint -version</span><br><span class="line">   java version <span class="string">&quot;1.8.0_201&quot;</span></span><br><span class="line">   Java(TM) SE Runtime Environment (build 1.8.0_201-b09)</span><br><span class="line">   Java HotSpot(TM) 64-Bit Server VM (build 25.201-b09, interpreted mode)</span><br><span class="line">   </span><br><span class="line">~  java -Xcomp -version</span><br><span class="line">   java version <span class="string">&quot;1.8.0_201&quot;</span></span><br><span class="line">   Java(TM) SE Runtime Environment (build 1.8.0_201-b09)</span><br><span class="line">   Java HotSpot(TM) 64-Bit Server VM (build 25.201-b09, compiled mode)</span><br></pre></td></tr></table></figure>

<h3 id="XX参数"><a href="#XX参数" class="headerlink" title="XX参数"></a>XX参数</h3><ul>
<li>Boolean类型：<code>-XX:+或者-某个属性值</code> ，+表示开启，-表示关闭</li>
<li>KV设值类型：<code>-XX:属性key=属性值value</code></li>
</ul>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line">~  <span class="attribute">jps</span> -l</span><br><span class="line">   <span class="attribute">74019</span> org.jetbrains.jps.cmdline.Launcher</span><br><span class="line">   <span class="attribute">67749</span> org.jetbrains.idea.maven.server.RemoteMavenServer</span><br><span class="line">   <span class="attribute">74020</span> com.example.demo.gc.HelloGC</span><br><span class="line">   <span class="attribute">67718</span></span><br><span class="line">   <span class="attribute">74024</span> sun.tools.jps.Jps</span><br><span class="line">   </span><br><span class="line">~  <span class="attribute">jinfo</span> -flag UseSerialGC <span class="number">74020</span></span><br><span class="line">   -<span class="attribute">XX</span>:-UseSerialGC</span><br></pre></td></tr></table></figure>

<h2 id="JVM参数列表"><a href="#JVM参数列表" class="headerlink" title="JVM参数列表"></a>JVM参数列表</h2><p><img src="/JVM/GC%E8%B0%83%E4%BC%98/JVM%E5%8F%82%E6%95%B0%E5%88%97%E8%A1%A8.png" alt="JVM参数列表"></p>
<h2 id="GC日志"><a href="#GC日志" class="headerlink" title="GC日志"></a>GC日志</h2><p><img src="/JVM/GC%E8%B0%83%E4%BC%98/GC%E6%97%A5%E5%BF%97.png" alt="GC日志"></p>
<h2 id="GC优化策略"><a href="#GC优化策略" class="headerlink" title="GC优化策略"></a>GC优化策略</h2><h3 id="降低Full-GC执行频率"><a href="#降低Full-GC执行频率" class="headerlink" title="降低Full GC执行频率"></a>降低Full GC执行频率</h3><ul>
<li>可选方案：<ul>
<li><p>1.&amp;nbsp;增大Old</p>
<ul>
<li>在不放大Heap的情况下，可能会造成一些问题</li>
<li>放大Heap</li>
</ul>
</li>
<li><p>2.&amp;nbsp;尽可能减少从new晋升到Old的对象</p>
<ul>
<li>控制晋升年龄阀值</li>
<li>增大救助空间</li>
</ul>
</li>
<li><p>3.&amp;nbsp;优化系统性能</p>
</li>
</ul>
</li>
</ul>
<h3 id="降低Full-GC暂停时间"><a href="#降低Full-GC暂停时间" class="headerlink" title="降低Full GC暂停时间"></a>降低Full GC暂停时间</h3><ul>
<li>可选方案：<ul>
<li><p>1.&amp;nbsp;减少Heap</p>
</li>
<li><p>2.&amp;nbsp;GC换成CMS</p>
</li>
<li><p>3.&amp;nbsp;升级或增加CPU</p>
</li>
</ul>
</li>
</ul>
<h3 id="降低Minor-GC执行频率"><a href="#降低Minor-GC执行频率" class="headerlink" title="降低Minor GC执行频率"></a>降低Minor GC执行频率</h3><ul>
<li>可选方案：<ul>
<li><p>1.&amp;nbsp;增大新生代</p>
<ul>
<li>有可能造成Full GC频繁</li>
</ul>
</li>
<li><p>2.&amp;nbsp;优化系统性能，减少每次请求的内存消耗量</p>
</li>
</ul>
</li>
</ul>
<h3 id="降低Minor-GC暂停时间"><a href="#降低Minor-GC暂停时间" class="headerlink" title="降低Minor GC暂停时间"></a>降低Minor GC暂停时间</h3><ul>
<li>可选方案：<ul>
<li><p>1.&amp;nbsp;减少新生代</p>
<ul>
<li>有可能造成new晋升到Old的对象增加</li>
</ul>
</li>
<li><p>2.&amp;nbsp;增加或升级CPU</p>
</li>
</ul>
</li>
</ul>
<h2 id="性能监控工具"><a href="#性能监控工具" class="headerlink" title="性能监控工具"></a>性能监控工具</h2><ul>
<li>命令行工具：<code>jps</code>、<code>jstat</code>、<code>jinfo</code>、<code>jmap</code>、<code>jhat</code>、<code>jstack</code></li>
<li>启动远程工具：<code>jstatd</code>、<code>jmx</code></li>
<li>图形化工具：<code>jconsole</code>、<code>jvisualvm</code>、<code>MAT</code></li>
<li>实时调试：<code>Btrace</code></li>
</ul>
<h3 id="命令行工具"><a href="#命令行工具" class="headerlink" title="命令行工具"></a>命令行工具</h3><h4 id="jps"><a href="#jps" class="headerlink" title="jps"></a><strong>jps</strong></h4><ul>
<li>显示指定系统内所有HotSpot虚拟机进程</li>
<li>命令格式：<code>jps [options] [hostid]</code></li>
<li>参数选项：<ul>
<li><code>[options]</code>：<ul>
<li><strong>-q：</strong>只输出LVMID，省略主类名称</li>
<li><strong>-m：</strong>输出虚拟机进程启动时传递给主类main()函数的参数</li>
<li><strong>-l：</strong>输出主类的全名，如果进程执行的是jar，输出jar路径</li>
<li><strong>-v：</strong>输出虚拟机进程启动时JVM参数</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="jstat"><a href="#jstat" class="headerlink" title="jstat"></a><strong>jstat</strong></h4><ul>
<li>虚拟机统计信息监视工具</li>
<li>命令格式：<code>jstat &lt;option&gt; [-t] [-h&lt;lines&gt;] &lt;vmid&gt; [&lt;interval&gt; [&lt;count&gt;]]</code></li>
<li>参数选项：<ul>
<li><code>[-t]</code>：在第一列显示自JVM启动以来的时间戳</li>
<li><code>[-h&lt;lines&gt;]</code>：每隔几行输出标题</li>
<li><code>[&lt;interval&gt;]</code>：连续输出的时间间隔 (单位：s，ms)</li>
<li><code>[&lt;count&gt;]</code>：连续输出的次数</li>
<li><code>&lt;option&gt;</code>：<ul>
<li><strong>-class：</strong>监视类装载、卸载数量、总空间及类装载所消耗的时间</li>
<li><strong>-gc：</strong>监视java堆状况，包括新生代、老年代、永久代等的容量、已用空间、GC时间合计等信息</li>
<li><strong>-gccapacity：</strong>监视内容与-gc基本相同，但输出主要关注java堆各个区域使用到的最大、最小空间</li>
<li><strong>-gcutil：</strong>监视内容与-gc基本相同，但输出主要关注已使用空间占总空间的百分比</li>
<li><strong>-gccause    ：</strong>监视内容与-gcutil基本相同，但是会额外输出导致上一次GC产生的原因</li>
<li><strong>-gcnew：</strong>监视新生代GC状况</li>
<li><strong>-gcnewcapacity：</strong>监视内容与-gcnew基本相同，输出主要关注使用到的最大、最小空间</li>
<li><strong>-gcold：</strong>监视老年代GC状况</li>
<li><strong>-gcoldcapacity：</strong>监视内容与-gcold基本相同，输出主要关注使用到的最大、最小空间</li>
<li><strong>-gcpermcapacity：</strong>输出永久代使用到的最大、最小空间</li>
<li><strong>-compiler：</strong>输出JIT编译过的方法、耗时等信息</li>
<li><strong>-printcompilation：</strong>输出已经被JIT编译的方法</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="jinfo"><a href="#jinfo" class="headerlink" title="jinfo"></a><strong>jinfo</strong></h4><ul>
<li>实时的查看和调整虚拟机的各项参数</li>
<li>命令格式：<code>jinfo [option] &lt;vmid&gt;</code></li>
<li>参数选项：<ul>
<li><code>[options]</code>：<ul>
<li><strong>-flag &lt;name&gt;：</strong>显示JVM某参数值</li>
<li><strong>-flag [+ | -]&lt;name&gt;：</strong>开启关闭JVM某参数</li>
<li><strong>-flag &lt;name&gt;&#x3D;&lt;value&gt;：</strong>设置JVM某参数的值</li>
<li><strong>-flags：</strong>显示所有的参数</li>
<li><strong>-sysprops：</strong>显示系统参数</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="jmap"><a href="#jmap" class="headerlink" title="jmap"></a><strong>jmap</strong></h4><ul>
<li>生成虚拟机的内存转储快照（heapdump）文件</li>
<li>命令格式：<code>jmap [options] &lt;vmid&gt;</code></li>
<li>参数选项：<ul>
<li><code>[options]</code>：<ul>
<li><strong>-dump：</strong>生成Java堆转储快照。格式为：-dump:[live,]format&#x3D;b,file&#x3D;&lt;filename&gt;，live表示指明是否只dump出存活的对象；format指定输出格式；file指定文件名</li>
<li><strong>-finalizerinfo：</strong>显示在F-Queue中等待Finalizer线程执行finalize()方法的对象。</li>
<li><strong>-heap：</strong>显示Java堆详细信息，如使用哪种回收器、参数配置、分代状况等</li>
<li><strong>-histo：</strong>显示堆中对象统计信息，包括类、实例数量和合计容量</li>
<li><strong>-permstat：</strong>以ClassLoader为统计口径显示永久代内存状态</li>
<li><strong>-F：</strong>当虚拟机进程对-dump选项没有响应时，可使用这个选项强制生成dump快照</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="jhat"><a href="#jhat" class="headerlink" title="jhat"></a><strong>jhat</strong></h4><ul>
<li>分析jmap生成的文件，建立一个HTTP&#x2F;HTML服务器，在浏览器上查看分析结果</li>
<li>命令格式：<code>jhat [-stack &lt;bool&gt;] [-refs &lt;bool&gt;] [-port &lt;port&gt;] [-baseline &lt;file&gt;] [-debug &lt;int&gt;] &lt;file&gt;</code></li>
<li>参数选项：<ul>
<li><code>[-J&lt;flag&gt;]</code>：jhat命令会启动一个JVM来执行，可以在启动时传入一些参数。如：-J-Xmx512M</li>
<li><code>[-stack &lt;bool&gt;]</code>：关闭跟踪对象分配调用堆栈，默认值是true</li>
<li><code>[-refs &lt;bool&gt;]</code>：关闭对象的引用的跟踪，默认为true</li>
<li><code>[-port &lt;port&gt;]</code>：设置HTTP Server端口号，默认值 7000</li>
<li><code>[-exclude &lt;file&gt;]</code>：指定对象查询时需要排除的数据成员列表文件</li>
<li><code>[-baseline &lt;file&gt;]</code>：指定基准堆转储。在具有相同的对象ID两个堆转储对象被标记为不是新对象。这是用于比较两个不同的堆转储有用</li>
<li><code>[-debug &lt;int&gt;]</code>：设置debug级别，0级表示没有调试输出。值越大则表示输出更详细的 debug 信息</li>
</ul>
</li>
</ul>
<h4 id="jstack"><a href="#jstack" class="headerlink" title="jstack"></a><strong>jstack</strong></h4><ul>
<li>生成当前时刻线程快照，主要⽬的是定位线程出现⻓时间停顿的原因，如线程间死锁、死循环等问题</li>
<li>命令格式：<code>jstack [options] &lt;vmid&gt;</code></li>
<li>参数选项：<ul>
<li><code>[options]</code>：<ul>
<li><strong>-F：</strong>当正常输出请求不被响应时，强制输出线程堆栈</li>
<li><strong>-l：</strong>除堆栈外，显示关于锁的附加信息</li>
<li><strong>-m：</strong>如果调用到本地方法的话，可以显示C&#x2F;C++的堆栈</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://docs.oracle.com/javase/8/docs/technotes/tools/windows/java.html">JDK8 Win官网文档</a></li>
<li><a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html">JDK8 Linux&#x2F;OS官网文档</a></li>
<li><a href="http://xxfox.perfma.com/">XXFOX</a></li>
<li><a href="https://www.slideserve.com/abba/jvm">JVM优化入门</a></li>
<li><a href="http://calvin1978.blogcn.com/articles/jvmoption-7.html">JVM参数推荐</a></li>
<li><a href="https://www.jianshu.com/p/c82c0a8b857f">JVM性能监控-命令行工具</a></li>
</ul>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>Java</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>OOM常见异常</title>
    <url>/JVM/OOM%E5%B8%B8%E8%A7%81%E5%BC%82%E5%B8%B8/</url>
    <content><![CDATA[<!-- https://zhuanlan.zhihu.com/p/63916807 -->

<h2 id="堆内存溢出"><a href="#堆内存溢出" class="headerlink" title="堆内存溢出"></a>堆内存溢出</h2><p><strong>原因</strong></p>
<ul>
<li>java堆内存不够</li>
<li>业务高峰，创建对象过多</li>
<li>内存泄露</li>
<li>内存碎片严重，无法分配给大对象</li>
</ul>
<p><strong>解决</strong></p>
<ul>
<li>调整 -Xmx 参数增加堆大小</li>
<li>修复应用程序中的内存泄漏</li>
</ul>
<span id="more"></span>

<p><strong>案例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** VM Args: -Xms10m -Xmx10m */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeapOOMDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">byte</span>[] b = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">20</span> * <span class="number">1024</span> * <span class="number">1024</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.lang.OutOfMemoryError: Java heap space</span><br><span class="line">	at com.example.demo.HeapOOMDemo.main(HeapOOMDemo.java:<span class="number">7</span>)</span><br></pre></td></tr></table></figure>

<h2 id="栈内存溢出"><a href="#栈内存溢出" class="headerlink" title="栈内存溢出"></a>栈内存溢出</h2><p><strong>原因</strong></p>
<ul>
<li>方法调用层次过多（比如存在无限递归调用）</li>
<li>线程栈太小</li>
</ul>
<p><strong>解决</strong></p>
<ul>
<li>优化程序设计，减少方法调用层次</li>
<li>调整 -Xss 参数增加线程栈大小</li>
</ul>
<p><strong>案例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** VM Args: -Xss256k */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StackOFDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        methods();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">methods</span><span class="params">()</span>&#123;</span><br><span class="line">        methods();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.lang.StackOverflowError</span><br><span class="line">	at com.example.demo.StackOFDemo.methods(StackOFDemo.java:<span class="number">11</span>)</span><br><span class="line">	at com.example.demo.StackOFDemo.methods(StackOFDemo.java:<span class="number">11</span>)</span><br><span class="line">	at com.example.demo.StackOFDemo.methods(StackOFDemo.java:<span class="number">11</span>)</span><br><span class="line">	......</span><br></pre></td></tr></table></figure>

<h2 id="方法区溢出"><a href="#方法区溢出" class="headerlink" title="方法区溢出"></a>方法区溢出</h2><p><strong>原因</strong></p>
<ul>
<li>从 Java 8 开始 Perm gen 改成了 MetaSpace，在本机内存中分配 Class 元数据（称为 MetaSpace）。当MetaSpace 耗尽，则抛出异常</li>
</ul>
<p><strong>解决</strong></p>
<ul>
<li>调整 -XX: MaxMetaSpaceSize 参数增加MetaSpace大小</li>
<li>取消 -XX: MaxMetaspaceSize</li>
<li>减小 Java 堆大小,为 MetaSpace 提供更多的可用空间</li>
<li>为服务器分配更多的内存</li>
<li>可能是应用程序 bug，修复 bug</li>
</ul>
<p><strong>案例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.cglib.proxy.Enhancer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cglib.proxy.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cglib.proxy.MethodProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** VM Args: -XX:MetaspaceSize=10m -XX:MaxMetaspaceSize=10m */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodAreaOOMDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">OOMObject</span> &#123;  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">Enhancer</span> <span class="variable">enhancer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Enhancer</span>();</span><br><span class="line">            enhancer.setSuperclass(OOMObject.class);</span><br><span class="line">            enhancer.setUseCache(<span class="literal">false</span>);</span><br><span class="line">            enhancer.setCallback(</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">MethodInterceptor</span>() &#123;</span><br><span class="line">                        <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Object obj,</span></span><br><span class="line"><span class="params">                                                Method method,</span></span><br><span class="line"><span class="params">                                                Object[] objects,</span></span><br><span class="line"><span class="params">                                                MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                            <span class="keyword">return</span> methodProxy.invokeSuper(obj, objects);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">            );</span><br><span class="line">            enhancer.create();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.lang.OutOfMemoryError: Metaspace</span><br><span class="line">	at org.springframework.cglib.core.ReflectUtils.defineClass(ReflectUtils.java:<span class="number">526</span>)</span><br><span class="line">	at org.springframework.cglib.core.AbstractClassGenerator.generate(AbstractClassGenerator.java:<span class="number">363</span>)</span><br><span class="line">	at org.springframework.cglib.proxy.Enhancer.generate(Enhancer.java:<span class="number">582</span>)</span><br><span class="line">	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData.get(AbstractClassGenerator.java:<span class="number">131</span>)</span><br><span class="line">	at org.springframework.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:<span class="number">319</span>)</span><br><span class="line">	at org.springframework.cglib.proxy.Enhancer.createHelper(Enhancer.java:<span class="number">569</span>)</span><br><span class="line">	at org.springframework.cglib.proxy.Enhancer.create(Enhancer.java:<span class="number">384</span>)</span><br><span class="line">	at com.example.demo.MethodAreaOOMDemo.main(MethodAreaOOMDemo.java:<span class="number">29</span>)</span><br></pre></td></tr></table></figure>

<h2 id="直接内存溢出"><a href="#直接内存溢出" class="headerlink" title="直接内存溢出"></a>直接内存溢出</h2><p><strong>原因</strong></p>
<ul>
<li>直接内存不够</li>
</ul>
<p><strong>解决</strong></p>
<ul>
<li>调整 -XX:MaxDirectMemorySize 参数增加内存大小</li>
</ul>
<p><strong>案例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** VM Args: -XX:MaxDirectMemorySize=5m */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DirectMemoryOOMDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MaxDirectMemorySize：&quot;</span> +</span><br><span class="line">                (sun.misc.VM.maxDirectMemory() / (<span class="type">double</span>)<span class="number">1024</span> / <span class="number">1024</span>) + <span class="string">&quot;MB&quot;</span>);</span><br><span class="line">        <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocateDirect(<span class="number">6</span> * <span class="number">1024</span> * <span class="number">1024</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">MaxDirectMemorySize：<span class="number">5.</span>0MB</span><br><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.lang.OutOfMemoryError: Direct buffer memory</span><br><span class="line">	at java.nio.Bits.reserveMemory(Bits.java:<span class="number">694</span>)</span><br><span class="line">	at java.nio.DirectByteBuffer.&lt;init&gt;(DirectByteBuffer.java:<span class="number">123</span>)</span><br><span class="line">	at java.nio.ByteBuffer.allocateDirect(ByteBuffer.java:<span class="number">311</span>)</span><br><span class="line">	at com.example.demo.DirectMemoryOOMDemo.main(DirectMemoryOOMDemo.java:<span class="number">11</span>)</span><br></pre></td></tr></table></figure>

<h2 id="GC开销超过限制"><a href="#GC开销超过限制" class="headerlink" title="GC开销超过限制"></a>GC开销超过限制</h2><p><strong>原因</strong></p>
<ul>
<li>GC回收时间过长：超过98%的时间在进行垃圾回收，且回收了不到2%的堆空间，连续多次</li>
</ul>
<p><strong>解决</strong></p>
<ul>
<li>调整 -Xmx 参数增加堆大小</li>
<li>使用 -XX:-UseGCOverheadLimit 取消 GC 开销限制</li>
<li>修复应用程序中的内存泄漏</li>
</ul>
<p><strong>案例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** VM Args: -Xms10m -Xmx10m -XX:MaxDirectMemorySize=5m */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GCOverheadDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                list.add(String.valueOf(++i).intern());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;i值：&quot;</span> + i);</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">i值：<span class="number">147681</span></span><br><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.lang.OutOfMemoryError: GC overhead limit exceeded</span><br><span class="line">	at java.lang.Integer.toString(Integer.java:<span class="number">403</span>)</span><br><span class="line">	at java.lang.String.valueOf(String.java:<span class="number">3099</span>)</span><br><span class="line">	at com.example.demo.GCOverheadDemo.main(GCOverheadDemo.java:<span class="number">15</span>)</span><br></pre></td></tr></table></figure>

<h2 id="线程创建限制"><a href="#线程创建限制" class="headerlink" title="线程创建限制"></a>线程创建限制</h2><p><strong>原因</strong></p>
<ul>
<li>进程和操作系统的内存资源限制</li>
<li>进程和操作系统的线程数限制</li>
<li>Linux中的线程被实现为轻量级进程，因此，还受到pid数量的限制</li>
</ul>
<p><strong>解决</strong></p>
<ul>
<li>排查应用是否创建了过多的线程</li>
<li>调整操作系统线程数阈值</li>
<li>增加机器内存</li>
<li>减小堆内存</li>
<li>减少进程数</li>
<li>减小线程栈大小</li>
<li>增大pid范围</li>
</ul>
<p><strong>案例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UnableCreateNewThreadDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(Integer.MAX_VALUE);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, String.valueOf(++i)).start();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;i值：&quot;</span> + i);</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">i值：<span class="number">4071</span></span><br><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.lang.OutOfMemoryError: unable to create <span class="keyword">new</span> <span class="title class_">native</span> thread</span><br><span class="line">	at java.lang.Thread.start0(Native Method)</span><br><span class="line">	at java.lang.Thread.start(Thread.java:<span class="number">717</span>)</span><br><span class="line">	at com.example.demo.UnableCreateNewThreadDemo.main(UnableCreateNewThreadDemo.java:<span class="number">16</span>)</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://segmentfault.com/a/1190000017226359">煮酒科技</a></li>
<li><a href="https://www.jianshu.com/p/2fdee831ed03">CHEN川</a></li>
</ul>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>体系结构</title>
    <url>/JVM/%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h2 id="JVM体系结构"><a href="#JVM体系结构" class="headerlink" title="JVM体系结构"></a>JVM体系结构</h2><p><img src="/JVM/%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/JVM%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84.jpeg" alt="JVM体系结构"></p>
<span id="more"></span>

<h3 id="方法区（Method-Area）"><a href="#方法区（Method-Area）" class="headerlink" title="方法区（Method Area）"></a>方法区（Method Area）</h3><ul>
<li>和堆一样，被所有线程共享。存储已经被虚拟机加载的类信息、常量、静态变量等数据。此外，还有一个别名-非堆(Hon-Heap)。</li>
<li>特点：线程共享，会出现OOM。</li>
</ul>
<h3 id="堆（Heap）"><a href="#堆（Heap）" class="headerlink" title="堆（Heap）"></a>堆（Heap）</h3><ul>
<li>Java堆是JVM内存里面最大的一部分，被所有线程共享，在虚拟机启动的时候创建。所有的对象实例、数据(堆上分配)。Java堆也是GC主要的管理区域。</li>
<li>特点：线程共享，会出现OOM。</li>
</ul>
<h3 id="虚拟机栈（Java-Stack）"><a href="#虚拟机栈（Java-Stack）" class="headerlink" title="虚拟机栈（Java Stack）"></a>虚拟机栈（Java Stack）</h3><ul>
<li>生命周期与线程相同。虚拟机栈描述的是Java方法执行的内存模型：每个方法在执行的同时都会创建一个栈帧来存储局部变量表、操作数栈、动态链接、方法出口等信息。一个方法的执行过程就是一个栈帧在虚拟机栈中入栈至出栈的过程。如果线程请求栈的深度大于JVM允许的深度，抛出 StackOverflowError 异常，如果虚拟机栈动态扩展时无法申请到足够的内存，会抛出 OutOfMemoryError 异常。</li>
<li>特点：线程私有，会出现OOM。</li>
</ul>
<p><img src="/JVM/%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88.png" alt="虚拟机栈"></p>
<h3 id="本地方法栈（Native-Method-Stack）"><a href="#本地方法栈（Native-Method-Stack）" class="headerlink" title="本地方法栈（Native Method Stack）"></a>本地方法栈（Native Method Stack）</h3><ul>
<li>这部分与虚拟机栈作用类似，区别是虚拟机栈为虚拟机执行Java方法服务，本地方法栈则为虚拟机使用到的Native方法服务。和虚拟机栈一样，会抛出 StackOverflowError 和 OutOfMemoryError 异常。</li>
<li>特点：线程私有，会出现OOM。</li>
</ul>
<h3 id="程序计数器（Program-Counter-Register）"><a href="#程序计数器（Program-Counter-Register）" class="headerlink" title="程序计数器（Program Counter Register）"></a>程序计数器（Program Counter Register）</h3><ul>
<li>“当前线程所执行的字节码的行号指示器。” 存放着下一条将要执行的字节码指令的位置，假如没有ta，分支、循环、跳转、异常处理、线程恢复等功能都实现不了。如果当前执行Java方法，PC的值是正在执行的虚拟机字节码指令的地址，如果执行的是Native方法，比如 String#intern ，PC的值为空(Undefined)。</li>
<li>特点：线程私有，不会出现OOM。</li>
</ul>
<h3 id="整体总结"><a href="#整体总结" class="headerlink" title="整体总结"></a>整体总结</h3><p><img src="/JVM/%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/JVM%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E6%80%BB%E7%BB%93.png" alt="JVM内存模型总结"></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzU3NDY4NzQwNQ==&mid=2247483820&idx=1&sn=8418f0f6a618bb0f0ca0980af09a816f&chksm=fd2fd06eca5859786ab124dd204a7ec9b1ad3ed230b9b531086cc6729a277a05d3e8307b7e0d&scene=21#wechat_redirect">无敌码农</a></li>
<li><a href="https://github.com/doocs/jvm/blob/master/docs/01-jvm-memory-structure.md">Doocs</a></li>
</ul>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven：手动导包</title>
    <url>/Maven/Maven%EF%BC%9A%E6%89%8B%E5%8A%A8%E5%AF%BC%E5%8C%85/</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn install:install-file -Dfile=&lt;path-to-file&gt; -DgroupId=&lt;group-id&gt; -DartifactId=&lt;artifact-id&gt; -Dversion=&lt;version&gt; -Dpackaging=&lt;packaging&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>&lt;path-to-file&gt;</code>：jar包路径</li>
<li><code>&lt;group-id&gt;</code>：maven依赖中的group-id</li>
<li><code>&lt;artifact-id&gt;</code>：maven依赖中的artifact-id</li>
<li><code>&lt;version&gt;</code>：maven依赖中的version jar版本号</li>
<li><code>&lt;packaging&gt;</code>：规定项目的输出格式，包括jar、war、pom、apk等</li>
</ul>
]]></content>
      <categories>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven：镜像源</title>
    <url>/Maven/Maven%EF%BC%9A%E9%95%9C%E5%83%8F%E6%BA%90/</url>
    <content><![CDATA[<h2 id="镜像地址"><a href="#镜像地址" class="headerlink" title="镜像地址"></a>镜像地址</h2><ul>
<li>阿里云 <a href="https://maven.aliyun.com/mvn/view">https://maven.aliyun.com/mvn/view</a></li>
<li>腾讯云 <a href="https://mirrors.cloud.tencent.com/">https://mirrors.cloud.tencent.com</a></li>
<li>华为云 <a href="https://mirrors.huaweicloud.com/">https://mirrors.huaweicloud.com</a></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置多个mirror的情况下，只有第一个位置mirror的才生效 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云公共仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-tencentyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus tencentyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://mirrors.cloud.tencent.com/nexus/repository/maven-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>huaweicloud<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://mirrors.huaweicloud.com/repository/maven/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis：源码结构</title>
    <url>/MyBatis/MyBatis%EF%BC%9A%E6%BA%90%E7%A0%81%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<p><img src="/MyBatis/MyBatis%EF%BC%9A%E6%BA%90%E7%A0%81%E7%BB%93%E6%9E%84/MyBatis%E6%BA%90%E7%A0%81%E7%BB%93%E6%9E%84.png" alt="MyBatis源码结构"></p>
]]></content>
      <categories>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis：基本使用</title>
    <url>/Redis/Redis%EF%BC%9A%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="Redis常用命令"><a href="#Redis常用命令" class="headerlink" title="Redis常用命令"></a>Redis常用命令</h2><h3 id="Key（键）"><a href="#Key（键）" class="headerlink" title="Key（键）"></a>Key（键）</h3><ul>
<li><code>KEYS pattern</code> 查找所有符合给定模式 pattern 的 key</li>
<li><code>EXISTS key</code> 检查指定 key 是否存在</li>
<li><code>DEL key [key ...]</code> 删除一个或多个 key</li>
<li><code>RENAME key newkey</code> 重命名 key</li>
<li><code>RENAMENX key newkey</code> 当 newkey 不存在时，重命名 key</li>
<li><code>EXPIRE key seconds</code> 设置 key 生存时间（秒）</li>
<li><code>PEXPIRE key milliseconds</code> 设置 key 生存时间（毫秒）</li>
<li><code>EXPIREAT key timestamp</code> 设置 key 生存时间（UNIX 时间戳，秒）</li>
<li><code>PEXPIREAT key milliseconds-timestamp</code> 设置 key 生存时间（UNIX 时间戳，毫秒）</li>
<li><code>PERSIST key</code> 移除 key 生存时间，转换成永不过期的 key</li>
<li><code>TTL key </code> 获取 key 剩余生存时间（秒）</li>
<li><code>PTTL key </code> 获取 key 剩余生存时间（毫秒）</li>
<li><code>RANDOMKEY</code> 从当前数据库中随机返回（不删除）一个 key</li>
<li><code>TYPE key</code> 返回 key 所储存的值的类型</li>
<li><code>MOVE key db</code> 将当前数据库的 key 移动到给定的数据库 db 当中</li>
<li><code>SORT key [BY pattern] [LIMIT offset count] [GET pattern [GET pattern ...]] [ASC | DESC] [ALPHA] [STORE destination]</code>返回或保存给定列表、集合、有序集合 key 中经过排序的元素</li>
</ul>
<span id="more"></span>

<h3 id="String（字符串）"><a href="#String（字符串）" class="headerlink" title="String（字符串）"></a>String（字符串）</h3><ul>
<li><code>GET key</code> 获取 key 值</li>
<li><code>SET key value [EX seconds] [PX milliseconds] [NX|XX]</code> 设置 key 值</li>
<li><code>SETNX key value</code> 设置 key 值，仅当 key 不存在</li>
<li><code>MGET key [key ...]</code> 获取一个或多个 key 值</li>
<li><code>MSET key value [key value ...]</code> 设置一个或多个 key 值</li>
<li><code>MSETNX key value [key value ...]</code> 设置一个或多个 key 值，仅当所有 key 都不存在</li>
<li><code>GETRANGE key start end</code> 获取  key 值 start 和 end 索引范围的字符串</li>
<li><code>SETRANGE key offset value</code> 设置 key 值，根据指定索引位置</li>
<li><code>GETSET key value</code> 设置 key 值，并返回旧值</li>
<li><code>SETEX key seconds value</code> 设置 key 值，并设置生存时间（秒）</li>
<li><code>PSETEX key milliseconds value</code> 设置 key 值，并设置生存时间（毫秒）</li>
<li><code>APPEND key value</code> 将 value 追加到原来 key 值末尾</li>
<li><code>STRLEN key</code> 获取 key 值长度</li>
<li><code>INCR key</code> 将 key 值增1</li>
<li><code>DECR key</code> 将 key 值减1</li>
<li><code>INCRBY key increment</code> 将 key 值加上增量 increment</li>
<li><code>DECRBY key decrement</code> 将 key 值减去减量 decrement</li>
<li><code>INCRBYFLOAT key increment</code> 将 key 值加上浮点数增量 increment</li>
</ul>
<h3 id="Hash（哈希表）"><a href="#Hash（哈希表）" class="headerlink" title="Hash（哈希表）"></a>Hash（哈希表）</h3><ul>
<li><code>HKEYS key</code> 获取哈希表 key 中所有的 field</li>
<li><code>HVALS key</code> 获取哈希表 key 中所有的 field 值</li>
<li><code>HGETALL key</code> 获取哈希表 key 中所有的 field 和 field 值</li>
<li><code>HEXISTS key field</code> 检查哈希表 key 中的 field 是否存在</li>
<li><code>HGET key field</code> 获取哈希表 key 中的 field 值</li>
<li><code>HSET key field value</code> 设置哈希表 key 中的 field</li>
<li><code>HSETNX key field value</code> 设置哈希表 key 中的 field，仅当 field 不存在</li>
<li><code>HMGET key field [field ...]</code> 获取哈希表 key 中的一个或多个 field 值</li>
<li><code>HMSET key field value [field value ...]</code> 设置哈希表 key 中的一个或多个 field</li>
<li><code>HDEL key field [field ...]</code> 删除哈希表 key 中的一个或多个 field</li>
<li><code>HLEN key</code> 获取哈希表 key 中 field 的数量</li>
<li><code>HINCRBY key field increment</code> 将哈希表 key 中的 field 值加上增量 increment</li>
<li><code>HINCRBYFLOAT key field increment</code> 将哈希表 key 中的 field 值加上浮点数增量 increment</li>
</ul>
<h3 id="List（列表）"><a href="#List（列表）" class="headerlink" title="List（列表）"></a>List（列表）</h3><ul>
<li><code>LRANGE key start stop</code> 获取  key 中 start 和 stop 索引范围的元素</li>
<li><code>LPUSH key value [value ...]</code> 插入一个或多个值 value 到列表 key 的表头</li>
<li><code>RPUSH key value [value ...]</code> 插入一个或多个值 value 到列表 key 的表尾</li>
<li><code>LPUSHX key value</code> 插入 value 值到列表 key 的表头，仅当 key 存在</li>
<li><code>RPUSHX key value</code> 插入 value 值到列表 key 的表尾，仅当 key 存在</li>
<li><code>LPOP key</code> 移除并返回列表 key 的头元素</li>
<li><code>RPOP key</code> 移除并返回列表 key 的尾元素</li>
<li><code>LREM key count value</code> 移除 value 值，指定重复 value 值数量 count</li>
<li><code>LLEN key</code> 获取 key 长度</li>
<li><code>LINDEX key index</code> 获取下标为 index 的元素</li>
<li><code>LSET key index value</code> 设置下标为 index 的元素</li>
<li><code>LINSERT key BEFORE|AFTER pivot value</code> 插入 value 值，位于值 pivot 之前或之后</li>
<li><code>LTRIM key start stop</code> 截取 key 中 start 和 stop 索引范围的元素后，再赋值给 key</li>
<li><code>RPOPLPUSH source destination</code> 将列表 source 尾元素弹出，再插入到列表 destination 头元素</li>
</ul>
<h3 id="Set（集合）"><a href="#Set（集合）" class="headerlink" title="Set（集合）"></a>Set（集合）</h3><ul>
<li><code>SMEMBERS key</code> 获取集合 key 所有元素</li>
<li><code>SADD key member [member ...]</code> 加入 member 元素到 key 集合</li>
<li><code>SREM key member [member ...]</code> 移除集合 key 中的一个或多个 member 元素</li>
<li><code>SCARD key</code> 获取集合 key 数量</li>
<li><code>SISMEMBER key member</code> 判断 member 元素是否存在 key 集合</li>
<li><code>SDIFF key [key ...]</code> 获取第一个 key 集合的差集</li>
<li><code>SDIFFSTORE destination key [key ...]</code> 获取第一个 key 集合的差集，并赋值给 destination 集合</li>
<li><code>SINTER key [key ...]</code> 获取第一个 key 集合的交集</li>
<li><code>SINTERSTORE destination key [key ...]</code> 获取第一个 key 集合的交集，并赋值给 destination 集合</li>
<li><code>SUNION key [key ...]</code> 获取第一个 key 集合的并集</li>
<li><code>SUNIONSTORE destination key [key ...]</code> 获取第一个 key 集合的并集，并赋值给 destination 集合</li>
<li><code>SMOVE source destination member</code> 将 member 元素从 source 集合移动到 destination 集合</li>
<li><code>SPOP key</code> 移除并返回集合中的一个随机元素</li>
<li><code>SRANDMEMBER key [count]</code> 获取 count 数量的随机元素</li>
</ul>
<h3 id="SortedSet（有序集合）"><a href="#SortedSet（有序集合）" class="headerlink" title="SortedSet（有序集合）"></a>SortedSet（有序集合）</h3><ul>
<li><code>ZADD key score member [[score member] [score member] ...]</code> 加入一个或多个 member 元素及 score 值到序集中</li>
<li><code>ZREM key member [member ...]</code> 移除序集 key 中一个或多个 member 元素</li>
<li><code>ZRANGE key start stop [WITHSCORES]</code> 获取序集 key 中 start 和 stop 区间范围的元素（正序）</li>
<li><code>ZREVRANGE key start stop [WITHSCORES]</code> 获取序集 key 中 start 和 stop 区间范围的元素（反序）</li>
<li><code>ZCARD key</code> 获取序集 key 的元素数量</li>
<li><code>ZCOUNT key min max</code> 获取序集 key 中 score 值在 min 和 max 之间的元素数量</li>
<li><code>ZSCORE key member</code> 获取序集 key 中 score 值</li>
<li><code>ZRANK key member</code> 获取序集 key 中 member 下标（正序）</li>
<li><code>ZREVRANK key member</code> 获取序集 key 中 member 下标（反序）</li>
<li><code>ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]</code> 获取序集 key 中 score 值在 min 和 max 之间的元素（正序）</li>
<li><code>ZREVRANGEBYSCORE key max min [WITHSCORES] [LIMIT offset count]</code> 获取序集 key 中 score 值在 min 和 max 之间的元素（反序）</li>
<li><code>ZREMRANGEBYSCORE key min max</code> 移除序集 key 中 score 值在 min 和 max 之间的元素</li>
<li><code>ZREMRANGEBYRANK key start stop</code> 移除序集 key 中 score 值下标在 start 和 stop 之间的元素</li>
<li><code>ZINCRBY key increment member</code> 将序集 key 中 member 的 score 值加上增量 increment</li>
</ul>
<h3 id="Connection（连接）"><a href="#Connection（连接）" class="headerlink" title="Connection（连接）"></a>Connection（连接）</h3><ul>
<li><code>AUTH password</code> 验证密码，解锁命令</li>
<li><code>ECHO message</code> 打印 message 信息</li>
<li><code>PING</code> 用于测试与服务器的连接是否仍然生效</li>
<li><code>QUIT</code> 请求服务器关闭与当前客户端的连接</li>
<li><code>SELECT index</code> 切换到指定的数据库</li>
</ul>
<h3 id="Server（服务器）"><a href="#Server（服务器）" class="headerlink" title="Server（服务器）"></a>Server（服务器）</h3><ul>
<li><code>SHUTDOWN</code> 停止客户端</li>
<li><code>FLUSHDB</code> 清空当前数据库</li>
<li><code>FLUSHALL</code> 清空所有数据库</li>
<li><code>DBSIZE</code> 获取当前数据库 key 数量</li>
<li><code>TIME</code> 获取当前服务器时间</li>
<li><code>INFO [section]</code> 获取服务器各种信息和统计数值</li>
<li><code>CONFIG GET parameter</code> 获取服务器配置参数</li>
<li><code>CONFIG SET parameter value</code> 设置服务器配置参数，动态设置无需重启</li>
<li><code>SAVE</code> 执行同步保存操作</li>
<li><code>BGSAVE</code> 执行异步保存操作</li>
<li><code>BGREWRITEAOF</code> 执行一个 AOF文件 重写操作</li>
<li><code>SLAVEOF host port</code> 将当前服务器转变为指定服务器的从属服务器</li>
</ul>
<h3 id="Transaction（事务）"><a href="#Transaction（事务）" class="headerlink" title="Transaction（事务）"></a>Transaction（事务）</h3><ul>
<li><code>MULTI</code> 标记一个事务块的开始</li>
<li><code>EXEC</code> 执行所有事务块内的命令</li>
<li><code>DISCARD</code> 取消事务，放弃执行事务块内的所有命令</li>
<li><code>WATCH key [key ...]</code> 监视一个或多个 key ，如果在事务执行之前 key 被其他命令所改动，那么事务将被打断</li>
<li><code>UNWATCH</code> 取消 WATCH 命令对所有 key 的监视</li>
</ul>
<h2 id="Redis持久化"><a href="#Redis持久化" class="headerlink" title="Redis持久化"></a>Redis持久化</h2><h3 id="RDB（数据快照）"><a href="#RDB（数据快照）" class="headerlink" title="RDB（数据快照）"></a>RDB（数据快照）</h3><p>RDB 持久化可以在指定的时间间隔内生成数据集的时间点快照</p>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">################################ SNAPSHOTTING  ################################</span></span><br><span class="line"><span class="comment"># save &quot;&quot;             # 关闭 RDB</span></span><br><span class="line">save 900 1           <span class="comment"># 15 分钟内，至少执行了 1 次写操作</span></span><br><span class="line">save 300 10         <span class="comment"># 5 分钟内，至少执行了 10 次写操作</span></span><br><span class="line">save 60 10000     <span class="comment"># 1 分钟内，至少执行了 10000 次写操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 后台备份进程出错时，主进程是否停止写入</span></span><br><span class="line">stop-writes-on-bgsave-error <span class="built_in">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导出的 RDB 文件是否压缩</span></span><br><span class="line">rdbcompression <span class="built_in">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入 RDB 恢复时数据时，是否检验 RDB 的完整性</span></span><br><span class="line">rdbchecksum <span class="built_in">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定 RDB 文件名</span></span><br><span class="line">dbfilename dump.rdb</span><br><span class="line"></span><br><span class="line"><span class="comment"># RDB 文件存储路径</span></span><br><span class="line"><span class="built_in">dir</span> ./</span><br></pre></td></tr></table></figure>

<h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul>
<li>RDB是某一时间点的快照，是一个紧凑的单文件，更多用于数据备份。可以按每小时或每日来备份，方便从不同的版本恢复数据。</li>
<li>单文件容易传输到远程服务做故障恢复。</li>
<li>RDB可以Fork子进程进行持久化，使Redis可以更好地处理用户请求。</li>
<li>在大量数据的情况下，RDB相比较于AOF会更快的加载。</li>
</ul>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul>
<li>如果Redis不及时保存RDB文件，会造成数据的丢失。例如系统突然断电，但未来得及保存数据。即使你设置更多的Save point，也无法保证100%的数据不丢失。</li>
<li>RDB经常需要fork子进程去执行，但如果再大量数据的情况下，这个fork操作会非常耗CPU资源的。对比AOF虽然也是fork，但是它的数据保存处理是可以控制的，不需要全量保存。</li>
</ul>
<h4 id="数据快照"><a href="#数据快照" class="headerlink" title="数据快照"></a>数据快照</h4><ul>
<li><ol>
<li>Redis 调用 fork() ，同时拥有父进程和子进程。</li>
</ol>
</li>
<li><ol start="2">
<li>子进程将数据集写入到一个临时 RDB 文件中。</li>
</ol>
</li>
<li><ol start="3">
<li>当子进程完成对新 RDB 文件的写入时，Redis 用新 RDB 文件替换原来的 RDB 文件，并删除旧 RDB 文件。</li>
</ol>
</li>
</ul>
<h3 id="AOF（日志追加）"><a href="#AOF（日志追加）" class="headerlink" title="AOF（日志追加）"></a>AOF（日志追加）</h3><p>AOF 持久化记录服务器执行的所有写操作命令，并在服务器启动时，通过重新执行这些命令来还原数据集</p>
<h4 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">############################## APPEND ONLY MODE ###############################</span></span><br><span class="line"><span class="comment"># 是否开启AOF，默认关闭（no）</span></span><br><span class="line">appendonly <span class="built_in">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定 AOF 文件名</span></span><br><span class="line">appendfilename appendonly.aof</span><br><span class="line"></span><br><span class="line"><span class="comment"># Redis支持三种不同的刷写模式：</span></span><br><span class="line"><span class="comment"># appendfsync always       # 同步持久化，每次发生数据变更会被立即记录到磁盘，性能差但数据完整性比较好</span></span><br><span class="line">appendfsync everysec       <span class="comment"># 异步操作，每秒记录，如果一秒钟内宕机，有数据丢失</span></span><br><span class="line"><span class="comment"># appendfsync no             # 将缓存回写的策略交给系统，linux 默认是30秒将缓冲区的数据回写硬盘的</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 正在导出 RDB 快照的过程中，要不要停止同步 AOF</span></span><br><span class="line">no-appendfsync-on-rewrite no </span><br><span class="line"></span><br><span class="line"><span class="comment"># AOF 文件大小比起上次重写时的大小，增长率100%时，重写</span></span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line"></span><br><span class="line"><span class="comment"># AOF 文件至少超过64M时，重写</span></span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br></pre></td></tr></table></figure>

<h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><ul>
<li>AOF可以设置 完全不同步、每秒同步、每次操作同步，默认是每秒同步。因为AOF是操作指令的追加，所以可以频繁的大量的同步。</li>
<li>AOF文件是一个值追加日志的文件，即使服务宕机为写入完整的命令，也可以通过redis-check-aof工具修复这些问题。</li>
<li>如果AOF文件过大，Redis会在后台自动地重写AOF文件。重写后会使AOF文件压缩到最小所需的指令集。</li>
<li>AOF文件是有序保存数据库的所有写入操作，易读，易分析。即使如果不小心误操作数据库，也很容易找出错误指令，恢复到某个数据节点。例如不小心FLUSHALL，可以非常容易恢复到执行命令之前。</li>
</ul>
<h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><ul>
<li>相同数据量下，AOF的文件通常体积会比RDB大。因为AOF是存指令的，而RDB是所有指令的结果快照。但AOF在日志重写后会压缩一些空间。</li>
<li>在大量写入和载入的时候，AOF的效率会比RDB低。因为大量写入，AOF会执行更多的保存命令，载入的时候也需要大量的重执行命令来得到最后的结果。RDB对此更有优势。</li>
</ul>
<h4 id="日志重写"><a href="#日志重写" class="headerlink" title="日志重写"></a>日志重写</h4><ul>
<li><ol>
<li>Redis 执行 fork() ，现在同时拥有父进程和子进程。</li>
</ol>
</li>
<li><ol start="2">
<li>子进程开始将新 AOF 文件的内容写入到临时文件。</li>
</ol>
</li>
<li><ol start="3">
<li>对于所有新执行的写入命令，父进程一边将它们累积到一个内存缓存中，一边将这些改动追加到现有 AOF 文件的末尾： 这样即使在重写的中途发生停机，现有的 AOF 文件也还是安全的。</li>
</ol>
</li>
<li><ol start="4">
<li>当子进程完成重写工作时，它给父进程发送一个信号，父进程在接收到信号之后，将内存缓存中的所有数据追加到新 AOF 文件的末尾。</li>
</ol>
</li>
<li><ol start="5">
<li>Redis 原子地用新文件替换旧文件，之后所有命令都会直接追加到新 AOF 文件的末尾。</li>
</ol>
</li>
</ul>
<h3 id="RDB与AOF比较"><a href="#RDB与AOF比较" class="headerlink" title="RDB与AOF比较"></a>RDB与AOF比较</h3><table>
<thead>
<tr>
<th>&#x2F;</th>
<th>RDB</th>
<th>AOF</th>
</tr>
</thead>
<tbody><tr>
<td>启动优先级</td>
<td>低</td>
<td>高</td>
</tr>
<tr>
<td>体积</td>
<td>小</td>
<td>大</td>
</tr>
<tr>
<td>恢复速度</td>
<td>快</td>
<td>慢</td>
</tr>
<tr>
<td>数据安全性</td>
<td>丢数据</td>
<td>根据策略决定</td>
</tr>
<tr>
<td>轻重</td>
<td>重</td>
<td>轻</td>
</tr>
</tbody></table>
<h3 id="RDB与AOF选择"><a href="#RDB与AOF选择" class="headerlink" title="RDB与AOF选择"></a>RDB与AOF选择</h3><ul>
<li>一般来说，不考虑硬盘大小，最安全的做法是RDB与AOF同时使用，即使AOF损坏无法修复，还可以用RDB来恢复数据。</li>
<li>如果Redis的数据在你的服务中并不是必要的数据，例如只是当简单的缓存，没有缓存也不会造成缓存雪崩。说明数据的安全可靠性并不是首要考虑范围内，那么单独只使用RDB就可以了。</li>
<li>不推荐单独使用AOF，因为AOF对于数据的恢复载入来说，比RDB慢。并且Redis官方也说明了，AOF有一个罕见的bug。出了问题无法很好的解决。所以使用AOF的时候，最好还是有RDB作为数据备份。</li>
</ul>
<h2 id="Redis事务"><a href="#Redis事务" class="headerlink" title="Redis事务"></a>Redis事务</h2><h3 id="三阶段"><a href="#三阶段" class="headerlink" title="三阶段"></a>三阶段</h3><ul>
<li><code>开启</code> 以 MULTI 开始一个事务</li>
<li><code>入队</code> 将多个命令入队到事务中，接到这些命令并不会立即执行，而是放到等待执行的事务队列里面</li>
<li><code>执行</code> 由 EXEC 命令触发事务</li>
</ul>
<h3 id="三特性"><a href="#三特性" class="headerlink" title="三特性"></a>三特性</h3><ul>
<li><code>单独的隔离操作</code> 事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</li>
<li><code>没有隔离级别的概念</code> 队列中的命令没有提交之前都不会实际的被执行，因为事务提交前任何指令都不会被实际执行，也就不存在 ”事务内的查询要看到事务里的更新，在事务外查询不能看到” 这个问题。</li>
<li><code>不保证原子性</code> 同一个事务中如果有一条命令执行失败，其后的命令仍然会被执行，没有回滚。</li>
</ul>
<h3 id="正常执行"><a href="#正常执行" class="headerlink" title="正常执行"></a>正常执行</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; MULTI</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; SET k1 v1</span><br><span class="line">QUEUED</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; SET k2 v2</span><br><span class="line">QUEUED</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; GET k2</span><br><span class="line">QUEUED</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; EXEC</span><br><span class="line">1) OK</span><br><span class="line">2) OK</span><br><span class="line">3) <span class="string">&quot;v2&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="放弃事务"><a href="#放弃事务" class="headerlink" title="放弃事务"></a>放弃事务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; MULTI</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; SET k1 v11</span><br><span class="line">QUEUED</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; DISCARD</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; GET k1</span><br><span class="line"><span class="string">&quot;v1&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="事务中的错误"><a href="#事务中的错误" class="headerlink" title="事务中的错误"></a>事务中的错误</h3><h4 id="语法错误"><a href="#语法错误" class="headerlink" title="语法错误"></a>语法错误</h4><p>提交事务前出现错误，则全都不执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; MULTI</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; SET k3 v3</span><br><span class="line">QUEUED</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; SET k4</span><br><span class="line">(error) ERR wrong number of arguments <span class="keyword">for</span> <span class="string">&#x27;set&#x27;</span> <span class="built_in">command</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; EXEC</span><br><span class="line">(error) EXECABORT Transaction discarded because of previous errors.</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; GET k3</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure>
<h4 id="运行错误"><a href="#运行错误" class="headerlink" title="运行错误"></a>运行错误</h4><p>提交事务后出现错误，则部分执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; MULTI</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; SET k3 v3</span><br><span class="line">QUEUED</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; INCR k1</span><br><span class="line">QUEUED</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; EXEC</span><br><span class="line">1) OK</span><br><span class="line">2) (error) ERR value is not an <span class="built_in">integer</span> or out of range</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; GET k3</span><br><span class="line"><span class="string">&quot;v3&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="Watch监控"><a href="#Watch监控" class="headerlink" title="Watch监控"></a>Watch监控</h3><p>实现 INCR 函数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 监视 key ，如果在事务执行之前 key 被其他命令所改动，那么事务将被打断</span></span><br><span class="line">WATCH mykey</span><br><span class="line"></span><br><span class="line">val = GET mykey</span><br><span class="line">val = val + 1</span><br><span class="line"></span><br><span class="line">MULTI</span><br><span class="line">SET mykey <span class="variable">$val</span></span><br><span class="line">EXEC</span><br></pre></td></tr></table></figure>

<!-- ## Redis复制
- 主从复制，主机数据更新后根据配置和策略，自动同步到备机的master/slaver机制，Master以写为主，Slave以读为主。

### 建立复制
- <span>1. </span>在 `redis.conf` 文件中配置 `slaveof <masterip> <masterport>` 然后指定该配置文件启动Redis生效。
- <span>2. </span>在 `redis-server` 启动命令后加上 `--slaveof <masterip> <masterport>` 启动生效。
- <span>3. </span>直接使用 `slaveof <masterip> <masterport>` 命令在从节点执行生效。

### 复制原理
- Slave 启动成功连接到 Master 后会发送一个 sync 命令
- Master 接到命令启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令，在后台进程执行完毕之后，Master 将传送整个数据文件到 Slave，以完成一次完全同步

https://ningg.top/redis-lesson-8-redis-master-slave/
【一主二从】
实时动态复制
读写分离
主挂，从不断开连接，不反客为主
从挂，则断开连接，可redis.conf配置SLAVEOF，重启后还是连接

【薪火相传】
主-从-从

【反客为主】
主挂，从1SLAVEOF NO ONE，从2还是连接主，但数据原由是从1 -->

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://redis.io/commands">Redis 官网命令</a></li>
<li><a href="http://doc.redisfans.com/">Redis 命令参考</a></li>
<li><a href="http://redisdoc.com/">Redis 命令参考</a></li>
</ul>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring：AOP</title>
    <url>/Spring/Spring%EF%BC%9AAOP/</url>
    <content><![CDATA[<h2 id="AOP简介"><a href="#AOP简介" class="headerlink" title="AOP简介"></a>AOP简介</h2><ul>
<li><code>AOP(Aspect Oriented Programming)</code> 面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP（面向对象编程）的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的<code>耦合度降低</code>，提高程序的<code>可重用性</code>，同时提高了开发的效率。</li>
<li>AOP采取<code>横向抽取</code>机制，取代了传统<code>纵向继承</code>体系重复性代码。</li>
</ul>
<span id="more"></span>

<h2 id="AOP概念"><a href="#AOP概念" class="headerlink" title="AOP概念"></a>AOP概念</h2><h3 id="AOP术语"><a href="#AOP术语" class="headerlink" title="AOP术语"></a>AOP术语</h3><ul>
<li><code>Target</code> 目标类，代理的目标对象。</li>
<li><code>Joinpoint</code> 连接点，指那些可能被拦截到的点。</li>
<li><code>Pointcut</code> 切入点，已经被增强的连接点。</li>
<li><code>Advice</code> 通知&#x2F;增强，增强的代码。</li>
<li><code>Proxy</code> 代理类，一个类被AOP织入增强后，就产生一个结果代理类。</li>
<li><code>Weave</code> 织入，指把增强Advice应用到目标对象Target来创建新的代理对象Proxy的过程。</li>
<li><code>Aspect</code> 切面，是切入点Pointcut和通知Advice的结合。一个线是一个特殊的面。一个切入点和一个通知，组成一个特殊的面。</li>
</ul>
<p><img src="/Spring/Spring%EF%BC%9AAOP/AOP.png" alt="AOP"></p>
<h3 id="通知类型"><a href="#通知类型" class="headerlink" title="通知类型"></a>通知类型</h3><ul>
<li><p><code>Before</code> 前置通知，在目标类的方法执行之前执行</p>
</li>
<li><p><code>After</code> 后置通知，在目标类的方法执行之后执行</p>
</li>
<li><p><code>AfterReturning</code> 返回通知，在正常执行后通知</p>
</li>
<li><p><code>AfterThrowing</code> 异常通知，在抛出异常后通知</p>
</li>
<li><p><code>Around</code> 环绕通知，在目标类的方法执行之前和之后执行</p>
</li>
<li><p><strong>正常执行：</strong>前置通知 -&gt; 目标方法 -&gt; 后置通知 -&gt; 返回通知</p>
</li>
<li><p><strong>异常执行：</strong>前置通知 -&gt; 目标方法 -&gt; 后置通知 -&gt; 异常通知</p>
</li>
</ul>
<h2 id="AOP切入点表达式"><a href="#AOP切入点表达式" class="headerlink" title="AOP切入点表达式"></a>AOP切入点表达式</h2><ul>
<li>语法：<code>execution(修饰符 返回值 包.类.方法名(参数) throws 异常)</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修饰符，[可省略]</span><br><span class="line">    <span class="keyword">public</span>                             # 公共方法</span><br><span class="line">    *                                  # 任意</span><br><span class="line">    </span><br><span class="line">返回值，[不能省略]</span><br><span class="line">    <span class="keyword">void</span>                               # 返回没有值</span><br><span class="line">    String                             # 返回值字符串</span><br><span class="line">    *                                  # 任意</span><br><span class="line">    </span><br><span class="line">包，[可省略]</span><br><span class="line">    com.example.demo                   # 固定包</span><br><span class="line">    com.example.demo.*.service         # demo包下面子包任意 （例如：com.example.demo.user.service）</span><br><span class="line">    com.example.demo..                 # demo包下面的所有子包（含自己）</span><br><span class="line">    com.example.demo.*.service..       # demo包下面任意子包，固定目录service，service目录任意包</span><br><span class="line">	</span><br><span class="line">类，[可省略]</span><br><span class="line">    UserServiceImpl                    # 指定类</span><br><span class="line">    *Impl                              # 以Impl结尾</span><br><span class="line">    User*                              # 以User开头</span><br><span class="line">    *                                  #  任意</span><br><span class="line">	</span><br><span class="line">方法名，[不能省略]</span><br><span class="line">    addUser                            # 固定方法</span><br><span class="line">    add*                               # 以add开头</span><br><span class="line">    *Do                                # 以Do结尾</span><br><span class="line">    *                                  # 任意</span><br><span class="line">	</span><br><span class="line">(参数)，[不能省略]</span><br><span class="line">    ()                                 # 无参</span><br><span class="line">    (<span class="type">int</span>)                              # 一个整型</span><br><span class="line">    (<span class="type">int</span> ,<span class="type">int</span>)                         # 两个</span><br><span class="line">    (..)                               # 参数任意</span><br><span class="line">	</span><br><span class="line"><span class="keyword">throws</span>，[可省略]</span><br></pre></td></tr></table></figure>

<h2 id="AOP示例"><a href="#AOP示例" class="headerlink" title="AOP示例"></a>AOP示例</h2><ul>
<li><p>TargetObject.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TargetObject</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;目标方法...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>MyAspect.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(public void com.example.demo.aop.TargetObject.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointCut</span><span class="params">()</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(value = &quot;pointCut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置通知....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(value = &quot;pointCut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;后置通知....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(value = &quot;pointCut()&quot;, returning = &quot;result&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">(JoinPoint joinPoint, Object result)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;返回通知....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing(value = &quot;pointCut()&quot;, throwing = &quot;exception&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">(JoinPoint joinPoint, Exception exception)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;异常通知....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@Around(value = &quot;pointCut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;前置通知....&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 执行目标方法</span></span><br><span class="line">            proceedingJoinPoint.proceed();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;后置通知....&quot;</span>);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;返回通知....&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;异常通知....&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>SpringConfig.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> TargetObject <span class="title function_">targetObject</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TargetObject</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MyAspect <span class="title function_">myAspect</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyAspect</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Test.java</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">    <span class="type">TargetObject</span> <span class="variable">targetObject</span> <span class="operator">=</span> applicationContext.getBean(TargetObject.class);</span><br><span class="line">    targetObject.print();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 运行结果：</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">前置通知....</span><br><span class="line">目标方法...</span><br><span class="line">后置通知....</span><br><span class="line">返回通知....</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="AOP实现"><a href="#AOP实现" class="headerlink" title="AOP实现"></a>AOP实现</h2><ul>
<li>接口 + 实现类：Spring 采用 JDK动态代理</li>
<li>实现类：Spring 采用 CGLIB字节码增强</li>
</ul>
<h3 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h3><ul>
<li><p>UserService.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">addUser</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">updateUser</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">deleteUser</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>UserServiceImpl.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addUser</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;添加用户...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateUser</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;修改用户...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteUser</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;删除用户...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>MyAspect.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开启事务...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;提交事务...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>MyBeanFactory.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeanFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> UserService <span class="title function_">createService</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 目标类</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserServiceImpl</span>();</span><br><span class="line">        <span class="comment">// 切面类</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">MyAspect</span> <span class="variable">myAspect</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyAspect</span>();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 代理类：将目标类（切入点）和 切面类（通知） 结合 --&gt; 切面</span></span><br><span class="line"><span class="comment">         * Proxy.newProxyInstance</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> loader 类加载器</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> interfaces 代理类需要实现的所有接口（不包含父类接口）</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> invocationHandler 处理类实现</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">UserService</span> <span class="variable">proxService</span> <span class="operator">=</span> (UserService) Proxy.newProxyInstance(</span><br><span class="line">                MyBeanFactory.class.getClassLoader(),</span><br><span class="line">                userService.getClass().getInterfaces(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * 代理类的每一个方法执行时，都将调用一次invoke</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@param</span> proxy 代理对象</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@param</span> method 执行的方法</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@param</span> args 方法参数</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                        myAspect.before();</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 执行目标类的方法</span></span><br><span class="line">                        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> method.invoke(userService, args);</span><br><span class="line"></span><br><span class="line">                        myAspect.after();</span><br><span class="line">                        <span class="keyword">return</span> obj;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        <span class="keyword">return</span> proxService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="CGLIB字节码增强"><a href="#CGLIB字节码增强" class="headerlink" title="CGLIB字节码增强"></a>CGLIB字节码增强</h3><ul>
<li>UserService.java<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addUser</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;添加用户...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateUser</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;修改用户...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteUser</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;删除用户...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>MyAspect.java<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开启事务...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;提交事务...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>MyBeanFactory.java<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeanFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> UserService <span class="title function_">createService</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 目标类</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserService</span>();</span><br><span class="line">        <span class="comment">// 切面类</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">MyAspect</span> <span class="variable">myAspect</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyAspect</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 代理类，采用cglib，底层创建目标类的子类</span></span><br><span class="line">        <span class="comment">// 核心类</span></span><br><span class="line">        <span class="type">Enhancer</span> <span class="variable">enhancer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Enhancer</span>();</span><br><span class="line">        <span class="comment">// 确定父类</span></span><br><span class="line">        enhancer.setSuperclass(userService.getClass());</span><br><span class="line">        <span class="comment">// 设置回调函数</span></span><br><span class="line">        enhancer.setCallback(<span class="keyword">new</span> <span class="title class_">MethodInterceptor</span>()&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> proxy 代理对象</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> method 执行的方法</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> args 方法参数</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> methodProxy 方法的代理</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">             * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Object proxy, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"></span><br><span class="line">                myAspect.before();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 执行目标类的方法</span></span><br><span class="line">                <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> method.invoke(userService, args);</span><br><span class="line">                <span class="comment">// 执行代理类的父类，执行目标类（目标类和代理类 父子关系）</span></span><br><span class="line">                <span class="comment">//methodProxy.invokeSuper(proxy, args);</span></span><br><span class="line"></span><br><span class="line">                myAspect.after();</span><br><span class="line">                <span class="keyword">return</span> obj;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 创建代理</span></span><br><span class="line">        <span class="type">UserService</span> <span class="variable">proxService</span> <span class="operator">=</span> (UserService) enhancer.create();</span><br><span class="line">        <span class="keyword">return</span> proxService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring：常用注解汇总</title>
    <url>/Spring/Spring%EF%BC%9A%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<h2 id="Bean相关"><a href="#Bean相关" class="headerlink" title="Bean相关"></a>Bean相关</h2><ul>
<li><code>@Bean</code> 声明当前方法的返回值为一个Bean</li>
<li><code>@Scope</code> 用于指定作用域</li>
<li><code>@Lazy</code> 表示延迟初始化</li>
<li><code>@Primary</code> 自动装配时当出现多个Bean候选者时，被注解为@Primary的Bean将作为首选者</li>
</ul>
<span id="more"></span>

<h3 id="声明Bean注解"><a href="#声明Bean注解" class="headerlink" title="声明Bean注解"></a>声明Bean注解</h3><ul>
<li><code>@Component</code> 组件，没有明确的角色 </li>
<li><code>@Controller</code> 应用在MVC层（控制层）</li>
<li><code>@Service</code> 应用在Service层（业务逻辑层）</li>
<li><code>@Repository</code> 应用在Dao层（数据访问层）</li>
</ul>
<h3 id="注入Bean注解"><a href="#注入Bean注解" class="headerlink" title="注入Bean注解"></a>注入Bean注解</h3><ul>
<li><code>@Autowired</code> 由Spring提供，根据类型进行自动装配，如果组合@Qualifier使用将按名称进行装配</li>
<li><code>@Resource</code> 由JSR-250提供，根据名称进行自动装配，使用需导入javax.annotation包</li>
<li><code>@Inject</code> 由JSR-330提供，根据类型进行自动装配，如需按名称进行装配则需配合@Named使用，使用需导入javax.inject.Inject包</li>
</ul>
<h3 id="Bean的初始化和销毁注解"><a href="#Bean的初始化和销毁注解" class="headerlink" title="Bean的初始化和销毁注解"></a>Bean的初始化和销毁注解</h3><ul>
<li><code>@PostConstruct</code> 用于指定初始化方法，在构造函数执行后执行</li>
<li><code>@PreDestroy</code> 用于指定销毁方法，在Bean销毁之前执行</li>
</ul>
<h2 id="配置相关"><a href="#配置相关" class="headerlink" title="配置相关"></a>配置相关</h2><ul>
<li><code>@Order</code> 调整配置类加载顺序，值越小优先级越高</li>
<li><code>@Configuration</code> 声明当前类是一个配置类，相当于Spring的xml配置文件</li>
<li><code>@ConfigurationProperties</code> 将Properties属性与一个Bean及其属性相关联</li>
<li><code>@ComponentScan</code> 扫描该类所在的包下所有的声明类</li>
</ul>
<h3 id="注入注解"><a href="#注入注解" class="headerlink" title="注入注解"></a>注入注解</h3><ul>
<li><code>@Value</code> 值注入，普通字符，SpEl表达式，配置文件属性值等</li>
<li><code>@PropertySource</code> 加载Properties配置文件</li>
<li><code>@ImportResource</code> 导入Xml配置文件</li>
<li><code>@Import</code> 导入Bean到Spring容器</li>
</ul>
<h3 id="条件注解"><a href="#条件注解" class="headerlink" title="条件注解"></a>条件注解</h3><ul>
<li><code>@ConditionalOnBean</code>     Spring容器中是否存在对应的实例</li>
<li><code>@ConditionalOnMissingBean</code>     Spring容器中是否不存在对应的实例</li>
<li><code>@ConditionalOnClass</code> 类加载器中是否存在对应的类</li>
<li><code>@ConditionalOnMissingClass</code> 类加载器中是否不存在对应的类</li>
<li><code>@ConditionalOnExpression</code> 判断 SpEL 表达式是否成立</li>
<li><code>@ConditionalOnJava</code> 指定Java版本是否符合要求</li>
<li><code>@ConditionalOnJndi</code> 在JNDI存在的条件下查找指定的位置</li>
<li><code>@ConditionalOnSingleCandidate</code> Spring容器中是否存在且只存在一个对应的实例</li>
<li><code>@ConditionalOnProperty</code> 应用环境中的属性是否存在</li>
<li><code>@ConditionalOnResource</code> 是否存在指定的资源文件</li>
<li><code>@ConditionalOnWebApplication</code> 应用程序是否是Web程序</li>
<li><code>@ConditionalOnNotWebApplication</code> 应用程序是否非Web程序</li>
<li><code>@Profile</code> 指定组件在哪个环境的情况下才能被注册到容器中</li>
<li><code>@DependsOn</code> 控制Bean加载顺序，A 间接依赖 B，B未准备好，A无法访问</li>
</ul>
<h2 id="功能相关"><a href="#功能相关" class="headerlink" title="功能相关"></a>功能相关</h2><h3 id="AOP注解"><a href="#AOP注解" class="headerlink" title="AOP注解"></a>AOP注解</h3><ul>
<li><code>@EnableAspectJAutoProxy</code> 开启对AspectJ自动代理的支持</li>
<li><code>@Aspect</code>     声明该类是一个切面Bean</li>
<li><code>@Before</code>     前置通知，在目标类的方法执行之前执行</li>
<li><code>@After</code>     后置通知，在目标类的方法执行之后执行</li>
<li><code>@AfterReturning</code>     返回通知，在正常执行后通知</li>
<li><code>@AfterThrowing</code>    异常通知，在抛出异常后通知</li>
<li><code>@Around</code>     环绕通知，在目标类的方法执行之前和之后执行</li>
<li><code>@Pointcut</code> 切入点，用于定义通知类型，切面类的方法和切入点的表达式</li>
</ul>
<h3 id="事务注解"><a href="#事务注解" class="headerlink" title="事务注解"></a>事务注解</h3><ul>
<li><code>@EnableTransactionManagement</code> 开启注解式事务的支持</li>
<li><code>@Transactional</code> 用于声明事务</li>
</ul>
<h3 id="缓存注解"><a href="#缓存注解" class="headerlink" title="缓存注解"></a>缓存注解</h3><ul>
<li><code>@EnableCaching</code> 开启注解式的缓存支持</li>
<li><code>@CacheConfig</code> 用于配置该类中会用到的一些共用的缓存配置</li>
<li><code>@Cacheable</code> 用于方法的返回值将被加入缓存。在查询时，会先从缓存中获取，若不存在才对数据库访问</li>
<li><code>@CachePut</code> 用于数据新增和修改操作</li>
<li><code>@CacheEvict</code> 用于删除操作，用来从缓存中移除相应数据</li>
</ul>
<h3 id="异步注解"><a href="#异步注解" class="headerlink" title="异步注解"></a>异步注解</h3><ul>
<li><code>@EnableAsync</code> 开启对异步任务的支持</li>
<li><code>@Async</code> 声明这是一个异步任务</li>
</ul>
<h3 id="定时任务注解"><a href="#定时任务注解" class="headerlink" title="定时任务注解"></a>定时任务注解</h3><ul>
<li><code>@EnableScheduling</code> 开启对定时任务的支持</li>
<li><code>@Scheduled</code> 声明这是一个定时任务。包含：cron 、fixDelay、fixRate等类型</li>
</ul>
<h2 id="测试相关"><a href="#测试相关" class="headerlink" title="测试相关"></a>测试相关</h2><ul>
<li><code>@RunWith</code> Spring中通常用于对JUnit的支持</li>
<li><code>@ContextConfiguration</code> 用于加载配置ApplicationContext</li>
</ul>
<h2 id="Enable-相关"><a href="#Enable-相关" class="headerlink" title="Enable*相关"></a>Enable*相关</h2><ul>
<li><code>@EnableAspectJAutoProxy</code> 开启对AspectJ自动代理的支持</li>
<li><code>@EnableAsync</code> 开启对异步任务的支持</li>
<li><code>@EnableScheduling</code> 开启对定时任务的支持</li>
<li><code>@EnableWebMvc</code> 开启Web MVC的配置支持</li>
<li><code>@EnableConfigurationProperties</code> 开启对@ConfigurationProperties注解配置Bean的支持</li>
<li><code>@EnableJpaRepositories</code> 开启对SpringData JPA Repository的支持</li>
<li><code>@EnableTransactionManagement</code> 开启注解式事务的支持</li>
<li><code>@EnableCaching</code> 开启注解式的缓存支持</li>
</ul>
<h2 id="SpringMVC相关"><a href="#SpringMVC相关" class="headerlink" title="SpringMVC相关"></a>SpringMVC相关</h2><h3 id="请求映射注解"><a href="#请求映射注解" class="headerlink" title="请求映射注解"></a>请求映射注解</h3><ul>
<li><code>@RequestMapping</code> 用于映射 Http 请求，包括访问路径和参数</li>
<li><code>@GetMapping</code> 用于映射 Http 请求的 Get 方法，获取信息</li>
<li><code>@PostMapping</code> 用于映射 Http 请求的 Post 方法，保存信息</li>
<li><code>@PutMapping</code> 用于映射 Http 请求的 Put 方法，更新信息</li>
<li><code>@DeleteMapping</code> 用于映射 Http 请求的 Delete 方法，删除信息</li>
<li><code>@PatchMapping</code> 用于映射 Http 请求的 Patch 方法，更新部分信息</li>
<li><code>@RestController</code> 组合注解，@ResponseBody + @Controller</li>
</ul>
<h3 id="请求参数注解"><a href="#请求参数注解" class="headerlink" title="请求参数注解"></a>请求参数注解</h3><ul>
<li><code>@PathVariable</code> 用于获取请求路径中的变量</li>
<li><code>@RequestParam</code> 用于获取请求参数</li>
<li><code>@RequestHeader</code> 用于获取请求头的信息</li>
<li><code>@CookieValue</code> 用于获取客户端的Cookie中的信息</li>
<li><code>@SessionAttribute</code> 用于获取服务端的Session中的信息</li>
<li><code>@RequestPart</code> 用于获取文件之类的Multipart信息</li>
<li><code>@RequestAttribute</code> 用于将请求中的属性(request attributes，是服务器放入的属性值)绑定到方法参数</li>
<li><code>@RequestBody</code> 用于获取请求中的Body部分数据</li>
<li><code>@ResponseBody</code> 用于将返回值放在Response内，而不是一个页面</li>
<li><code>@InitBinder</code> 用于设置WebDataBinder，WebDataBinder用来自动绑定前台请求参数到Model中</li>
<li><code>@SessionAttributes</code> 用于绑定HttpSession中的attribute对象的值，便于在方法中的参数里使用</li>
<li><code>@ModelAttribute</code> 本来的作用是绑定键值对到Model里，在@ControllerAdvice中是让全局的@RequestMapping都能获得在此处设置的键值对</li>
</ul>
<h3 id="跨域请求注解"><a href="#跨域请求注解" class="headerlink" title="跨域请求注解"></a>跨域请求注解</h3><ul>
<li><code>@CrossOrigin</code> 用于在Class和Method上支持跨域请求</li>
</ul>
<h3 id="全局处理注解"><a href="#全局处理注解" class="headerlink" title="全局处理注解"></a>全局处理注解</h3><ul>
<li><code>@ExceptionHandler</code> 用于全局处理控制器里的异常</li>
<li><code>@ControllerAdvice</code> 声明一个类来统一对所有@RequestMapping方法来做@ExceptionHandler、@InitBinder以及@ModelAttribute处理</li>
<li><code>@RestControllerAdvice</code> 组合注解，@ResponseBody + @ControllerAdvice</li>
<li><code>@ResponseStatus</code> 用于方法或者异常类返回的Http状态码</li>
</ul>
<h2 id="SpringJpa相关"><a href="#SpringJpa相关" class="headerlink" title="SpringJpa相关"></a>SpringJpa相关</h2><ul>
<li><code>@Entity</code> 用于映射到数据库表</li>
<li><code>@Table</code> 用于实体类映射的数据库表名</li>
<li><code>@Id</code> 用于标注为数据库表的主键列</li>
<li><code>@GeneratedValue</code> 用于标注主键的生成策略。通过 strategy 属性指定</li>
<li><code>@Column</code> 用于实体属性与数据库表的列不同名时需要使用</li>
<li><code>@Basic</code> 默认 Entity 类的属性的默认注解</li>
<li><code>@Transient</code> 用于忽略该属性，不映射数据库表字段</li>
<li><code>@Temporal</code> 用于定义 Date 类型的精度</li>
</ul>
<h2 id="SpringBoot相关"><a href="#SpringBoot相关" class="headerlink" title="SpringBoot相关"></a>SpringBoot相关</h2><ul>
<li><code>@SpringBootApplication</code> SpringBoot的核心注解，主要作用是开启自动配置</li>
<li><code>@EnableAutoConfiguration</code> 自动载入应用程序所需的所有Bean</li>
<li><code>@AutoConfigureAfter</code> 在指定的自动配置类之后再配置</li>
</ul>
<h2 id="Lombok相关"><a href="#Lombok相关" class="headerlink" title="Lombok相关"></a>Lombok相关</h2><ul>
<li><code>@Setter</code> 为属性提供 set 方法</li>
<li><code>@Getter</code> 为属性提供 get 方法</li>
<li><code>@NoArgsConstructor</code> 为类提供一个无参的构造方法</li>
<li><code>@AllArgsConstructor</code> 为类提供一个全参的构造方法</li>
<li><code>@Accessors</code> 为配置 get 和 set 方法的生成结果</li>
<li><code>@Data</code> 为类提供所有属性的 get 和 set 方法，此外还提供了equals、canEqual、hashCode、toString方法</li>
<li><code>@Log4j</code> 为类提供一个属性名为log 的 log4j 日志对象</li>
<li><code>@Slf4j</code> 为类提供一个属性名为log 的 Slf4j 日志对象</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://www.oschina.net/uploads/doc/annotations/spring.html">Spring Project Annotations</a></li>
</ul>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring：生命周期</title>
    <url>/Spring/Spring%EF%BC%9A%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    <content><![CDATA[<h2 id="生命周期流程"><a href="#生命周期流程" class="headerlink" title="生命周期流程"></a>生命周期流程</h2><p><img src="/Spring/Spring%EF%BC%9A%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/Bean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt="Bean生命周期"></p>
<ul>
<li><ol>
<li>Spring容器根据实例化策略略对Bean进行实例化。</li>
</ol>
</li>
<li><ol start="2">
<li>实例化完成后，如果该bean设置了一些属性的话，则利用set方法设置一些属性。</li>
</ol>
</li>
<li><ol start="3">
<li>如果该Bean实现了<code>BeanNameAware</code>接口，则调用<code>setBeanName()</code>方法。</li>
</ol>
</li>
<li><ol start="4">
<li>如果该Bean实现了<code>BeanFactoryAware</code>接口，则调用<code>setBeanFactory()</code>方法。</li>
</ol>
</li>
<li><ol start="5">
<li>如果该Bean实现了<code>ApplicationContextAware</code>接口，则调用<code>setApplicationContext()</code>方法。</li>
</ol>
</li>
<li><ol start="6">
<li>如果该容器注册了<code>BeanPostProcessor</code>，则会调用<code>postProcessBeforeInitialization()</code>方法完成Bean的前置处理。</li>
</ol>
</li>
<li><ol start="7">
<li>如果该Bean实现了<code>InitializingBean</code>接口，则调用<code>afterPropertiesSet()</code>方法。</li>
</ol>
</li>
<li><ol start="8">
<li>如果该Bean配置了<code>init-method</code>方法，则调用<code>init-method</code>指定的方法。</li>
</ol>
</li>
<li><ol start="9">
<li>初始化完成后，如果该容器注册了<code>BeanPostProcessor</code>则会调用<code>postProcessAfterInitialization()</code>方法完成Bean的后置处理。</li>
</ol>
</li>
<li><ol start="10">
<li>对象完成初始化，开始方法调用。</li>
</ol>
</li>
<li><ol start="11">
<li>在容器进行关闭之前，如果该Bean实现了<code>DisposableBean</code>接口，则调用<code>destroy()</code>方法。</li>
</ol>
</li>
<li><ol start="12">
<li>在容器进行关闭之前，如果该Bean配置了<code>destroy-mehod</code>，则调用<code>destroy-method</code>指定的方法。</li>
</ol>
</li>
</ul>
<span id="more"></span>

<h2 id="初始化、销毁3种方式"><a href="#初始化、销毁3种方式" class="headerlink" title="初始化、销毁3种方式"></a>初始化、销毁3种方式</h2><h3 id="init-method、destroy-method方法"><a href="#init-method、destroy-method方法" class="headerlink" title="init-method、destroy-method方法"></a>init-method、destroy-method方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.example.entity.LifeCycleBean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(initMethod = &quot;initMethod&quot;, destroyMethod = &quot;destroyMethod&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> LifeCycleBean <span class="title function_">lifeCycleBean</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LifeCycleBean</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LifeCycleBean</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init-method...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroyMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;destroy-method...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="InitializingBean、DisposableBean接口"><a href="#InitializingBean、DisposableBean接口" class="headerlink" title="InitializingBean、DisposableBean接口"></a>InitializingBean、DisposableBean接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.DisposableBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.InitializingBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LifeCycleBean</span> <span class="keyword">implements</span> <span class="title class_">InitializingBean</span>, DisposableBean &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;InitializingBean afterPropertiesSet...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;DisposableBean destroy...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="PostConstruct、-PreDestroy注解"><a href="#PostConstruct、-PreDestroy注解" class="headerlink" title="@PostConstruct、@PreDestroy注解"></a>@PostConstruct、@PreDestroy注解</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.PreDestroy;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LifeCycleBean</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postConstruct</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;postConstruct...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">preDestroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;preDestroy...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="BeanPostProcessor后置处理器"><a href="#BeanPostProcessor后置处理器" class="headerlink" title="BeanPostProcessor后置处理器"></a>BeanPostProcessor后置处理器</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.BeanPostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanPostProcessor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;BeanPostProcessor postProcessBeforeInitialization...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;BeanPostProcessor postProcessAfterInitialization...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="完整示例"><a href="#完整示例" class="headerlink" title="完整示例"></a>完整示例</h2><ul>
<li><p>LifeCycleBean.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContextAware;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.PreDestroy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LifeCycleBean</span> <span class="keyword">implements</span> <span class="title class_">BeanNameAware</span>, BeanFactoryAware, ApplicationContextAware,</span><br><span class="line">        InitializingBean, DisposableBean &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;属性注入...&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LifeCycleBean</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造函数调用...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法调用...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBeanName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;BeanNameAware 被调用...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBeanFactory</span><span class="params">(BeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;BeanFactoryAware 被调用...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ApplicationContextAware 被调用...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postConstruct</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;PostConstruct 被调用...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">preDestroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;PreDestroy 被调用...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;InitializingBean afterPropertiesSet 被调用...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;DisposableBean destroy 被调用...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init-method 被调用...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroyMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;destroy-method 被调用...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>MyBeanPostProcessor.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.example.entity.LifeCycleBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.BeanPostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanPostProcessor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> LifeCycleBean) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;BeanPostProcessor postProcessBeforeInitialization 被调用...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> LifeCycleBean) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;BeanPostProcessor postProcessAfterInitialization 被调用...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>SpringConfig.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.example.entity.LifeCycleBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(value = &quot;com.example&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(initMethod = &quot;initMethod&quot;, destroyMethod = &quot;destroyMethod&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> LifeCycleBean <span class="title function_">lifeCycleBean</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">LifeCycleBean</span> <span class="variable">lifeCycleBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LifeCycleBean</span>();</span><br><span class="line">        lifeCycleBean.setId(<span class="string">&quot;1001&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> lifeCycleBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Test.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line"></span><br><span class="line">    <span class="type">LifeCycleBean</span> <span class="variable">lifeCycleBean</span> <span class="operator">=</span> applicationContext.getBean(LifeCycleBean.class);</span><br><span class="line">    lifeCycleBean.display();</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;方法调用完成，容器开始关闭...&quot;</span>);</span><br><span class="line"></span><br><span class="line">    applicationContext.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>运行结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">构造函数调用...</span><br><span class="line">属性注入...</span><br><span class="line">BeanNameAware 被调用...</span><br><span class="line">BeanFactoryAware 被调用...</span><br><span class="line">ApplicationContextAware 被调用...</span><br><span class="line">BeanPostProcessor postProcessBeforeInitialization 被调用...</span><br><span class="line">PostConstruct 被调用...</span><br><span class="line">InitializingBean afterPropertiesSet 被调用...</span><br><span class="line">init-method 被调用...</span><br><span class="line">BeanPostProcessor postProcessAfterInitialization 被调用...</span><br><span class="line">方法调用...</span><br><span class="line">方法调用完成，容器开始关闭...</span><br><span class="line">PreDestroy 被调用...</span><br><span class="line">DisposableBean destroy 被调用...</span><br><span class="line">destroy-method 被调用...</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring：组件注册</title>
    <url>/Spring/Spring%EF%BC%9A%E7%BB%84%E4%BB%B6%E6%B3%A8%E5%86%8C/</url>
    <content><![CDATA[<h2 id="Bean"><a href="#Bean" class="headerlink" title="@Bean"></a>@Bean</h2><h3 id="Scope作用域"><a href="#Scope作用域" class="headerlink" title="@Scope作用域"></a>@Scope作用域</h3><ul>
<li><code>singleton</code> 单实例(默认)。IOC容器启动会调用方法创建对象放到容器中，每次获取直接从容器中获取</li>
<li><code>prototype</code> 多实例。IOC容器启动不会调用方法创建对象放在容器中，每次获取时才会调用方法创建对象</li>
<li><code>request</code> 同一次请求创建一个实例</li>
<li><code>session</code> 同一个session创建一个实例</li>
</ul>
<span id="more"></span>

<h3 id="Lazy懒加载"><a href="#Lazy懒加载" class="headerlink" title="@Lazy懒加载"></a>@Lazy懒加载</h3><ul>
<li><code>懒加载</code> 单实例Bean情况下，容器启动时不创建对象。第一次获取Bean时才创建对象并初始化</li>
</ul>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ul>
<li>SpringConfig.java<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>  <span class="comment">// 表示该类是配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Lazy</span></span><br><span class="line">    <span class="comment">//@Scope(&quot;prototype&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">user</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul>
<li><code>@ComponentScan</code> 指定包路径扫描，把**@Controller<strong>、</strong>@Service<strong>、</strong>@Repository<strong>、</strong>@Component**标注的类，实例化到spring容器中</li>
<li><code>@Filter</code> 是**@ComponentScan**注解类中的子注解(内部注解)，可以指定一些过滤规则</li>
<li><code>@ComponentScans</code> 是**@ComponentScan<strong>注解的集合，里面可以指定多个</strong>@ComponentScan**注解，扫描多个包路径</li>
</ul>
<h3 id="重要属性"><a href="#重要属性" class="headerlink" title="重要属性"></a>重要属性</h3><ul>
<li><code>value</code> 指定要扫描的包</li>
<li><code>excludeFilters</code> 指定扫描时按什么规则排除那些组件</li>
<li><code>includeFilters</code> 指定扫描时按什么规则只需要包含那些组件</li>
<li><code>useDefaultFilters</code> 使用默认的过滤，全部扫描，设置includeFilters属性时需更改为false</li>
</ul>
<h3 id="过滤规则"><a href="#过滤规则" class="headerlink" title="过滤规则"></a>过滤规则</h3><ul>
<li><code>FilterType.ANNOTATION</code> 使用注解类型</li>
<li><code>FilterType.ASSIGNABLE_TYPE</code> 使用指定类型</li>
<li><code>FilterType.ASPECTJ</code> 使用ASPECTJ表达式</li>
<li><code>FilterType.REGEX</code> 使用正则表达式</li>
<li><code>FilterType.CUSTOM</code> 使用自定义规则</li>
</ul>
<h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><ul>
<li>SpringConfig.java<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.example.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.example.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(value = &quot;com.example&quot;, excludeFilters = &#123;</span></span><br><span class="line"><span class="meta">        @Filter(type = FilterType.ANNOTATION, classes = &#123;Controller.class&#125;),</span></span><br><span class="line"><span class="meta">        @Filter(type = FilterType.ASSIGNABLE_TYPE, classes = &#123;UserService.class&#125;),</span></span><br><span class="line"><span class="meta">        @Filter(type = FilterType.CUSTOM, classes = &#123;MyTypeFilter.class&#125;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>MyTypeFilter.java<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.core.io.Resource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.AnnotationMetadata;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.ClassMetadata;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.classreading.MetadataReader;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.classreading.MetadataReaderFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.filter.TypeFilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义扫描规则</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTypeFilter</span> <span class="keyword">implements</span> <span class="title class_">TypeFilter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> metadataReader 读取到的当前正在扫描的类信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> metadataReaderFactory 可以获取到其他任何类信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">match</span><span class="params">(MetadataReader metadataReader, MetadataReaderFactory metadataReaderFactory)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 获取当前类注解的信息</span></span><br><span class="line">        <span class="type">AnnotationMetadata</span> <span class="variable">annotationMetadata</span> <span class="operator">=</span> metadataReader.getAnnotationMetadata();</span><br><span class="line">        <span class="comment">// 获取当前正在扫描的类的类信息</span></span><br><span class="line">        <span class="type">ClassMetadata</span> <span class="variable">classMetadata</span> <span class="operator">=</span> metadataReader.getClassMetadata();</span><br><span class="line">        <span class="comment">// 获取当前类资源（类的路径）</span></span><br><span class="line">        <span class="type">Resource</span> <span class="variable">resource</span> <span class="operator">=</span> metadataReader.getResource();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> classMetadata.getClassName();</span><br><span class="line">        <span class="keyword">if</span> (className.contains(<span class="string">&quot;UserDao&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Import"><a href="#Import" class="headerlink" title="@Import"></a>@Import</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><ul>
<li><code>@Import</code> 要导入到容器中的组件，容器中就会自动注册这个组件，id默认是全类名</li>
<li><code>ImportSelector</code> 返回需要导入的组件的全类名数组</li>
<li><code>ImportBeanDefinitionRegistrar</code> 手动注册bean到容器中</li>
</ul>
<h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h3><ul>
<li>SpringConfig.java<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.example.entity.A;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import(&#123;A.class, MyImportSelector.class, MyImportBeanDefinitionRegistrar.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>MyImportSelector.java<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ImportSelector;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.AnnotationMetadata;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义导入组件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyImportSelector</span> <span class="keyword">implements</span> <span class="title class_">ImportSelector</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> importingClassMetadata 当前标注<span class="doctag">@Import</span>注解的类的所有注解信息</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> 导入到容器中的组件全类名</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;</span><br><span class="line">		<span class="comment">// 方法不要返回null值</span></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;com.example.entity.B&quot;</span>&#125;;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>MyImportBeanDefinitionRegistrar.java<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.example.entity.C;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.support.BeanDefinitionRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.support.RootBeanDefinition;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ImportBeanDefinitionRegistrar;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.AnnotationMetadata;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义导入注册器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyImportBeanDefinitionRegistrar</span> <span class="keyword">implements</span> <span class="title class_">ImportBeanDefinitionRegistrar</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> importingClassMetadata 当前类的注解信息</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> registry BeanDefinition注册类</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> &#123;</span><br><span class="line">			<span class="comment">// 指定Bean定义信息</span></span><br><span class="line">			<span class="type">RootBeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RootBeanDefinition</span>(C.class);</span><br><span class="line">			<span class="comment">// 注册一个Bean，指定bean名</span></span><br><span class="line">			registry.registerBeanDefinition(<span class="string">&quot;c&quot;</span>, beanDefinition);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="FactoryBean"><a href="#FactoryBean" class="headerlink" title="FactoryBean"></a>FactoryBean</h2><h3 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h3><ul>
<li>UserFactoryBean.java<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.FactoryBean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserFactoryBean</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;User&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> User.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSingleton</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>SpringConfig.java<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.example.entity.UserFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> UserFactoryBean <span class="title function_">userFactoryBean</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserFactoryBean</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>Test.java<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">    <span class="comment">// 默认获取的是工厂bean调用getObject创建的对象</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">user</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;userFactoryBean&quot;</span>);</span><br><span class="line">    System.out.println(user);<span class="comment">//com.example.entity.User@7a5b769b</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 要获取工厂Bean本身，需要给id前面加一个&amp;</span></span><br><span class="line">    <span class="comment">// BeanFactory.FACTORY_BEAN_PREFIX = &quot;&amp;&quot;</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">userFactoryBean</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;&amp;userFactoryBean&quot;</span>);</span><br><span class="line">    System.out.println(userFactoryBean);<span class="comment">//com.example.entity.UserFactoryBean@58496dc</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring：组件赋值</title>
    <url>/Spring/Spring%EF%BC%9A%E7%BB%84%E4%BB%B6%E8%B5%8B%E5%80%BC/</url>
    <content><![CDATA[<h2 id="属性赋值"><a href="#属性赋值" class="headerlink" title="属性赋值"></a>属性赋值</h2><h3 id="Value"><a href="#Value" class="headerlink" title="@Value"></a>@Value</h3><ul>
<li><code>@Value(“Michael Jackson”)</code> 普通字符</li>
<li><code>@Value(&quot;#&#123;systemProperties[‘os.name’]&#125;&quot;)</code> 操作系统属性</li>
<li><code>@Value(&quot;#&#123; T(java.lang.Math).random() * 100 &#125;&quot;)</code> SpEl表达式结果</li>
<li><code>@Value(&quot;#&#123;domeClass.name&#125;&quot;)</code> 其它Bean属性</li>
<li><code>@Value(“classpath:com/example/test.txt”)</code> 文件资源</li>
<li><code>@Value(“https://www.baidu.com/”)</code> 网站资源</li>
<li><code>@Value(&quot;$&#123;book.name&#125;&quot;)</code> 配置文件属性</li>
</ul>
<span id="more"></span>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;#&#123;10-2&#125;&quot;)</span>  </span><br><span class="line"><span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;张三&quot;)</span> </span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;user.password&#125;&quot;)</span> </span><br><span class="line"><span class="keyword">private</span> String password;</span><br></pre></td></tr></table></figure>

<h3 id="PropertySource"><a href="#PropertySource" class="headerlink" title="@PropertySource"></a>@PropertySource</h3><ul>
<li><code>@PropertySource</code> 加载配置文件，value属性也可加载多个配置文件。</li>
<li><code>@PropertySources</code> 加载多个配置文件。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@PropertySource(value=&#123;&quot;classpath:/jdbc.properties&quot;&#125;)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="自动装配"><a href="#自动装配" class="headerlink" title="自动装配"></a>自动装配</h2><h3 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h3><ul>
<li><code>@Autowired</code> 默认按照类型进行装配。多个相同类型的组件，则按照组件名称进行装配。</li>
<li><code>@Qualifier</code> 指定组件名称进行装配，配合@Autowired使用。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired(required=false)</span> <span class="comment">// required：是否必须</span></span><br><span class="line"><span class="meta">@Qualifier(&quot;userService&quot;)</span></span><br><span class="line"><span class="keyword">private</span> UserService userService;</span><br></pre></td></tr></table></figure>

<h3 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a>@Resource</h3><ul>
<li><code>@Resource</code> 默认按照组件名称进行装配。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> UserService userService;</span><br></pre></td></tr></table></figure>

<h3 id="Inject"><a href="#Inject" class="headerlink" title="@Inject"></a>@Inject</h3><ul>
<li><code>@Inject</code> 需要导入javax.inject包，和@Autowired的功能一样，但没有required属性。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Inject</span></span><br><span class="line"><span class="keyword">private</span> UserService userService;</span><br></pre></td></tr></table></figure>

<h3 id="Primary"><a href="#Primary" class="headerlink" title="@Primary"></a>@Primary</h3><ul>
<li><code>@Primary</code> Spring进行自动装配时，设置默认使用首选的Bean。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.example.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">user1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Primary</span> </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">user2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Aware子接口"><a href="#Aware子接口" class="headerlink" title="Aware子接口"></a>Aware子接口</h3><ul>
<li>自定义组件想要使用Spring容器底层的一些组件，需实现Aware的子接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.BeanNameAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContextAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.EmbeddedValueResolverAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringValueResolver;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomComponent</span> <span class="keyword">implements</span> <span class="title class_">ApplicationContextAware</span>,</span><br><span class="line">        BeanNameAware,</span><br><span class="line">        EmbeddedValueResolverAware &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBeanName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;当前Bean的名字：&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;applicationContext：&quot;</span>+applicationContext);</span><br><span class="line">        <span class="built_in">this</span>.applicationContext = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEmbeddedValueResolver</span><span class="params">(StringValueResolver resolver)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">resolveStringValue</span> <span class="operator">=</span> resolver.resolveStringValue(<span class="string">&quot;系统：$&#123;os.name&#125;，值：#&#123;10*5&#125;&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;解析的字符串：&quot;</span>+resolveStringValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="环境切换"><a href="#环境切换" class="headerlink" title="环境切换"></a>环境切换</h2><h3 id="Profile"><a href="#Profile" class="headerlink" title="@Profile"></a>@Profile</h3><ul>
<li><code>@Profile</code> 指定组件在哪个环境的情况下才能被注册到容器中。</li>
<li><code>@Profile</code> 激活方式：<ol>
<li>虚拟机参数激活：<code>-Dspring.profiles.active=dev</code></li>
<li>代码方式激活：</li>
</ol>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">AnnotationConfigApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>();</span><br><span class="line"><span class="comment">// 设置需要激活的环境</span></span><br><span class="line">applicationContext.getEnvironment().setActiveProfiles(<span class="string">&quot;dev&quot;</span>);</span><br><span class="line"><span class="comment">// 注册主配置类</span></span><br><span class="line">applicationContext.register(SpringConfig.class);</span><br><span class="line"><span class="comment">// 启动刷新容器</span></span><br><span class="line">applicationContext.refresh();</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Profile(&quot;prod&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DruidDataSource <span class="title function_">dataSourceProd</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        ds.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/prod&quot;</span>);</span><br><span class="line">        ds.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        ds.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Profile(&quot;dev&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DruidDataSource <span class="title function_">dataSourceDev</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        ds.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/dev&quot;</span>);</span><br><span class="line">        ds.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        ds.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Conditional"><a href="#Conditional" class="headerlink" title="@Conditional"></a>@Conditional</h3><ul>
<li><code>@ConditionalOnBean</code>     Spring容器中是否存在对应的实例。</li>
<li><code>@ConditionalOnMissingBean</code>     Spring容器中是否不存在对应的实例。</li>
<li><code>@ConditionalOnClass</code> 类加载器中是否存在对应的类。</li>
<li><code>@ConditionalOnMissingClass</code> 类加载器中是否不存在对应的类。</li>
<li><code>@ConditionalOnExpression</code> 判断 SpEL 表达式是否成立。</li>
<li><code>@ConditionalOnJava</code> 指定Java版本是否符合要求。</li>
<li><code>@ConditionalOnJndi</code> 在JNDI存在的条件下查找指定的位置。</li>
<li><code>@ConditionalOnSingleCandidate</code> Spring容器中是否存在且只存在一个对应的实例。</li>
<li><code>@ConditionalOnProperty</code> 应用环境中的属性是否存在。</li>
<li><code>@ConditionalOnResource</code> 是否存在指定的资源文件。</li>
<li><code>@ConditionalOnWebApplication</code> 应用程序是否是Web程序。</li>
<li><code>@ConditionalOnNotWebApplication</code> 应用程序是否非Web程序。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Spring容器或者所有父容器中需要存在至少一个javax.sql.DataSource类的实例</span></span><br><span class="line"><span class="meta">@ConditionalOnBean(javax.sql.DataSource.class)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Spring当前容器中不存在ErrorController类型的Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(value = ErrorController.class, search = SearchStrategy.CURRENT)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 类加载器中必须存在Configuration这个类</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(Configuration.class)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 类加载器中不能存在GenericObjectPool这个类</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingClass(“GenericObjectPool”)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// server.host配置项的值需要是localhost</span></span><br><span class="line"><span class="meta">@ConditionalOnExpression(“‘$&#123;server.host&#125;’==’localhost’”)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Java版本至少是8</span></span><br><span class="line"><span class="meta">@ConditionalOnJava(JavaVersion.EIGHT)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Spring当前或父容器中必须存在PlatformTransactionManager这个类型的实例，且只有一个实例</span></span><br><span class="line"><span class="meta">@ConditionalOnSingleCandidate(PlatformTransactionManager.class)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 应用程序的环境中必须有spring.aop.auto这项配置，且它的值是true或者环境中不存在</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = “spring.aop”, name = “auto”, havingValue = “true”, matchIfMissing = true)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 类加载路径中必须存在mybatis.xml文件</span></span><br><span class="line"><span class="meta">@ConditionalOnResource(resources=”mybatis.xml”)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 必须在Web应用下才会生效</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 必须在非Web应用下才会生效</span></span><br><span class="line"><span class="meta">@ConditionalOnNotWebApplication</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC：HelloWorld</title>
    <url>/SpringMVC/SpringMVC%EF%BC%9AHelloWorld/</url>
    <content><![CDATA[<h2 id="SpringMVC概述"><a href="#SpringMVC概述" class="headerlink" title="SpringMVC概述"></a>SpringMVC概述</h2><ul>
<li>Spring MVC框架提供了MVC(模型、视图、控制器)架构和用于开发灵活和松散耦合的Web应用程序的组件。 MVC模式导致应用程序的不同方面(输入逻辑，业务逻辑和UI逻辑)分离，同时提供这些元素之间的松散耦合。</li>
<li><code>模型(Model)</code> 封装了应用程序数据，通常它们将由POJO类组成。</li>
<li><code>视图(View)</code> 负责渲染模型数据，一般来说它生成客户端浏览器可以解释HTML输出。</li>
<li><code>控制器(Controller)</code> 负责处理用户请求并构建适当的模型，并将其传递给视图进行渲染。</li>
</ul>
<span id="more"></span>

<h2 id="HelloWorld示例"><a href="#HelloWorld示例" class="headerlink" title="HelloWorld示例"></a>HelloWorld示例</h2><p>jar包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">servlet-api-x.y.z.jar</span><br><span class="line">commons-logging-x.y.z.jar</span><br><span class="line">spring-aop-x.y.z.jar</span><br><span class="line">spring-beans-x.y.z.jar</span><br><span class="line">spring-context-x.y.z.jar</span><br><span class="line">spring-core-x.y.z.jar</span><br><span class="line">spring-expression-x.y.z.jar</span><br><span class="line">spring-webmvc-x.y.z.jar</span><br><span class="line">spring-web-x.y.z.jar</span><br></pre></td></tr></table></figure>

<p>web.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee </span></span></span><br><span class="line"><span class="string"><span class="tag">	http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">id</span>=<span class="string">&quot;WebApp_ID&quot;</span> <span class="attr">version</span>=<span class="string">&quot;2.5&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Spring MVC Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring/springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>springmvc.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="string"><span class="tag">		http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">		http://www.springframework.org/schema/context </span></span></span><br><span class="line"><span class="string"><span class="tag">		http://www.springframework.org/schema/context/spring-context-4.0.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">		http://www.springframework.org/schema/mvc </span></span></span><br><span class="line"><span class="string"><span class="tag">		http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 配置自动扫描的包 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.example&quot;</span> /&gt;</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">&lt;!-- 配置注解驱动 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 配置视图解析器 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/src/views/&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">&lt;!-- 配置静态资源 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 配置资源映射 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;image/**&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/WEB-INF/src/image/&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;css/**&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/WEB-INF/src/css/&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;js/**&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/WEB-INF/src/js/&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;views/**&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/WEB-INF/src/views/&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>HelloController.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springmvc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(Model model)</span> &#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;Hello Spring MVC Framework!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>hello.jsp</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html; charset=UTF-8&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h2</span>&gt;</span>$&#123;message&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>SpringMVC</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>Spring</tag>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC：处理模型数据</title>
    <url>/SpringMVC/SpringMVC%EF%BC%9A%E5%A4%84%E7%90%86%E6%A8%A1%E5%9E%8B%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<h2 id="模型数据"><a href="#模型数据" class="headerlink" title="模型数据"></a>模型数据</h2><ul>
<li><code>ModelAndView</code> 处理方法返回值类型为ModelAndView时, 方法体即可通过该对象添加模型数据。</li>
<li><code>Map</code> 、<code>Model</code> 入参为org.springframework.ui.Model、org.springframework.ui.ModelMap 或 java.uti.Map 时，处理方法返回时，Map中的数据会自动添加到模型中。</li>
<li><code>@SessionAttributes</code> 将模型中的某个属性暂存到HttpSession中，以便多个请求之间可以共享这个属性。</li>
<li><code>@ModelAttribute</code> 方法入参标注该注解后，入参的对象就会放到数据模型中。</li>
</ul>
<span id="more"></span>

<h2 id="ModelAndView"><a href="#ModelAndView" class="headerlink" title="ModelAndView"></a>ModelAndView</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ModelAndView：既包含视图信息，也包含模型数据信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">ModelAndView</span> <span class="variable">modelAndView</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">	modelAndView.addObject(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Map、Model"><a href="#Map、Model" class="headerlink" title="Map、Model"></a>Map、Model</h2><p><img src="/SpringMVC/SpringMVC%EF%BC%9A%E5%A4%84%E7%90%86%E6%A8%A1%E5%9E%8B%E6%95%B0%E6%8D%AE/Map%E3%80%81Model.png" alt="Map、Model"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 目标方法可以添加 Map 类型(实际上也可以是 Model 类型或 ModelMap 类型)的参数.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> map</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(Map&lt;String, Object&gt; map)</span>&#123;</span><br><span class="line">	map.put(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="SessionAttributes"><a href="#SessionAttributes" class="headerlink" title="@SessionAttributes"></a>@SessionAttributes</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@SessionAttributes</span></span></span><br><span class="line"><span class="comment"> * 属性：</span></span><br><span class="line"><span class="comment"> *    value：通过model的属性名存放到request和session里</span></span><br><span class="line"><span class="comment"> *    types：通过model的属性值类型存放到request和session里</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SessionAttributes(value=&#123;&quot;message&quot;&#125;)</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(Map&lt;String, Object&gt; map)</span>&#123;</span><br><span class="line">		map.put(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="ModelAttribute"><a href="#ModelAttribute" class="headerlink" title="@ModelAttribute"></a>@ModelAttribute</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ModelAttribute</span></span></span><br><span class="line"><span class="comment"> * 方法上定义：</span></span><br><span class="line"><span class="comment"> *    - Spring MVC在调用目标处理方法前，会先逐个调用在方法级上标注了<span class="doctag">@ModelAttribute</span> 的方法。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 方法入参定义：</span></span><br><span class="line"><span class="comment"> *    - 可以从隐含对象中获取隐含的模型数据中获取对象，再将请求参数绑定到对象中，再传入入参</span></span><br><span class="line"><span class="comment"> *    - 将方法入参对象添加到模型中</span></span><br><span class="line"><span class="comment"> *	</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ModelAttribute</span>源码流程</span></span><br><span class="line"><span class="comment"> * 1. 调用 <span class="doctag">@ModelAttribute</span> 注解修饰的方法. 实际上把 <span class="doctag">@ModelAttribute</span> 方法中 Map 中的数据放在 implicitModel</span></span><br><span class="line"><span class="comment"> * 2. 解析请求处理器的目标参数, 实际上该目标参数来自于 WebDataBinder 对象的 target 属性</span></span><br><span class="line"><span class="comment"> *    1). 创建 WebDataBinder 对象:</span></span><br><span class="line"><span class="comment"> *        ①. 确定 objectName 属性: </span></span><br><span class="line"><span class="comment"> *            若<span class="doctag">@ModelAttribute</span>的value有设值，则为ModelAttribute的value值，否则为类名(第一个字母小写)</span></span><br><span class="line"><span class="comment"> *        ②. 确定 target 属性:</span></span><br><span class="line"><span class="comment"> *            在 implicitModel 中查找 objectName 对应的属性值，</span></span><br><span class="line"><span class="comment"> *            若存在，则获取，若不存在，则验证当前 Handler 是否使用了 <span class="doctag">@SessionAttributes</span> </span></span><br><span class="line"><span class="comment"> *                若使用, 且存在匹配key则尝试从 Session 中获取，不存在则抛出异常</span></span><br><span class="line"><span class="comment"> *                若未使用, 则通过反射创建了 POJO 对象</span></span><br><span class="line"><span class="comment"> *    2). SpringMVC 把请求参数赋给了 WebDataBinder 的 target 对应的属性.</span></span><br><span class="line"><span class="comment"> *    3). SpringMVC 会把 WebDataBinder 的 objectName 和 target 给到 implicitModel.</span></span><br><span class="line"><span class="comment"> *    4). 把 WebDataBinder 的 target 作为参数传递给目标方法的入参.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ModelAttribute</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(Map&lt;String, Object&gt; map)</span> &#123;</span><br><span class="line">	map.put(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>SpringMVC</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>Spring</tag>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC：工作流程</title>
    <url>/SpringMVC/SpringMVC%EF%BC%9A%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><p><img src="/SpringMVC/SpringMVC%EF%BC%9A%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="SpringMVC工作流程图"></p>
<span id="more"></span>

<ul>
<li>1、用户发送请求至前端控制器DispatcherServlet。</li>
<li>2、DispatcherServlet收到请求调用HandlerMapping处理器映射器。</li>
<li>3、处理器映射器找到具体的处理器，生成处理器对象及处理器拦截器(如果有则生成)一并返回给DispatcherServlet。</li>
<li>4、DispatcherServlet调用HandlerAdapter处理器适配器。</li>
<li>5、HandlerAdapter经过适配调用具体的处理器(Controller，也叫后端控制器)。</li>
<li>6、Controller执行完成返回ModelAndView。</li>
<li>7、HandlerAdapter将controller执行结果ModelAndView返回给DispatcherServlet。</li>
<li>8、DispatcherServlet将ModelAndView传给ViewReslover视图解析器。</li>
<li>9、ViewReslover解析后返回具体View。</li>
<li>10、DispatcherServlet根据View进行渲染视图（即将模型数据填充至视图中）。</li>
<li>11、DispatcherServlet响应用户。</li>
</ul>
]]></content>
      <categories>
        <category>SpringMVC</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>Spring</tag>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC：请求参数</title>
    <url>/SpringMVC/SpringMVC%EF%BC%9A%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0/</url>
    <content><![CDATA[<h2 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam"></a>@RequestParam</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@RequestParam</span> 请求参数值</span></span><br><span class="line"><span class="comment"> * 属性：</span></span><br><span class="line"><span class="comment"> * 	  value：参数名</span></span><br><span class="line"><span class="comment"> * 	  required：是否必须，默认true，若不存在将抛出异常</span></span><br><span class="line"><span class="comment"> * 	  defaultValue：默认值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/getParam&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getParam</span><span class="params">(<span class="meta">@RequestParam(value=&quot;num&quot;, required=false, defaultValue=&quot;100&quot;)</span> <span class="type">int</span> num)</span>&#123;</span><br><span class="line">	System.out.println(num);</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="RequestHeader"><a href="#RequestHeader" class="headerlink" title="@RequestHeader"></a>@RequestHeader</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@RequestHeader</span> 请求报头</span></span><br><span class="line"><span class="comment"> * 属性：</span></span><br><span class="line"><span class="comment"> * 	  value：参数名</span></span><br><span class="line"><span class="comment"> * 	  required：是否必须，默认true，若不存在将抛出异常</span></span><br><span class="line"><span class="comment"> * 	  defaultValue：默认值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/getHeader&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getHeader</span><span class="params">(<span class="meta">@RequestHeader(value=&quot;User-Agent&quot;)</span> String userAgent)</span>&#123;</span><br><span class="line">	System.out.println(userAgent);</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="CookieValue"><a href="#CookieValue" class="headerlink" title="@CookieValue"></a>@CookieValue</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@CookieValue</span> 请求Cookie值</span></span><br><span class="line"><span class="comment"> * 属性：</span></span><br><span class="line"><span class="comment"> * 	  value：参数名</span></span><br><span class="line"><span class="comment"> * 	  required：是否必须，默认true，若不存在将抛出异常</span></span><br><span class="line"><span class="comment"> * 	  defaultValue：默认值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/getCookie&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getCookie</span><span class="params">(<span class="meta">@CookieValue(value=&quot;JSESSIONID&quot;)</span> String sessionId)</span>&#123;</span><br><span class="line">	System.out.println(sessionId);</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="支持Servlet-API类型参数"><a href="#支持Servlet-API类型参数" class="headerlink" title="支持Servlet API类型参数"></a>支持Servlet API类型参数</h2><ul>
<li>HttpServletRequest</li>
<li>HttpServletResponse</li>
<li>HttpSession</li>
<li>java.security.Principal</li>
<li>Locale</li>
<li>InputStream</li>
<li>OutputStream</li>
<li>Reader</li>
<li>Writer</li>
</ul>
]]></content>
      <categories>
        <category>SpringMVC</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>Spring</tag>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC：请求映射</title>
    <url>/SpringMVC/SpringMVC%EF%BC%9A%E8%AF%B7%E6%B1%82%E6%98%A0%E5%B0%84/</url>
    <content><![CDATA[<h2 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a>@RequestMapping</h2><ul>
<li><code>DispatcherServlet</code>截获请求后，通过控制器上<code>@RequestMapping</code>提供的映射信息确定请求所对应的处理方法</li>
</ul>
<span id="more"></span>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 类处定义：提供初步的请求映射信息。相对于 WEB 应用的根目录</span></span><br><span class="line"><span class="comment"> * 方法处定义：提供进一步的细分映射信息。相对于类定义处的 URL。</span></span><br><span class="line"><span class="comment"> *           若类定义处未标注 <span class="doctag">@RequestMapping</span>，则方法处标记的 URL 相对于 WEB 应用的根目录</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 如：1. 类处定义 + 方法处定义：/api/hello</span></span><br><span class="line"><span class="comment"> *    2. 只在方法处定义：/hello</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参数表达式"><a href="#参数表达式" class="headerlink" title="参数表达式"></a>参数表达式</h2><p><code>params</code> 和 <code>headers</code> 参数支持简单的表达式</p>
<ul>
<li><code>param1</code> 表示请求必须包含名为 param1 的请求参数</li>
<li><code>!param1</code> 表示请求不能包含名为 param1 的请求参数</li>
<li><code>param1 != value1</code> 表示请求包含名为 param1 的请求参数，但其值不能为 value1</li>
<li><code>&#123;“param1=value1”, “param2”&#125;</code> 表示请求必须包含名为 param1 和param2的两个请求参数，且 param1 参数的值必须为 value1</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 了解: 可以使用 params 和 headers 来更加精确的映射请求. params 和 headers 支持简单的表达式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(value=&quot;/hello&quot;, params=&#123;&quot;name&quot;, &quot;age!=10&quot;&#125;, </span></span><br><span class="line"><span class="meta">		headers=&#123;&quot;Content-Type=text/plain;charset=UTF-8&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Ant路径"><a href="#Ant路径" class="headerlink" title="Ant路径"></a>Ant路径</h2><ul>
<li><code>?</code> 匹配资源地址中的一个字符</li>
<li><code>*</code> 匹配资源地址中的任意字符</li>
<li><code>**</code> 匹配多层资源地址中的任意字符</li>
</ul>
<blockquote>
<p><code>/user/createUser??</code>：匹配&#x2F;user&#x2F;createUser<span style="color:#E9694B">aa</span>、&#x2F;user&#x2F;createUser<span style="color:#E9694B">bb</span> 等 URL<br><code>/user/*/createUser</code>：匹配&#x2F;user&#x2F;<span style="color:#E9694B">aaa</span>&#x2F;createUser、&#x2F;user&#x2F;<span style="color:#E9694B">bbb</span>&#x2F;createUser 等 URL<br><code>/user/**/createUser</code>：匹配&#x2F;user&#x2F;createUser、&#x2F;user&#x2F;<span style="color:#E9694B">aaa&#x2F;bbb&#x2F;</span>createUser 等 URL</p>
</blockquote>
<h2 id="占位符"><a href="#占位符" class="headerlink" title="占位符"></a>占位符</h2><ul>
<li>通过 <code>@PathVariable(&quot;xxx&quot;)</code>  可以将 URL 中的 <code>&#123;xxx&#125;</code> 占位符参数绑定到控制器处理方法的入参中。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;hello world&quot;</span> + id);</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="REST风格"><a href="#REST风格" class="headerlink" title="REST风格"></a>REST风格</h2><ul>
<li><code>REST</code> 即 Representational State Transfer。<code>（资源）表现层状态转化</code>，表示URL定位资源，用HTTP动词（GET，POST，PUT，DELETE）描述操作。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">/user          HTTP POST        # 新增user</span><br><span class="line">/user/<span class="number">1</span>        HTTP GET         # 获取id为<span class="number">1</span>的user</span><br><span class="line">/user/<span class="number">1</span>        HTTP DELETE      # 删除id为<span class="number">1</span>的user</span><br><span class="line">/user/<span class="number">1</span>        HTTP PUT         # 更新id为<span class="number">1</span>的user</span><br></pre></td></tr></table></figure>

<p>web.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置 HiddenHttpMethodFilter：可以把 POST 请求转为 DELETE 或 PUT 请求 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 浏览器 form 表单只支持 GET 与 POST 请求，而DELETE、PUT 等并不支持，Spring3.0 添加了一个过滤器，可以将这些请求转换为标准的 http 方法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>hiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>hiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>index.jsp</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Spring MVC<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> 	<span class="comment">&lt;!-- 得到id为1的user --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;user/1&quot;</span>&gt;</span>Test Rest GET<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 新建id为1的user --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;user&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Test Rest POST&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- 更新id为1的user --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;user/1&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- HiddenHttpMethodFilter 源码需要 _method 属性识别请求方式 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;PUT&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Test Rest PUT&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- 删除id为1的user --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;user/1&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;DELETE&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Test Rest DELETE&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>controller.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(path = &quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@RequestMapping(value=&quot;&quot;, method=RequestMethod.POST)</span></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">create</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;新建user&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@RequestMapping(value=&quot;/&#123;id&#125;&quot;, method=RequestMethod.GET)</span></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">show</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;查看id为：&quot;</span> + id + <span class="string">&quot;的user&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@RequestMapping(value=&quot;/&#123;id&#125;&quot;, method=RequestMethod.PUT)</span></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">update</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;更新id为：&quot;</span> + id + <span class="string">&quot;的user&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@RequestMapping(value=&quot;/&#123;id&#125;&quot;, method=RequestMethod.DELETE)</span></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">destroy</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;删除id为：&quot;</span> + id + <span class="string">&quot;的user&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>SpringMVC</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>Spring</tag>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC：拦截器</title>
    <url>/SpringMVC/SpringMVC%EF%BC%9A%E6%8B%A6%E6%88%AA%E5%99%A8/</url>
    <content><![CDATA[<h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><p>Spring MVC也可以使用拦截器对请求进行拦截处理，用户可以自定义拦截器来实现特定的功能，自定义的拦截器必须实现HandlerInterceptor接口。</p>
<ul>
<li><code>preHandle()</code> 该方法在业务处理器处理请求之前被调用，可以做权限、日志、事务等操作。</li>
<li><code>postHandle()</code> 该方法在业务处理器处理完请求后，但是渲染视图之前被调用，可以对请求域中的属性或视图做出修改等操作。</li>
<li><code>afterCompletion()</code> 该方法在渲染视图之后被调用，可以做释放资源等操作。</li>
</ul>
<span id="more"></span>

<h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><p>Interceptor.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FirstInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 该方法在目标方法之前被调用</span></span><br><span class="line"><span class="comment">	 * 若返回值为 true, 则继续调用后续的拦截器和目标方法.</span></span><br><span class="line"><span class="comment">	 * 若返回值为 false, 则不会再调用后续的拦截器和目标方法</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">			HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;[FirstInterceptor] preHandle&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 调用目标方法之后, 但渲染视图之前</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">			HttpServletResponse response, Object handler,</span></span><br><span class="line"><span class="params">			ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;[FirstInterceptor] postHandle&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 渲染视图之后被调用</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">			HttpServletResponse response, Object handler, Exception ex)</span></span><br><span class="line">			<span class="keyword">throws</span> Exception &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;[FirstInterceptor] afterCompletion&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>springmvc.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置自定义的拦截器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.example.springmvc.interceptors.FirstInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="拦截范围"><a href="#拦截范围" class="headerlink" title="拦截范围"></a>拦截范围</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 拦截所有请求 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.example.springmvc.interceptors.FirstInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 拦截(不)作用的请求 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/user/*&quot;</span>/&gt;</span> <span class="comment">&lt;!-- 拦截请求 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">&quot;/user/login.*&quot;</span>/&gt;</span> <span class="comment">&lt;!--不拦截请求 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.example.springmvc.interceptor.UserLoginInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h2><ul>
<li><p>当所有拦截器<code>preHandle</code>返回<code>true</code>时<br><img src="/SpringMVC/SpringMVC%EF%BC%9A%E6%8B%A6%E6%88%AA%E5%99%A8/all-pre-true.png" alt="all-pre-true"></p>
</li>
<li><p>当<code>C</code>拦截器<code>preHandle</code>返回<code>fasle</code>时<br><img src="/SpringMVC/SpringMVC%EF%BC%9A%E6%8B%A6%E6%88%AA%E5%99%A8/c-pre-false.png" alt="c-pre-false"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>SpringMVC</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>Spring</tag>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>UML类图</title>
    <url>/UML/UML%E7%B1%BB%E5%9B%BE/</url>
    <content><![CDATA[<style>
[alt="类之间的关系"] {
    width: 360px;
}
</style>

<h2 id="UML图分类"><a href="#UML图分类" class="headerlink" title="UML图分类"></a>UML图分类</h2><ul>
<li>用例图(use case)</li>
<li>静态结构图：类图、对象图、包图、组件图、部署图</li>
<li>动态行为图：交互图(时序图与协作图)、状态图、活动图</li>
</ul>
<span id="more"></span>

<h2 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h2><ul>
<li>用于描述系统中的类(对象)本身的组成和类(对象)之间的各种静态关系</li>
</ul>
<h3 id="属性、方法表达式"><a href="#属性、方法表达式" class="headerlink" title="属性、方法表达式"></a>属性、方法表达式</h3><ul>
<li>属性：<code>可见性 名称:类型 [ = 缺省值 ]</code></li>
<li>方法：<code>可见性 名称(参数列表) [ : 返回类型]</code></li>
</ul>
<p>可见性说明：<code>- private</code>、<code>～ default</code>、<code># protected</code>、<code>+ public</code></p>
<h3 id="类之间的关系"><a href="#类之间的关系" class="headerlink" title="类之间的关系"></a>类之间的关系</h3><p><img src="/UML/UML%E7%B1%BB%E5%9B%BE/%E7%B1%BB%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB.png" alt="类之间的关系"></p>
<h2 id="依赖关系-Dependence"><a href="#依赖关系-Dependence" class="headerlink" title="依赖关系(Dependence)"></a>依赖关系(Dependence)</h2><p><img src="/UML/UML%E7%B1%BB%E5%9B%BE/%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB.png" alt="依赖关系"></p>
<h2 id="关联关系-Association"><a href="#关联关系-Association" class="headerlink" title="关联关系(Association)"></a>关联关系(Association)</h2><p><img src="/UML/UML%E7%B1%BB%E5%9B%BE/%E5%85%B3%E8%81%94%E5%85%B3%E7%B3%BB.png" alt="关联关系"></p>
<h2 id="泛化关系-Generalization"><a href="#泛化关系-Generalization" class="headerlink" title="泛化关系(Generalization)"></a>泛化关系(Generalization)</h2><p><img src="/UML/UML%E7%B1%BB%E5%9B%BE/%E6%B3%9B%E5%8C%96%E5%85%B3%E7%B3%BB.png" alt="泛化关系"></p>
<h2 id="实现关系-Implementation"><a href="#实现关系-Implementation" class="headerlink" title="实现关系(Implementation)"></a>实现关系(Implementation)</h2><p><img src="/UML/UML%E7%B1%BB%E5%9B%BE/%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB.png" alt="实现关系"></p>
<h2 id="聚合关系-Aggregation"><a href="#聚合关系-Aggregation" class="headerlink" title="聚合关系(Aggregation)"></a>聚合关系(Aggregation)</h2><p><img src="/UML/UML%E7%B1%BB%E5%9B%BE/%E8%81%9A%E5%90%88%E5%85%B3%E7%B3%BB.png" alt="聚合关系"></p>
<h2 id="组合关系-Composition"><a href="#组合关系-Composition" class="headerlink" title="组合关系(Composition)"></a>组合关系(Composition)</h2><p><img src="/UML/UML%E7%B1%BB%E5%9B%BE/%E7%BB%84%E5%90%88%E5%85%B3%E7%B3%BB.png" alt="组合关系"></p>
]]></content>
      <categories>
        <category>UML</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>UML</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL_优化：Show Profile分析</title>
    <url>/MySQL/MySQL_%E4%BC%98%E5%8C%96%EF%BC%9AShow%20Profile%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h2 id="什么是Show-Profile"><a href="#什么是Show-Profile" class="headerlink" title="什么是Show Profile"></a>什么是Show Profile</h2><ul>
<li>是MySQL提供可以用来分析当前会话中语句执行的资源消耗情况。可以用于SQL的调优的测量</li>
</ul>
<span id="more"></span>

<h2 id="开启Show-Profile"><a href="#开启Show-Profile" class="headerlink" title="开启Show Profile"></a>开启Show Profile</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查看</span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;profiling&#x27;</span>;</span><br><span class="line"></span><br><span class="line"># 开启（默认关闭，使用前需要开启）</span><br><span class="line"><span class="keyword">SET</span> profiling <span class="operator">=</span> <span class="keyword">ON</span>;</span><br></pre></td></tr></table></figure>

<h2 id="诊断SQL"><a href="#诊断SQL" class="headerlink" title="诊断SQL"></a>诊断SQL</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 执行<span class="keyword">SQL</span>后查看结果</span><br><span class="line"><span class="keyword">SHOW</span> PROFILES;</span><br><span class="line"></span><br><span class="line"># 根据查询结果的Query_ID诊断<span class="keyword">SQL</span></span><br><span class="line"><span class="keyword">SHOW</span> PROFILE cpu,block io <span class="keyword">FOR</span> QUERY [Query_ID];</span><br><span class="line"></span><br><span class="line"># PROFILE TYPE:  </span><br><span class="line"><span class="keyword">ALL</span>                            # 显示所有的开销信息  </span><br><span class="line">BLOCK IO                       # 显示块IO相关开销  </span><br><span class="line">CONTEXT SWITCHES               #上下文切换相关开销  </span><br><span class="line">CPU                            # 显示CPU相关开销信息  </span><br><span class="line">IPC                            # 显示发送和接收相关开销信息  </span><br><span class="line">MEMORY                         # 显示内存相关开销信息  </span><br><span class="line">PAGE FAULTS                    # 显示页面错误相关开销信息  </span><br><span class="line">SOURCE                         # 显示和Source_function，Source_file，Source_line相关的开销信息  </span><br><span class="line">SWAPS                          # 显示交换次数相关开销的信息  </span><br><span class="line"></span><br><span class="line"># 需要注意的诊断Status结论</span><br><span class="line">converting HEAP <span class="keyword">to</span> MyISAM      # 查询结果太大，内存不够往磁盘上搬</span><br><span class="line">Creating tmp <span class="keyword">table</span>             # 创建临时表</span><br><span class="line">Copying <span class="keyword">to</span> tmp <span class="keyword">table</span> <span class="keyword">on</span> disk   # 把内存中临时表复制到磁盘</span><br><span class="line">locked                         # 锁住了</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>数据库</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL_优化：慢查询日志</title>
    <url>/MySQL/MySQL_%E4%BC%98%E5%8C%96%EF%BC%9A%E6%85%A2%E6%9F%A5%E8%AF%A2%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<h2 id="什么是慢查询日志"><a href="#什么是慢查询日志" class="headerlink" title="什么是慢查询日志"></a>什么是慢查询日志</h2><ul>
<li>慢查询日志是MySQL提供多一种日志记录，它用来记录在MySQL中响应时间超过阀值的语句，具体指运行时间超过long_query_time值的SQL，则会被记录到慢查询日志中</li>
<li>慢查询日志默认是关闭的，开启慢查询日志会带来一定的性能影响，不是调优需要，一般不建议开启</li>
</ul>
<span id="more"></span>

<h2 id="开启慢查询日志"><a href="#开启慢查询日志" class="headerlink" title="开启慢查询日志"></a>开启慢查询日志</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查看</span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;%slow_query_log%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"># 开启（当前数据库生效，重启MySQL失效）</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> slow_query_log <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"># 关闭</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> slow_query_log <span class="operator">=</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<h2 id="设置慢查询阀值时间"><a href="#设置慢查询阀值时间" class="headerlink" title="设置慢查询阀值时间"></a>设置慢查询阀值时间</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查看（默认<span class="number">10</span>秒）</span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;%long_query_time%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"># 设置（判断大于long_query_time，而非大于等于；设置后需重新连接或新开会话才能看到修改值）</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> long_query_time<span class="operator">=</span><span class="number">3</span>;</span><br></pre></td></tr></table></figure>

<h2 id="查询慢查询当前系统总记录"><a href="#查询慢查询当前系统总记录" class="headerlink" title="查询慢查询当前系统总记录"></a>查询慢查询当前系统总记录</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GLOBAL</span> STATUS <span class="keyword">LIKE</span> <span class="string">&#x27;%slow_queries%&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="慢查询配置版"><a href="#慢查询配置版" class="headerlink" title="慢查询配置版"></a>慢查询配置版</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 修改my.cnf文件，[mysqld]下添加参数</span><br><span class="line">slow_query_log <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">slow_query_log_file<span class="operator">=</span><span class="operator">/</span>var<span class="operator">/</span>lib<span class="operator">/</span>mysql<span class="operator">/</span>host_name<span class="operator">-</span>slow.log</span><br><span class="line">long_query_time<span class="operator">=</span><span class="number">3</span>;</span><br><span class="line">log_output<span class="operator">=</span>FILE</span><br></pre></td></tr></table></figure>

<h2 id="日志分析工具mysqldumpslow"><a href="#日志分析工具mysqldumpslow" class="headerlink" title="日志分析工具mysqldumpslow"></a>日志分析工具mysqldumpslow</h2><h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><p>s：是表示按照何种方式排序<br>c：访问次数<br>l：锁定时间<br>r：返回记录<br>t：查询时间<br>al：平均锁定时间<br>ar：平均返回记录数<br>at：平均查询时间<br>t NUM：显示头num条记录<br>g PATTERN：正则匹配，大小写不敏感</p>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 得到返回记录集最多的<span class="number">10</span>个<span class="keyword">SQL</span></span><br><span class="line">mysqldumpslow <span class="operator">-</span>s r <span class="operator">-</span>t <span class="number">10</span> <span class="operator">/</span>var<span class="operator">/</span>lib<span class="operator">/</span>mysql<span class="operator">/</span>host_name<span class="operator">-</span>slow.log</span><br><span class="line"></span><br><span class="line"># 得到访问次数最多的<span class="number">10</span>个<span class="keyword">SQL</span></span><br><span class="line">mysqldumpslow <span class="operator">-</span>s c <span class="operator">-</span>t <span class="number">10</span> <span class="operator">/</span>var<span class="operator">/</span>lib<span class="operator">/</span>mysql<span class="operator">/</span>host_name<span class="operator">-</span>slow.log</span><br><span class="line"></span><br><span class="line"># 得到按照时间排序的前<span class="number">10</span>条里面含有左连接的查询语句</span><br><span class="line">mysqldumpslow <span class="operator">-</span>s t <span class="operator">-</span>t <span class="number">10</span> <span class="operator">-</span>g &quot;left join&quot; <span class="operator">/</span>var<span class="operator">/</span>lib<span class="operator">/</span>mysql<span class="operator">/</span>host_name<span class="operator">-</span>slow.log</span><br><span class="line"></span><br><span class="line"># 另外建议在使用这些命令结合 <span class="operator">|</span> 和more使用，否则有可能出现爆屏情况</span><br><span class="line">mysqldumpslow <span class="operator">-</span>s r <span class="operator">-</span>t <span class="number">10</span> <span class="operator">/</span>var<span class="operator">/</span>lib<span class="operator">/</span>mysql<span class="operator">/</span>host_name<span class="operator">-</span>slow.log <span class="operator">|</span> more</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>数据库</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL_优化：性能分析Explain</title>
    <url>/MySQL/MySQL_%E4%BC%98%E5%8C%96%EF%BC%9A%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90Explain/</url>
    <content><![CDATA[<h2 id="什么是Explain"><a href="#什么是Explain" class="headerlink" title="什么是Explain"></a>什么是Explain</h2><ul>
<li>EXPLAIN关键字可以模拟优化器执行SQL查询语句，从而知道MySQL如何处理SQL语句。进行分析查询语句或是表结构的性能瓶颈。</li>
</ul>
<span id="more"></span>

<h2 id="Explain分析结果"><a href="#Explain分析结果" class="headerlink" title="Explain分析结果"></a>Explain分析结果</h2><ul>
<li>表的读取顺序</li>
<li>数据读取操作的操作类型</li>
<li>哪些索引可以使用</li>
<li>哪些索引被实际使用</li>
<li>表之间的引用</li>
<li>每张表有多少行被优化器查询</li>
</ul>
<h2 id="Explain语法"><a href="#Explain语法" class="headerlink" title="Explain语法"></a>Explain语法</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXPLAIN <span class="operator">&lt;</span><span class="keyword">SQL</span>查询语句<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Explain字段解释"><a href="#Explain字段解释" class="headerlink" title="Explain字段解释"></a>Explain字段解释</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">--+---------+----+--------+----+-----------+---+------+----+----+-----+-----+</span></span><br><span class="line"> <span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> partitions <span class="operator">|</span> type  <span class="operator">|</span> possible_keys <span class="operator">|</span> key <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--+---------+----+--------+----+-----------+---+------+----+----+-----+-----+</span></span><br><span class="line"></span><br><span class="line">id：查询标识符</span><br><span class="line">select_type：查询类型</span><br><span class="line"><span class="keyword">table</span>：输出行描述的表的表名</span><br><span class="line">partitions：匹配的分区</span><br><span class="line">type：连接类型</span><br><span class="line">possible_keys：可供选择使用的索引</span><br><span class="line">key：实际使用的索引</span><br><span class="line">key_len：实际使用的索引的长度</span><br><span class="line"><span class="keyword">ref</span>：与索引进行比较的列，也就是关联表使用的列</span><br><span class="line"><span class="keyword">rows</span>：估计要检查的行数</span><br><span class="line">filtered：按表条件过滤的行的百分比</span><br><span class="line">Extra：附加信息</span><br></pre></td></tr></table></figure>

<h3 id="id"><a href="#id" class="headerlink" title="id"></a>id</h3><ul>
<li>id相同，执行顺序由上至下</li>
<li>id不同，id值越大优先级越高，越先被执行</li>
</ul>
<h3 id="select-type"><a href="#select-type" class="headerlink" title="select_type"></a>select_type</h3><ul>
<li><code>SIMPLE </code> 简单SELECT，不使用UNION或子查询等</li>
<li><code>PRIMARY </code> 查询中若包含任何复杂的子部分，最外层的SELECT被标记为PRIMARY</li>
<li><code>UNION </code> 在 UNION 查询中的第二个或者之后的 SELECT 语句</li>
<li><code>UNION RESULT </code> UNION的结果</li>
<li><code>SUBQUERY </code> 在子查询中的第一个SELECT</li>
<li><code>DERIVED </code> 衍生表的SELECT，FROM子句的子查询</li>
</ul>
<h3 id="table"><a href="#table" class="headerlink" title="table"></a>table</h3><ul>
<li>对应行正在访问哪一个表，表名或者别名</li>
</ul>
<h3 id="type"><a href="#type" class="headerlink" title="type"></a>type</h3><p>依次从好到差：<code>system</code> &gt; <code>const</code> &gt; <code>eq_ref</code> &gt; <code>ref</code> &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; <code>range</code> &gt; <code>index</code> &gt; <code>ALL</code></p>
<ul>
<li><code>system </code> 表只有一行数据（等于系统表）</li>
<li><code>const </code> 针对主键或唯一索引的等值查询扫描, 最多只返回一行数据</li>
<li><code>eq_ref </code> 主键或唯一索引的所有部分被join连接使用 ，最多只会返回一条符合条件的记录</li>
<li><code>ref </code> 相比eq_ref，不使用唯一索引，而是使用普通索引或者唯一性索引的部分前缀，索引要和某个值相比较，可能会找到多个符合条件的行</li>
<li><code>range </code> 范围扫描通常出现在 in()，between ，&gt; ，&lt;，&gt;&#x3D; 等操作中</li>
<li><code>index </code> 和ALL一样全表扫描，不同就是mysql只需扫描索引树，这通常比ALL快一些</li>
<li><code>ALL </code> 最坏的情况，全表扫描</li>
</ul>
<h3 id="possible-keys"><a href="#possible-keys" class="headerlink" title="possible_keys"></a>possible_keys</h3><ul>
<li>在当前查询中可能使用到的索引. 注意，即使有些索引在 <code>possible_keys</code> 中出现, 但是并不表示此索引会真正地被 MySQL 使用到. MySQL 在查询时具体使用了哪些索引, 由 <code>key</code> 字段决定</li>
</ul>
<h3 id="key"><a href="#key" class="headerlink" title="key"></a>key</h3><ul>
<li>此字段是 MySQL 在当前查询时所真正使用到的索引</li>
</ul>
<h3 id="key-len"><a href="#key-len" class="headerlink" title="key_len"></a>key_len</h3><ul>
<li>索引最大长度是768字节，当字符串过长时，mysql会做一个类似左前缀索引的处理，将前半部分的字符提取出来做索引</li>
</ul>
<h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><ul>
<li>表示上述表的连接匹配条件，即哪些列或常量被用于查找索引列上的值</li>
</ul>
<h3 id="rows"><a href="#rows" class="headerlink" title="rows"></a>rows</h3><ul>
<li>rows列显示MySQL认为它执行查询时必须检查的行数。注意这是一个预估值</li>
</ul>
<h3 id="Extra"><a href="#Extra" class="headerlink" title="Extra"></a>Extra</h3><ul>
<li><code>Using filesort </code> 表示 MySQL 需额外的排序操作, 不能通过索引顺序达到排序效果. 一般有 Using filesort, 都建议优化去掉, 因为这样的查询 CPU 资源消耗大</li>
<li><code>Using temporary </code> 查询中会使用临时表, 一般出现于排序, 分组和多表 join 的情况, 查询效率不高, 建议优化</li>
<li><code>Using index </code> “覆盖索引扫描”, 表示查询在索引树中就可查找所需数据, 不用扫描表数据文件, 往往说明性能不错</li>
<li><code>Using where </code> 表示使用了where过滤</li>
<li><code>Using join buffer </code> 表示使用了连接缓存</li>
<li><code>impossible where </code> where子句的值总是false，不能用来获取任何元组</li>
<li><code>select tables optimized away </code> 在没有GROUP BY子句的情况下，基于索引优化MIN&#x2F;MAX操作或者对于MyISAM存储引擎优化COUNT(*)操作，不必等到执行阶段再进行计算，查询执行计划生成的阶段即完成优化</li>
<li><code>distinct </code> 优化distinct操作，在找到第一匹配的元组后即停止找同样值的动作</li>
</ul>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>数据库</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL_优化：查询优化</title>
    <url>/MySQL/MySQL_%E4%BC%98%E5%8C%96%EF%BC%9A%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h2 id="查询优化"><a href="#查询优化" class="headerlink" title="查询优化"></a>查询优化</h2><h3 id="小表驱动大表"><a href="#小表驱动大表" class="headerlink" title="小表驱动大表"></a>小表驱动大表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 当B表的数据集小于A表的数据集时，用<span class="keyword">IN</span>优于<span class="keyword">EXISTS</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> A <span class="keyword">WHERE</span> id <span class="keyword">IN</span> (<span class="keyword">SELECT</span> id <span class="keyword">FROM</span> B)</span><br><span class="line"></span><br><span class="line"># 当A表的数据集小于B表的数据集时，用<span class="keyword">EXISTS</span>优于<span class="keyword">IN</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> A <span class="keyword">WHERE</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">FROM</span> B <span class="keyword">WHERE</span> B.id <span class="operator">=</span> A.id)</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="ORDER-BY关键字优化"><a href="#ORDER-BY关键字优化" class="headerlink" title="ORDER BY关键字优化"></a>ORDER BY关键字优化</h2><ul>
<li>MySQL支持二种方式的排序，FileSort和Index。Index指MySQL扫描索引本身完成排序，Index方式效率高。</li>
</ul>
<h3 id="Index方式排序"><a href="#Index方式排序" class="headerlink" title="Index方式排序"></a>Index方式排序</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">索引：KEY a_b_c(a, b, c)</span><br><span class="line"></span><br><span class="line"># <span class="keyword">ORDER</span> <span class="keyword">BY</span>能使用索引最左前缀</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> a</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> a, b</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> a, b, c</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> a <span class="keyword">DESC</span>, b <span class="keyword">DESC</span>, c <span class="keyword">DESC</span></span><br><span class="line"></span><br><span class="line"># <span class="keyword">WHERE</span>使用索引的最左前缀定义为常量，则<span class="keyword">ORDER</span> <span class="keyword">BY</span>能使用索引</span><br><span class="line"><span class="keyword">WHERE</span> a <span class="operator">=</span> const <span class="keyword">ORDER</span> <span class="keyword">BY</span> b, c</span><br><span class="line"><span class="keyword">WHERE</span> a <span class="operator">=</span> const <span class="keyword">AND</span> b <span class="operator">=</span> const <span class="keyword">ORDER</span> <span class="keyword">BY</span> c</span><br><span class="line"><span class="keyword">WHERE</span> a <span class="operator">=</span> const <span class="keyword">AND</span> b <span class="operator">&gt;</span> const <span class="keyword">ORDER</span> <span class="keyword">BY</span> b, c</span><br><span class="line"></span><br><span class="line"># 不能使用索引进行排序</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> a <span class="keyword">ASC</span>, b <span class="keyword">DESC</span>, c <span class="keyword">DESC</span>	         # 排序不一致</span><br><span class="line"><span class="keyword">WHERE</span> g <span class="operator">=</span> const <span class="keyword">ORDER</span> <span class="keyword">BY</span> b, c	         # 丢失a索引</span><br><span class="line"><span class="keyword">WHERE</span> a <span class="operator">=</span> const <span class="keyword">ORDER</span> <span class="keyword">BY</span> c	                 # 丢失b索引</span><br><span class="line"><span class="keyword">WHERE</span> a <span class="operator">=</span> const <span class="keyword">ORDER</span> <span class="keyword">BY</span> a, d	         # d不是索引的一部分</span><br><span class="line"><span class="keyword">WHERE</span> a <span class="keyword">in</span> (...) <span class="keyword">ORDER</span> <span class="keyword">BY</span> b, c                    # 对于排序来说，多个相等条件也是范围查询</span><br></pre></td></tr></table></figure>

<h3 id="FileSort方式排序算法"><a href="#FileSort方式排序算法" class="headerlink" title="FileSort方式排序算法"></a>FileSort方式排序算法</h3><ul>
<li><strong>双路排序：</strong>MySQL 4.1之前是使用双路排序,字面意思就是两次扫描磁盘，最终得到数据，读取行指针和orderby列，对他们进行排序，然后扫描已经排序好的列表，按照列表中的值重新从列表中读取对应的数据输出</li>
<li><strong>单路排序：</strong>从磁盘读取查询需要的所有列，按照order by列在buffer对它们进行排序，然后扫描排序后的列表进行输出，它的效率更快一些，避免了第二次读取数据。并且把随机IO变成了顺序IO,但是它会使用更多的空间，因为它把每一行都保存在内存中了。</li>
</ul>
<h3 id="FileSort方式优化策略"><a href="#FileSort方式优化策略" class="headerlink" title="FileSort方式优化策略"></a>FileSort方式优化策略</h3><ul>
<li>不用SELECT *</li>
<li>增大max_length_for_sort_data参数的设置</li>
<li>增大sort_buffer_size参数的设置</li>
</ul>
<h2 id="GROUP-BY关键字优化"><a href="#GROUP-BY关键字优化" class="headerlink" title="GROUP BY关键字优化"></a>GROUP BY关键字优化</h2><ul>
<li>GROUP BY实质是<code>先排序后分组</code>，遵照索引建的最佳左前缀</li>
<li>WHERE高于HAVING，能写在WHERE限定的条件就不要去HAVING限定了</li>
<li>优化方式同ORDER BY</li>
</ul>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>数据库</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL_优化：索引分析</title>
    <url>/MySQL/MySQL_%E4%BC%98%E5%8C%96%EF%BC%9A%E7%B4%A2%E5%BC%95%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h2 id="单表"><a href="#单表" class="headerlink" title="单表"></a>单表</h2><h3 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `article` ( </span><br><span class="line">	`id` <span class="type">INT</span>(<span class="number">10</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT, </span><br><span class="line">	`author_id` <span class="type">INT</span>(<span class="number">10</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span>, </span><br><span class="line">	`category_id` <span class="type">INT</span>(<span class="number">10</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span>, </span><br><span class="line">	`views` <span class="type">INT</span>(<span class="number">10</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span>, </span><br><span class="line">	`comments` <span class="type">INT</span>(<span class="number">10</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span>, </span><br><span class="line">	`title` <span class="type">VARBINARY</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>, </span><br><span class="line">	`content` TEXT <span class="keyword">NOT</span> <span class="keyword">NULL</span> </span><br><span class="line">); </span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `article`(`author_id`, `category_id`, `views`, `comments`, `title`, `content`) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>), (<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;2&#x27;</span>), (<span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;3&#x27;</span>); </span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="优化分析"><a href="#优化分析" class="headerlink" title="优化分析"></a>优化分析</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 问题：type 是 <span class="keyword">ALL</span>，Extra 里出现了 <span class="keyword">Using</span> filesort</span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> id,author_id <span class="keyword">FROM</span> article <span class="keyword">WHERE</span> category_id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">AND</span> comments <span class="operator">&gt;</span> <span class="number">1</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> views <span class="keyword">DESC</span> LIMIT <span class="number">1</span>; </span><br><span class="line"></span><br><span class="line"># 优化<span class="number">1</span>：type 是 <span class="keyword">range</span>，Extra 里出现了 <span class="keyword">Using</span> filesort</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `article` <span class="keyword">ADD</span> INDEX idx_article_ccv ( `category_id` , `comments`, `views` ); </span><br><span class="line"></span><br><span class="line"># 优化<span class="number">2</span>：type 是 <span class="keyword">ref</span></span><br><span class="line"><span class="keyword">DROP</span> INDEX idx_article_ccv <span class="keyword">ON</span> article;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `article` <span class="keyword">ADD</span> INDEX idx_article_cv ( `category_id` , `views` );</span><br></pre></td></tr></table></figure>

<h2 id="两表"><a href="#两表" class="headerlink" title="两表"></a>两表</h2><h3 id="SQL-1"><a href="#SQL-1" class="headerlink" title="SQL"></a>SQL</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `class` (</span><br><span class="line">`id` <span class="type">INT</span>(<span class="number">10</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">`card` <span class="type">INT</span>(<span class="number">10</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `book` (</span><br><span class="line">`bookid` <span class="type">INT</span>(<span class="number">10</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">`card` <span class="type">INT</span>(<span class="number">10</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`bookid`)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> class(card) <span class="keyword">VALUES</span>(<span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> (RAND() <span class="operator">*</span> <span class="number">10</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> class(card) <span class="keyword">VALUES</span>(<span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> (RAND() <span class="operator">*</span> <span class="number">10</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> class(card) <span class="keyword">VALUES</span>(<span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> (RAND() <span class="operator">*</span> <span class="number">10</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> class(card) <span class="keyword">VALUES</span>(<span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> (RAND() <span class="operator">*</span> <span class="number">10</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> class(card) <span class="keyword">VALUES</span>(<span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> (RAND() <span class="operator">*</span> <span class="number">10</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> class(card) <span class="keyword">VALUES</span>(<span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> (RAND() <span class="operator">*</span> <span class="number">10</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> class(card) <span class="keyword">VALUES</span>(<span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> (RAND() <span class="operator">*</span> <span class="number">10</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> class(card) <span class="keyword">VALUES</span>(<span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> (RAND() <span class="operator">*</span> <span class="number">10</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> class(card) <span class="keyword">VALUES</span>(<span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> (RAND() <span class="operator">*</span> <span class="number">10</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> class(card) <span class="keyword">VALUES</span>(<span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> (RAND() <span class="operator">*</span> <span class="number">10</span>)));</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> book(card) <span class="keyword">VALUES</span>(<span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> (RAND() <span class="operator">*</span> <span class="number">10</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> book(card) <span class="keyword">VALUES</span>(<span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> (RAND() <span class="operator">*</span> <span class="number">10</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> book(card) <span class="keyword">VALUES</span>(<span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> (RAND() <span class="operator">*</span> <span class="number">10</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> book(card) <span class="keyword">VALUES</span>(<span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> (RAND() <span class="operator">*</span> <span class="number">10</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> book(card) <span class="keyword">VALUES</span>(<span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> (RAND() <span class="operator">*</span> <span class="number">10</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> book(card) <span class="keyword">VALUES</span>(<span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> (RAND() <span class="operator">*</span> <span class="number">10</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> book(card) <span class="keyword">VALUES</span>(<span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> (RAND() <span class="operator">*</span> <span class="number">10</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> book(card) <span class="keyword">VALUES</span>(<span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> (RAND() <span class="operator">*</span> <span class="number">10</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> book(card) <span class="keyword">VALUES</span>(<span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> (RAND() <span class="operator">*</span> <span class="number">10</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> book(card) <span class="keyword">VALUES</span>(<span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> (RAND() <span class="operator">*</span> <span class="number">10</span>)));</span><br></pre></td></tr></table></figure>

<h3 id="优化分析-1"><a href="#优化分析-1" class="headerlink" title="优化分析"></a>优化分析</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 问题：两表type 是 <span class="keyword">ALL</span> </span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> class <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> book <span class="keyword">ON</span> class.card <span class="operator">=</span> book.card; </span><br><span class="line"></span><br><span class="line"># 优化<span class="number">1</span>：左表type 是 index，右表type 是 <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `class` <span class="keyword">ADD</span> INDEX idx_card ( `card`); </span><br><span class="line"></span><br><span class="line"># 优化<span class="number">2</span>：左表type 是 <span class="keyword">ALL</span>，右表type 是 <span class="keyword">ref</span></span><br><span class="line"><span class="keyword">DROP</span> INDEX idx_card <span class="keyword">ON</span> class; </span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `book` <span class="keyword">ADD</span> INDEX idx_card ( `card`); </span><br></pre></td></tr></table></figure>

<h2 id="三表"><a href="#三表" class="headerlink" title="三表"></a>三表</h2><h3 id="SQL-2"><a href="#SQL-2" class="headerlink" title="SQL"></a>SQL</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `phone` (</span><br><span class="line">`phoneid` <span class="type">INT</span>(<span class="number">10</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">`card` <span class="type">INT</span>(<span class="number">10</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`phoneid`)</span><br><span class="line">) ENGINE <span class="operator">=</span> INNODB;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> phone(card) <span class="keyword">VALUES</span>(<span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> (RAND() <span class="operator">*</span> <span class="number">10</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> phone(card) <span class="keyword">VALUES</span>(<span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> (RAND() <span class="operator">*</span> <span class="number">10</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> phone(card) <span class="keyword">VALUES</span>(<span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> (RAND() <span class="operator">*</span> <span class="number">10</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> phone(card) <span class="keyword">VALUES</span>(<span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> (RAND() <span class="operator">*</span> <span class="number">10</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> phone(card) <span class="keyword">VALUES</span>(<span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> (RAND() <span class="operator">*</span> <span class="number">10</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> phone(card) <span class="keyword">VALUES</span>(<span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> (RAND() <span class="operator">*</span> <span class="number">10</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> phone(card) <span class="keyword">VALUES</span>(<span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> (RAND() <span class="operator">*</span> <span class="number">10</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> phone(card) <span class="keyword">VALUES</span>(<span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> (RAND() <span class="operator">*</span> <span class="number">10</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> phone(card) <span class="keyword">VALUES</span>(<span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> (RAND() <span class="operator">*</span> <span class="number">10</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> phone(card) <span class="keyword">VALUES</span>(<span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> (RAND() <span class="operator">*</span> <span class="number">10</span>)));</span><br></pre></td></tr></table></figure>

<h3 id="优化分析-2"><a href="#优化分析-2" class="headerlink" title="优化分析"></a>优化分析</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 问题：三表type 是 <span class="keyword">ALL</span> </span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> class <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> book <span class="keyword">ON</span> class.card<span class="operator">=</span>book.card <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> phone <span class="keyword">ON</span> book.card <span class="operator">=</span> phone.card; </span><br><span class="line"></span><br><span class="line"># 优化<span class="number">1</span>：左表type 是 <span class="keyword">ALL</span>，两个右表type 是 <span class="keyword">ref</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `phone` <span class="keyword">ADD</span> INDEX idx_card ( `card`); </span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `book` <span class="keyword">ADD</span> INDEX idx_card ( `card`); </span><br></pre></td></tr></table></figure>














]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>数据库</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Git：常用命令</title>
    <url>/Git/Git%EF%BC%9A%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="初始化配置"><a href="#初始化配置" class="headerlink" title="初始化配置"></a>初始化配置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询配置信息</span></span><br><span class="line">git config --list                                <span class="comment"># 列出当前配置</span></span><br><span class="line">git config --<span class="built_in">local</span> --list                        <span class="comment"># 列出仓库配置</span></span><br><span class="line">git config --global --list                       <span class="comment"># 列出全局配置</span></span><br><span class="line">git config --system --list                       <span class="comment"># 列出系统配置</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置用户信息</span></span><br><span class="line">git config --global user.name &lt;user&gt;             <span class="comment"># 配置用户名</span></span><br><span class="line">git config --global user.email &lt;email&gt;           <span class="comment"># 配置用户邮箱</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 其他配置</span></span><br><span class="line">git config --global merge.tool vimdiff           <span class="comment"># 配置解决冲突时使用哪种差异分析工具，比如要使用vimdiff</span></span><br><span class="line">git config --global alias.co checkout    　　　   <span class="comment"># 配置别名</span></span><br><span class="line">git config --global color.ui auto    　　　　　　  <span class="comment"># 配置git命令输出为彩色的</span></span><br><span class="line">git config --global core.editor vi    　　　　　　 <span class="comment"># 配置git使用的文本编辑器</span></span><br><span class="line">git config --global credential.helper cache      <span class="comment"># 配置到缓存 默认15分钟</span></span><br><span class="line">git config --global credential.helper <span class="string">&#x27;cache --timeout=3600&#x27;</span>      <span class="comment"># 修改缓存时间</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 增加文件</span></span><br><span class="line">git add .                                        <span class="comment"># 添加当前目录的所有文件到暂存区</span></span><br><span class="line">git add &lt;file&gt;...                                <span class="comment"># 添加指定文件到暂存区</span></span><br><span class="line">git add &lt;<span class="built_in">dir</span>&gt;                                    <span class="comment"># 添加指定目录到暂存区，包括子目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除文件</span></span><br><span class="line">git <span class="built_in">rm</span> &lt;file&gt;...                                 <span class="comment"># 将工作区，暂存区文件删除</span></span><br><span class="line">git <span class="built_in">rm</span> --cached &lt;file&gt;                           <span class="comment"># 将暂存区文件删除，工作区保留</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交文件</span></span><br><span class="line">git commit -m &lt;message&gt;                          <span class="comment"># 提交暂存区的所有文件到本地库</span></span><br><span class="line">git commit &lt;file&gt;... -m &lt;message&gt;                <span class="comment"># 提交暂存区的指定文件到本地库</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 撤销文件</span></span><br><span class="line"><span class="comment"># reset [&lt;mode&gt;] 参数说明：</span></span><br><span class="line"><span class="comment">#   - soft：在本地库移动 HEAD 指针</span></span><br><span class="line"><span class="comment">#   - mixed：在本地库移动 HEAD 指针, 重置暂存区</span></span><br><span class="line"><span class="comment">#   - hard：在本地库移动 HEAD 指针, 重置暂存区, 重置工作区</span></span><br><span class="line">git reset --hard HEAD                            <span class="comment"># 将暂存区文件恢复到工作区</span></span><br><span class="line">git reset --hard &lt;<span class="built_in">id</span>&gt;                            <span class="comment"># 基于索引值, 可前进后退</span></span><br><span class="line">git reset --hard HEAD^                           <span class="comment"># 使用^符号：只能前进 (一个^表示前进一步，n 个表示前进 n 步)</span></span><br><span class="line">git reset --hard HEAD~n                          <span class="comment"># 使用~符号：只能前进 (表示前进 n 步)</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 比较文件</span></span><br><span class="line">git diff &lt;file&gt;                                  <span class="comment"># 比较工作区和暂存区文件差异 </span></span><br><span class="line">git diff &lt;<span class="built_in">id</span>&gt; &lt;file&gt;                             <span class="comment"># 比较工作区和本地库文件差异 </span></span><br><span class="line">git diff &lt;id1&gt; &lt;id2&gt;                             <span class="comment"># 比较本地库两个文件差异</span></span><br><span class="line">git diff &lt;branch1&gt; &lt;branch2&gt;                     <span class="comment"># 比较两个分支之间的文件差异</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重命名文件  </span></span><br><span class="line">git <span class="built_in">mv</span> &lt;file&gt; &lt;renamefile&gt;                       <span class="comment"># 重命名文件  </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看工作区、暂存区状态</span></span><br><span class="line">git status                                       <span class="comment"># 查看所有文件状态</span></span><br><span class="line">git status &lt;file&gt;                                <span class="comment"># 查看指定文件状态</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看历史记录</span></span><br><span class="line">git <span class="built_in">log</span>                                          <span class="comment"># 查看所有历史记录 (多屏显示控制方式：空格向下翻页, b 向上翻页, q 退出)    </span></span><br><span class="line">git <span class="built_in">log</span> &lt;file&gt;                                   <span class="comment"># 查看指定文件历史记录  </span></span><br><span class="line">git <span class="built_in">log</span> &lt;<span class="built_in">dir</span>&gt;                                    <span class="comment"># 查看指定目录历史记录</span></span><br><span class="line">git <span class="built_in">log</span> --pretty=oneline                         <span class="comment"># 每条记录只显示一行，只能查看之前历史记录</span></span><br><span class="line">git <span class="built_in">log</span> --oneline                                <span class="comment"># 每条记录只显示一行，只能查看之前历史记录</span></span><br><span class="line">git reflog                                       <span class="comment"># 查看所有分支的所有操作记录</span></span><br></pre></td></tr></table></figure>

<h2 id="远程操作"><a href="#远程操作" class="headerlink" title="远程操作"></a>远程操作</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建远程库地址别名</span></span><br><span class="line">git remote add &lt;remote&gt; &lt;url&gt;                    <span class="comment"># 创建远程库url别名</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改远程库地址url</span></span><br><span class="line">git remote set-url &lt;remote&gt; &lt;url&gt;                <span class="comment"># 修改远程库url地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程库地址别名</span></span><br><span class="line">git remote <span class="built_in">rm</span> &lt;remote&gt;                           <span class="comment"># 删除远程库url别名</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看远程库</span></span><br><span class="line">git remote -v                                    <span class="comment"># 查看所有远程库</span></span><br><span class="line">git remote show &lt;remote&gt;                         <span class="comment"># 查看某个远程仓库的信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送远程库</span></span><br><span class="line">git push                                         <span class="comment"># 推送本地所有分支到远程仓库</span></span><br><span class="line">git push &lt;remote&gt; &lt;branch&gt;                       <span class="comment"># 推送本地指定分支到远程仓库</span></span><br><span class="line">git push &lt;remote&gt; &lt;local-branch&gt;:&lt;remote-branch&gt; <span class="comment"># 推送本地指定分支到远程仓库指定分支</span></span><br><span class="line">git push &lt;remote&gt; --force                        <span class="comment"># 强行推送当前分支到远程仓库，即使有冲突</span></span><br><span class="line">git push &lt;remote&gt; --all                          <span class="comment"># 推送所有分支到远程仓库</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 克隆远程库</span></span><br><span class="line">git <span class="built_in">clone</span> &lt;url&gt;                                  <span class="comment"># 克隆项目(1.完整的把远程库下载到本地; 2.创建&lt;remote&gt;远程地址别名; 3.初始化本地库)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 拉取远程库</span></span><br><span class="line">git fetch &lt;remote&gt; &lt;branch&gt;                      <span class="comment"># 从远程库拉取指定分支到本地库</span></span><br><span class="line">git pull                                         <span class="comment"># 从远程库拉取所有分支到本地库，并合并到工作区(pull = fetch + merge)</span></span><br><span class="line">git pull &lt;remote&gt; &lt;branch&gt;                       <span class="comment"># 从远程库拉取指定分支到本地库，并合并到工作区(pull = fetch + merge)</span></span><br></pre></td></tr></table></figure>

<h2 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看分支</span></span><br><span class="line">git branch                                       <span class="comment"># 列出所有本地分支</span></span><br><span class="line">git branch -r                                    <span class="comment"># 列出所有远程分支</span></span><br><span class="line">git branch -a                                    <span class="comment"># 列出所有本地和远程分支</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建分支</span></span><br><span class="line">git branch &lt;branch&gt;                              <span class="comment"># 新建本地分支，但依然停留在当前分支</span></span><br><span class="line">git checkout -b &lt;branch&gt;                         <span class="comment"># 新建本地分支，并切换到该分支</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line">git branch -d &lt;branch&gt;                           <span class="comment"># 删除本地分支</span></span><br><span class="line">git branch -dr &lt;remote/branch&gt;                   <span class="comment"># 删除远程分支</span></span><br><span class="line">git push &lt;remote&gt; --delete &lt;branch&gt;              <span class="comment"># 删除远程分支</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换分支</span></span><br><span class="line">git checkout &lt;branch&gt;                            <span class="comment"># 切换到指定分支</span></span><br><span class="line">git checkout -                                   <span class="comment"># 切换到上一个分支</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并分支</span></span><br><span class="line">git merge &lt;branch&gt;                               <span class="comment"># 合并指定分支到当前分支</span></span><br></pre></td></tr></table></figure>

<h2 id="版本操作"><a href="#版本操作" class="headerlink" title="版本操作"></a>版本操作</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看版本</span></span><br><span class="line">git tag                                          <span class="comment"># 查看本地库版本</span></span><br><span class="line">git tag -r                                       <span class="comment"># 查看远程库版本</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建版本</span></span><br><span class="line">git tag &lt;tag&gt;                                    <span class="comment"># 创建本地库版本</span></span><br><span class="line">git tag -a &lt;tag&gt; -m &lt;message&gt;                    <span class="comment"># 创建本地库版本(带注释)</span></span><br><span class="line">git push &lt;remote&gt; &lt;tag&gt;                          <span class="comment"># 创建远程库版本(本地库版本push到远程)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除版本</span></span><br><span class="line">git tag -d &lt;name&gt;                                <span class="comment"># 删除本地库版本</span></span><br><span class="line">git push &lt;remote&gt; --delete tag &lt;tag&gt;             <span class="comment"># 删除远程库版本</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换版本</span></span><br><span class="line">git checkout &lt;tag&gt;                               <span class="comment"># 切换版本</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 拉取远程版本</span></span><br><span class="line">git pull &lt;remote&gt; --tags                         <span class="comment"># 拉取远程库所有版本到本地</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送远程版本</span></span><br><span class="line">git push &lt;remote&gt; &lt;tag&gt;                          <span class="comment"># 推送本地库指定版本到远程</span></span><br><span class="line">git push &lt;remote&gt; --tags                         <span class="comment"># 推送本地库所有版本到远程</span></span><br></pre></td></tr></table></figure>

<h2 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">help</span> &lt;<span class="built_in">command</span>&gt;                               <span class="comment"># 显示command的help</span></span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://git-scm.com/docs">Git文档</a></li>
<li><a href="https://gitee.com/progit/">Pro Git 中文版</a></li>
<li><a href="http://rogerdudler.github.io/git-guide/index.zh.html">Git 简明指南</a></li>
<li><a href="http://gitbook.liuhui998.com/index.html">Git Community Book 中文版</a></li>
<li><a href="http://marklodato.github.io/visual-git-guide/index-zh-cn.html">图解Git</a></li>
</ul>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>版本控制</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git：配置多个SSH-Key</title>
    <url>/Git/Git%EF%BC%9A%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AASSH-Key/</url>
    <content><![CDATA[<h2 id="生成多个网站使用的SSH-Key"><a href="#生成多个网站使用的SSH-Key" class="headerlink" title="生成多个网站使用的SSH-Key"></a>生成多个网站使用的SSH-Key</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;github&quot;</span> -f ~/.ssh/id_rsa_github</span><br><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;gitee&quot;</span> -f ~/.ssh/id_rsa_gitee</span><br><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;gitlab&quot;</span> -f ~/.ssh/id_rsa_gitlab</span><br></pre></td></tr></table></figure>

<h2 id="添加私钥"><a href="#添加私钥" class="headerlink" title="添加私钥"></a>添加私钥</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-add ~/.ssh/id_rsa_github</span><br><span class="line">ssh-add ~/.ssh/id_rsa_gitee</span><br><span class="line">ssh-add ~/.ssh/id_rsa_gitlab</span><br></pre></td></tr></table></figure>
<p>注：<br>    执行ssh-add时提示”Could not open a connection to your authentication agent”，先执行ssh-agent bash<br>    ssh-add -l 查询私钥列表<br>    ssh-add -D 清空私钥列表</p>
<h2 id="添加配置文件"><a href="#添加配置文件" class="headerlink" title="添加配置文件"></a>添加配置文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># .ssh目录下创建config文件，添加以下内容(Host、HostName 填写git服务器的域名,  IdentityFile指定私钥的路径)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># github</span></span><br><span class="line">Host github.com</span><br><span class="line">HostName ssh.github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_github</span><br><span class="line">Port 443</span><br><span class="line"></span><br><span class="line"><span class="comment"># gitee </span></span><br><span class="line">Host gitee.com</span><br><span class="line">HostName gitee.com </span><br><span class="line">PreferredAuthentications publickey </span><br><span class="line">IdentityFile ~/.ssh/id_rsa_gitee</span><br><span class="line"></span><br><span class="line"><span class="comment"># gitlab</span></span><br><span class="line">Host gitlab.com</span><br><span class="line">HostName gitlab.com  </span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_gitlab</span><br></pre></td></tr></table></figure>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br><span class="line">ssh -T git@gitee.com</span><br><span class="line">ssh -T git@gitlab.com</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>版本控制</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式：七大原则</title>
    <url>/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99/</url>
    <content><![CDATA[<h2 id="设计模式目的"><a href="#设计模式目的" class="headerlink" title="设计模式目的"></a>设计模式目的</h2><ul>
<li><code>重用性</code>  相同功能的代码，不用多次编写</li>
<li><code>可读性</code> 编程规范性, 便于其他程序员的阅读和理解</li>
<li><code>可扩展性</code> 当需要增加新的功能时，非常的方便，称为”可维护”</li>
<li><code>可靠性</code> 当我们增加新的功能后，对原来的功能没有影响</li>
<li>使程序呈现<code>高内聚</code>，<code>低耦合</code>的特性</li>
</ul>
<span id="more"></span>

<h2 id="设计模式七大原则"><a href="#设计模式七大原则" class="headerlink" title="设计模式七大原则"></a>设计模式七大原则</h2><h3 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h3><ul>
<li><code>Single Responsibility Principle (SRP)</code> 即一个类应该只负责一项职责</li>
</ul>
<h4 id="问题案例"><a href="#问题案例" class="headerlink" title="问题案例"></a>问题案例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. 违反了单一职责原则</span></span><br><span class="line"><span class="comment"> * 2. 解决的方案非常的简单，根据交通工具运行方法不同，分解成不同类即可</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingleResponsibility</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Vehicle</span> <span class="variable">vehicle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Vehicle</span>();</span><br><span class="line">        vehicle.run(<span class="string">&quot;汽车&quot;</span>);</span><br><span class="line">        vehicle.run(<span class="string">&quot;摩托车&quot;</span>);</span><br><span class="line">        vehicle.run(<span class="string">&quot;飞机&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String vehicle)</span> &#123;</span><br><span class="line">        System.out.println(vehicle + <span class="string">&quot; 在公路上行驶....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="解决案例一"><a href="#解决案例一" class="headerlink" title="解决案例一"></a>解决案例一</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. 遵守单一职责原则</span></span><br><span class="line"><span class="comment"> * 2. 但是这样做的改动很大，即将类分解，同时修改客户端</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingleResponsibility</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">RoadVehicle</span> <span class="variable">roadVehicle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RoadVehicle</span>();</span><br><span class="line">        roadVehicle.run(<span class="string">&quot;汽车&quot;</span>);</span><br><span class="line">        roadVehicle.run(<span class="string">&quot;摩托车&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">AirVehicle</span> <span class="variable">airVehicle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AirVehicle</span>();</span><br><span class="line">        airVehicle.run(<span class="string">&quot;飞机&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RoadVehicle</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String vehicle)</span> &#123;</span><br><span class="line">        System.out.println(vehicle + <span class="string">&quot; 在公路上行驶....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AirVehicle</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String vehicle)</span> &#123;</span><br><span class="line">        System.out.println(vehicle + <span class="string">&quot; 在天空上行驶....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="解决案例二"><a href="#解决案例二" class="headerlink" title="解决案例二"></a>解决案例二</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. 没有在类级别上遵守单一职责原则，但是在方法级别上仍然是遵守单一职责</span></span><br><span class="line"><span class="comment"> * 2. 这种修改方法没有对原来的类做大的修改，只是增加方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingleResponsibility</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Vehicle</span> <span class="variable">vehicle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Vehicle</span>();</span><br><span class="line">        vehicle.roadRun(<span class="string">&quot;汽车&quot;</span>);</span><br><span class="line">        vehicle.roadRun(<span class="string">&quot;摩托车&quot;</span>);</span><br><span class="line">        vehicle.airRun(<span class="string">&quot;飞机&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">roadRun</span><span class="params">(String vehicle)</span> &#123;</span><br><span class="line">        System.out.println(vehicle + <span class="string">&quot; 在公路上行驶....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">airRun</span><span class="params">(String vehicle)</span> &#123;</span><br><span class="line">        System.out.println(vehicle + <span class="string">&quot; 在天空上行驶....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h3><ul>
<li><code>Interface Segregation Principle (ISP)</code> 使用多个专门的接口，而不使用单一的总接口，即客户端不应该依赖那些它不需要的接口</li>
</ul>
<h4 id="问题案例-1"><a href="#问题案例-1" class="headerlink" title="问题案例"></a>问题案例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 类A通过接口I会依赖(使用)类B，但类A中只会使用到接口的1、2、3三个方法</span></span><br><span class="line"><span class="comment"> * 类C通过接口I会依赖(使用)类D，但类C中只会使用到接口的1、4、5三个方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterfaceSegregation</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        a.depend1(<span class="keyword">new</span> <span class="title class_">B</span>());</span><br><span class="line">        a.depend2(<span class="keyword">new</span> <span class="title class_">B</span>());</span><br><span class="line">        a.depend3(<span class="keyword">new</span> <span class="title class_">B</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">C</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">C</span>();</span><br><span class="line">        c.depend1(<span class="keyword">new</span> <span class="title class_">D</span>());</span><br><span class="line">        c.depend4(<span class="keyword">new</span> <span class="title class_">D</span>());</span><br><span class="line">        c.depend5(<span class="keyword">new</span> <span class="title class_">D</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">I</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method3</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method4</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method5</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend1</span><span class="params">(I i)</span>&#123;</span><br><span class="line">        i.method1();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend2</span><span class="params">(I i)</span>&#123;</span><br><span class="line">        i.method2();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend3</span><span class="params">(I i)</span>&#123;</span><br><span class="line">        i.method3();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">implements</span> <span class="title class_">I</span>&#123;</span><br><span class="line">    <span class="comment">// 类 B 只需要实现方法 1，2, 3，而其它方法它并不需要，但是也需要实现</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;类 B 实现接口 I 的方法 1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;类 B 实现接口 I 的方法 2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method3</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;类 B 实现接口 I 的方法 3&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method4</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method5</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend1</span><span class="params">(I i)</span>&#123;</span><br><span class="line">        i.method1();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend4</span><span class="params">(I i)</span>&#123;</span><br><span class="line">        i.method4();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend5</span><span class="params">(I i)</span>&#123;</span><br><span class="line">        i.method5();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span> <span class="keyword">implements</span> <span class="title class_">I</span>&#123;</span><br><span class="line">    <span class="comment">// 类 D 只需要实现方法 1，4，5，而其它方法它并不需要，但是也需要实现</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;类 D 实现接口 I 的方法 1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method3</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method4</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;类 D 实现接口 I 的方法 4&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method5</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;类 D 实现接口 I 的方法 5&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="解决案例"><a href="#解决案例" class="headerlink" title="解决案例"></a>解决案例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将接口I拆分为独立的几个接口，类A和类C分别与他们需要的接口建立依赖关系。也就是采用接口隔离原则</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterfaceSegregation</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        a.depend1(<span class="keyword">new</span> <span class="title class_">B</span>());</span><br><span class="line">        a.depend2(<span class="keyword">new</span> <span class="title class_">B</span>());</span><br><span class="line">        a.depend3(<span class="keyword">new</span> <span class="title class_">B</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">C</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">C</span>();</span><br><span class="line">        c.depend1(<span class="keyword">new</span> <span class="title class_">D</span>());</span><br><span class="line">        c.depend4(<span class="keyword">new</span> <span class="title class_">D</span>());</span><br><span class="line">        c.depend5(<span class="keyword">new</span> <span class="title class_">D</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">I1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">I2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method3</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">I3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method4</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method5</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend1</span><span class="params">(I1 i)</span>&#123;</span><br><span class="line">        i.method1();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend2</span><span class="params">(I2 i)</span>&#123;</span><br><span class="line">        i.method2();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend3</span><span class="params">(I2 i)</span>&#123;</span><br><span class="line">        i.method3();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">implements</span> <span class="title class_">I1</span>, I2&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;类 B 实现接口 I1 的方法 1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;类 B 实现接口 I2 的方法 2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method3</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;类 B 实现接口 I2 的方法 3&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend1</span><span class="params">(I1 i)</span>&#123;</span><br><span class="line">        i.method1();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend4</span><span class="params">(I3 i)</span>&#123;</span><br><span class="line">        i.method4();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend5</span><span class="params">(I3 i)</span>&#123;</span><br><span class="line">        i.method5();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span> <span class="keyword">implements</span> <span class="title class_">I1</span>, I3&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;类 D 实现接口 I1 的方法 1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method4</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;类 D 实现接口 I3 的方法 4&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method5</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;类 D 实现接口 I3 的方法 5&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="依赖倒转原则"><a href="#依赖倒转原则" class="headerlink" title="依赖倒转原则"></a>依赖倒转原则</h3><ul>
<li><code>Dependency Inversion Principle (DIP)</code> 抽象不应该依赖于细节，细节应当依赖于抽象。换言之，要针对接口编程，而不是针对实现编程</li>
</ul>
<h4 id="问题案例-2"><a href="#问题案例-2" class="headerlink" title="问题案例"></a>问题案例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如果获取的对象是微信，短信等等，则新增类，同时 Perons 也要增加相应的接收方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DependenceInversion</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        person.receive(<span class="keyword">new</span> <span class="title class_">Email</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Email</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;电子邮件信息...&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive</span><span class="params">(Email email)</span> &#123;</span><br><span class="line">        System.out.println(email.getInfo());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="解决案例-1"><a href="#解决案例-1" class="headerlink" title="解决案例"></a>解决案例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 引入一个抽象的接口 IReceiver 表示接收者, 这样 Person 类与接口 IReceiver 发生依赖</span></span><br><span class="line"><span class="comment"> * 让他们各自实现 IReceiver 接口, 这样就符合依赖倒置原则了</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DependenceInversion</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        person.receive(<span class="keyword">new</span> <span class="title class_">Email</span>());</span><br><span class="line">        person.receive(<span class="keyword">new</span> <span class="title class_">SMS</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IReceiver</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Email</span> <span class="keyword">implements</span> <span class="title class_">IReceiver</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;电子邮件信息...&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SMS</span> <span class="keyword">implements</span> <span class="title class_">IReceiver</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;短信信息...&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive</span><span class="params">(IReceiver iReceiver)</span> &#123;</span><br><span class="line">        System.out.println(iReceiver.getInfo());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h3><ul>
<li><code>Liskov Substitution Principle (LSP)</code> 所有引用基类（父类） 的地方必须能透明地使用其子类的对象</li>
</ul>
<h4 id="问题案例-3"><a href="#问题案例-3" class="headerlink" title="问题案例"></a>问题案例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 类B无意中重写了父类的方法，造成原有功能出现错误</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LiskovSubstitution</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;11-3=&quot;</span> + a.func1(<span class="number">11</span>, <span class="number">3</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;1-8=&quot;</span> + a.func1(<span class="number">1</span>, <span class="number">8</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------&quot;</span>);</span><br><span class="line">        <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;11-3=&quot;</span> + b.func1(<span class="number">11</span>, <span class="number">3</span>)); <span class="comment">//这里本意其实是要求出 11-3</span></span><br><span class="line">        System.out.println(<span class="string">&quot;1-8=&quot;</span> + b.func1(<span class="number">1</span>, <span class="number">8</span>)); <span class="comment">//这里本意其实是要求出 1-8</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">func1</span><span class="params">(<span class="type">int</span> num1, <span class="type">int</span> num2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> num1 - num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">func1</span><span class="params">(<span class="type">int</span> num1, <span class="type">int</span> num2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> num1 + num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="解决案例-2"><a href="#解决案例-2" class="headerlink" title="解决案例"></a>解决案例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 原来的父类和子类都继承一个更通俗的基类，原有的继承关系去掉，采用依赖，聚合，组合等 关系代替</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LiskovSubstitution</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;11-3=&quot;</span> + a.func1(<span class="number">11</span>, <span class="number">3</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;1-8=&quot;</span> + a.func1(<span class="number">1</span>, <span class="number">8</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------&quot;</span>);</span><br><span class="line">        <span class="comment">//因为 B 类不再继承 A 类，因此调用者，不会再 func1 是求减法</span></span><br><span class="line">        <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;11+3=&quot;</span> + b.func1(<span class="number">11</span>, <span class="number">3</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;1+8=&quot;</span> + b.func1(<span class="number">1</span>, <span class="number">8</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用组合仍然可以使用到 A 类相关方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;11-3=&quot;</span> + b.func2(<span class="number">11</span>, <span class="number">3</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">extends</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">func1</span><span class="params">(<span class="type">int</span> num1, <span class="type">int</span> num2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> num1 - num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">func1</span><span class="params">(<span class="type">int</span> num1, <span class="type">int</span> num2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> num1 + num2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">func2</span><span class="params">(<span class="type">int</span> num1, <span class="type">int</span> num2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a.func1(num1, num2); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h3><ul>
<li><code>Open-Closed Principle (OCP)</code> 一个软件实体应当对扩展开放，对修改关闭。即软件实体应尽量在不修改原有代码的情况下进行扩展</li>
</ul>
<h4 id="问题案例-4"><a href="#问题案例-4" class="headerlink" title="问题案例"></a>问题案例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 违反了开闭原则，对扩展开放(提供方)，对修改关闭(使用方)</span></span><br><span class="line"><span class="comment"> * 即当增加新图形类的时候，尽量不修改代码，或者尽可能少修改代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OpenClosed</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">GraphicEditor</span> <span class="variable">graphicEditor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GraphicEditor</span>();</span><br><span class="line">        graphicEditor.drawShape(<span class="keyword">new</span> <span class="title class_">Rectangle</span>());</span><br><span class="line">        graphicEditor.drawShape(<span class="keyword">new</span> <span class="title class_">Circle</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="type">int</span> type;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    Rectangle() &#123;</span><br><span class="line">        <span class="built_in">super</span>.type = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    Circle() &#123;</span><br><span class="line">        <span class="built_in">super</span>.type = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GraphicEditor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drawShape</span><span class="params">(Shape s)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (s.type == <span class="number">1</span>)</span><br><span class="line">            drawRectangle(s);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (s.type == <span class="number">2</span>)</span><br><span class="line">            drawCircle(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drawRectangle</span><span class="params">(Shape r)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;绘制矩形...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drawCircle</span><span class="params">(Shape r)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;绘制圆形...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="解决案例-3"><a href="#解决案例-3" class="headerlink" title="解决案例"></a>解决案例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 把创建 Shape 类做成抽象类，并提供一个抽象的 draw 方法, 让子类去实现即可</span></span><br><span class="line"><span class="comment"> * 当增加新图形类时, 只需继承 Shape 并实现 draw 方法即可, 使用方的代码就不需要修改, 满足了开闭原则</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OpenClosed</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">GraphicEditor</span> <span class="variable">graphicEditor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GraphicEditor</span>();</span><br><span class="line">        graphicEditor.drawShape(<span class="keyword">new</span> <span class="title class_">Rectangle</span>());</span><br><span class="line">        graphicEditor.drawShape(<span class="keyword">new</span> <span class="title class_">Circle</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;绘制矩形...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;绘制圆形...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GraphicEditor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drawShape</span><span class="params">(Shape s)</span> &#123;</span><br><span class="line">        s.draw();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h3><ul>
<li><code>Law Of Demeter (LOD)</code> 一个对象就尽可能少的去了解其它对象，从而实现松耦合</li>
</ul>
<h4 id="问题案例-5"><a href="#问题案例-5" class="headerlink" title="问题案例"></a>问题案例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 迪米特法则更简单的定义：只与直接的朋友通信</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 直接的朋友：</span></span><br><span class="line"><span class="comment"> *  出现在成员变量，方法参数，方法返回值中的类称为直接的朋友</span></span><br><span class="line"><span class="comment"> *  出现在局部变量中的类不是直接的朋友。也就是说，陌生的类最好不要以局部变量的形式出现在类的内部</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LawOfDemeter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">CompanyManager</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CompanyManager</span>();</span><br><span class="line">        e.printAllEmployee(<span class="keyword">new</span> <span class="title class_">SubCompanyManager</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(String id)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SubEmployee</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(String id)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SubCompanyManager</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;SubEmployee&gt; <span class="title function_">getSubEmployee</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;SubEmployee&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)&#123;</span><br><span class="line">            <span class="type">SubEmployee</span> <span class="variable">emp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubEmployee</span>();</span><br><span class="line">            emp.setId(<span class="string">&quot;分公司员工：&quot;</span>+i);</span><br><span class="line">            list.add(emp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CompanyManager</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Employee&gt; <span class="title function_">getEmployee</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Employee&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Employee&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++)&#123;</span><br><span class="line">            <span class="type">Employee</span> <span class="variable">emp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>();</span><br><span class="line">            emp.setId(<span class="string">&quot;总公司员工：&quot;</span>+i);</span><br><span class="line">            list.add(emp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1. 这里的 SubEmployee 以局部变量方式出现，不是 CompanyManager 的直接朋友</span></span><br><span class="line"><span class="comment">     * 2. 违反了 迪米特法则</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printAllEmployee</span><span class="params">(SubCompanyManager sub)</span>&#123;</span><br><span class="line">        List&lt;SubEmployee&gt; list1 = sub.getSubEmployee();</span><br><span class="line">        <span class="keyword">for</span>(SubEmployee e:list1)&#123;</span><br><span class="line">            System.out.println(e.getId());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;Employee&gt; list2 = <span class="built_in">this</span>.getEmployee();</span><br><span class="line">        <span class="keyword">for</span>(Employee e:list2)&#123;</span><br><span class="line">            System.out.println(e.getId());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="解决案例-4"><a href="#解决案例-4" class="headerlink" title="解决案例"></a>解决案例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 为分公司增加了打印人员ID的方法，总公司直接调用来打印，从而避免了与分公司的员工发生耦合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LawOfDemeter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">CompanyManager</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CompanyManager</span>();</span><br><span class="line">        e.printAllEmployee(<span class="keyword">new</span> <span class="title class_">SubCompanyManager</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(String id)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SubEmployee</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(String id)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SubCompanyManager</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;SubEmployee&gt; <span class="title function_">getSubEmployee</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;SubEmployee&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)&#123;</span><br><span class="line">            <span class="type">SubEmployee</span> <span class="variable">emp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubEmployee</span>();</span><br><span class="line">            emp.setId(<span class="string">&quot;分公司员工：&quot;</span>+i);</span><br><span class="line">            list.add(emp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printSubEmployee</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;SubEmployee&gt; list = <span class="built_in">this</span>.getSubEmployee();</span><br><span class="line">        <span class="keyword">for</span>(SubEmployee e:list)&#123;</span><br><span class="line">            System.out.println(e.getId());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CompanyManager</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Employee&gt; <span class="title function_">getEmployee</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Employee&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Employee&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++)&#123;</span><br><span class="line">            <span class="type">Employee</span> <span class="variable">emp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>();</span><br><span class="line">            emp.setId(<span class="string">&quot;总公司员工：&quot;</span>+i);</span><br><span class="line">            list.add(emp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printAllEmployee</span><span class="params">(SubCompanyManager sub)</span>&#123;</span><br><span class="line">        sub.printSubEmployee();</span><br><span class="line"></span><br><span class="line">        List&lt;Employee&gt; list = <span class="built_in">this</span>.getEmployee();</span><br><span class="line">        <span class="keyword">for</span>(Employee e:list)&#123;</span><br><span class="line">            System.out.println(e.getId());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="组合-x2F-聚合复用原则"><a href="#组合-x2F-聚合复用原则" class="headerlink" title="组合&#x2F;聚合复用原则"></a>组合&#x2F;聚合复用原则</h3><ul>
<li><code>Composite/Aggregate Reuse Principle (CRP)</code> 如果只是达到代码复用的目的，尽量使用组合与聚合，而不是继承</li>
</ul>
<h4 id="问题案例-6"><a href="#问题案例-6" class="headerlink" title="问题案例"></a>问题案例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. 如果基类的实现发生改变，那么派生类的实现也不得不发生改变</span></span><br><span class="line"><span class="comment"> * 2. 应用中需要变化之处应该把它们独立出来，不要和那些不需要变化的代码混在一起</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CompositeReuse</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">DebitCard</span> <span class="variable">debitCard</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DebitCard</span>(<span class="string">&quot;储蓄卡&quot;</span>);</span><br><span class="line">        debitCard.deposit();</span><br><span class="line">        debitCard.withdrawals();</span><br><span class="line">        debitCard.overdraft();</span><br><span class="line"></span><br><span class="line">        <span class="type">CreditCard</span> <span class="variable">creditCard</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CreditCard</span>(<span class="string">&quot;信用卡&quot;</span>);</span><br><span class="line">        creditCard.deposit();</span><br><span class="line">        creditCard.withdrawals();</span><br><span class="line">        creditCard.overdraft();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BankCard</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String cardType;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deposit</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(cardType + <span class="string">&quot;存款...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">withdrawals</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(cardType + <span class="string">&quot;取款...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">overdraft</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(cardType + <span class="string">&quot;透支...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DebitCard</span> <span class="keyword">extends</span> <span class="title class_">BankCard</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DebitCard</span><span class="params">(String cardType)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.cardType = cardType;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CreditCard</span> <span class="keyword">extends</span> <span class="title class_">BankCard</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CreditCard</span><span class="params">(String cardType)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.cardType = cardType;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="解决案例-5"><a href="#解决案例-5" class="headerlink" title="解决案例"></a>解决案例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如果只是达到代码复用的目的，尽量使用组合与聚合，而不是继承</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CompositeReuse</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">DebitCard</span> <span class="variable">debitCard</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DebitCard</span>(<span class="keyword">new</span> <span class="title class_">BankCard</span>(), <span class="string">&quot;储蓄卡&quot;</span>);</span><br><span class="line">        debitCard.deposit();</span><br><span class="line">        debitCard.withdrawals();</span><br><span class="line"></span><br><span class="line">        <span class="type">CreditCard</span> <span class="variable">creditCard</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CreditCard</span>(<span class="keyword">new</span> <span class="title class_">BankCard</span>(), <span class="string">&quot;信用卡&quot;</span>);</span><br><span class="line">        creditCard.overdraft();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BankCard</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String cardType;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deposit</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(cardType + <span class="string">&quot;存款...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">withdrawals</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(cardType + <span class="string">&quot;取款...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">overdraft</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(cardType + <span class="string">&quot;透支...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DebitCard</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> BankCard bankCard;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DebitCard</span><span class="params">(BankCard bankCard, String cardType)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bankCard = bankCard;</span><br><span class="line">        <span class="built_in">this</span>.bankCard.cardType = cardType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deposit</span><span class="params">()</span> &#123;</span><br><span class="line">        bankCard.deposit();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">withdrawals</span><span class="params">()</span> &#123;</span><br><span class="line">        bankCard.withdrawals();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CreditCard</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> BankCard bankCard;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CreditCard</span><span class="params">(BankCard bankCard, String cardType)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bankCard = bankCard;</span><br><span class="line">        <span class="built_in">this</span>.bankCard.cardType = cardType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">overdraft</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bankCard.overdraft();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://github.com/AlfredTheBest/Design-Pattern">Design-Pattern</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/24614363">设计模式之七大基本原则</a></li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式：单利模式</title>
    <url>/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%E5%8D%95%E5%88%A9%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="懒汉模式，线程不安全"><a href="#懒汉模式，线程不安全" class="headerlink" title="懒汉模式，线程不安全"></a>懒汉模式，线程不安全</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒汉模式</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 是否 Lazy 初始化：是</span></span><br><span class="line"><span class="comment"> * 是否多线程安全：否</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 描述：这种方式 lazy loading 很明显，但是致命的是在多线程不能正常工作。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="literal">null</span>)&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="懒汉模式，线程安全"><a href="#懒汉模式，线程安全" class="headerlink" title="懒汉模式，线程安全"></a>懒汉模式，线程安全</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒汉模式   </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 是否 Lazy 初始化：是</span></span><br><span class="line"><span class="comment"> * 是否多线程安全：是</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 描述：这种方式具备很好的 lazy loading，能够在多线程中很好的工作，但是效率很低，99% 情况下不需要同步。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 优点：第一次调用才初始化，避免内存浪费。</span></span><br><span class="line"><span class="comment"> * 缺点：必须加锁 synchronized 才能保证单例，但加锁会影响效率。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="literal">null</span>)&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="懒汉模式-双重校验锁-，线程安全"><a href="#懒汉模式-双重校验锁-，线程安全" class="headerlink" title="懒汉模式 (双重校验锁)，线程安全"></a>懒汉模式 (双重校验锁)，线程安全</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒汉模式（双检锁/双重校验锁）  </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 是否 Lazy 初始化：是</span></span><br><span class="line"><span class="comment"> * 是否多线程安全：是</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 描述：这种方式采用双锁机制，安全且在多线程情况下能保持高性能。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton instance;  </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span> <span class="params">()</span>&#123;&#125;  </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;  </span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;  </span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;  </span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="饿汉模式-实例公有化-，线程安全"><a href="#饿汉模式-实例公有化-，线程安全" class="headerlink" title="饿汉模式 (实例公有化)，线程安全"></a>饿汉模式 (实例公有化)，线程安全</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 饿汉模式</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 是否 Lazy 初始化：否</span></span><br><span class="line"><span class="comment"> * 是否多线程安全：是</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 描述：写法比较简洁</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>(); </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span> <span class="params">()</span>&#123;&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="饿汉模式-实例私有化-，线程安全"><a href="#饿汉模式-实例私有化-，线程安全" class="headerlink" title="饿汉模式 (实例私有化)，线程安全"></a>饿汉模式 (实例私有化)，线程安全</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 饿汉模式</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 是否 Lazy 初始化：否</span></span><br><span class="line"><span class="comment"> * 是否多线程安全：是</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 描述：这种方式比较常用，但容易产生垃圾对象。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 优点：没有加锁，执行效率会提高。</span></span><br><span class="line"><span class="comment"> * 缺点：类加载时就初始化，浪费内存。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>(); </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span> <span class="params">()</span>&#123;&#125;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="饿汉模式-静态代码块-，线程安全"><a href="#饿汉模式-静态代码块-，线程安全" class="headerlink" title="饿汉模式 (静态代码块)，线程安全"></a>饿汉模式 (静态代码块)，线程安全</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 饿汉模式（变种）</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 是否 Lazy 初始化：否</span></span><br><span class="line"><span class="comment"> * 是否多线程安全：是</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 描述：和上一种饿汉模式差不多，都是在类初始化即实例化instance。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 优点：没有加锁，执行效率会提高。</span></span><br><span class="line"><span class="comment"> * 缺点：类加载时就初始化，浪费内存。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span> <span class="params">()</span>&#123;&#125; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="静态内部类，线程安全"><a href="#静态内部类，线程安全" class="headerlink" title="静态内部类，线程安全"></a>静态内部类，线程安全</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 静态内部类</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 是否 Lazy 初始化：是</span></span><br><span class="line"><span class="comment"> * 是否多线程安全：是</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 描述：这种方式能达到双检锁方式一样的功效，但实现更简单。</span></span><br><span class="line"><span class="comment"> *          对静态域使用延迟初始化，应使用这种方式而不是双检锁方式。</span></span><br><span class="line"><span class="comment"> *          这种方式只适用于静态域的情况，双检锁方式可在实例域需要延迟初始化时使用。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SingletonHolder</span> &#123;  </span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singleton</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();  </span><br><span class="line">    &#125;  </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span> <span class="params">()</span>&#123;&#125;  </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;  </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="CAS方式，线程安全"><a href="#CAS方式，线程安全" class="headerlink" title="CAS方式，线程安全"></a>CAS方式，线程安全</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * CAS方式</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 是否 Lazy 初始化：是</span></span><br><span class="line"><span class="comment"> * 是否多线程安全：是</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 描述：通过自旋 + CAS方式无锁方式实现</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 优点：不需要使用传统的锁机制来保证线程安全。</span></span><br><span class="line"><span class="comment"> * 缺点：自旋CAS如果长时间不成功，会给CPU带来非常大的执行开销。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicReference;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AtomicReference&lt;Singleton&gt; INSTANCE = <span class="keyword">new</span> <span class="title class_">AtomicReference</span>&lt;Singleton&gt; ();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(;;) &#123;</span><br><span class="line">            <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> INSTANCE.get();</span><br><span class="line">            <span class="keyword">if</span>(instance != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> instance;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">            <span class="keyword">if</span>(INSTANCE.compareAndSet(<span class="literal">null</span>, instance)) &#123;</span><br><span class="line">                <span class="keyword">return</span> instance;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="枚举，线程安全"><a href="#枚举，线程安全" class="headerlink" title="枚举，线程安全"></a>枚举，线程安全</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 枚举</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 是否 Lazy 初始化：否</span></span><br><span class="line"><span class="comment"> * 是否多线程安全：是</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 描述：这种实现方式还没有被广泛采用，但这是实现单例模式的最佳方法。</span></span><br><span class="line"><span class="comment"> *          它更简洁，自动支持序列化机制，绝对防止多次实例化。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Singleton</span> &#123;  </span><br><span class="line">    </span><br><span class="line">    INSTANCE;  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>



<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="http://24suixinsuoyu.com/2019/03/09/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E8%AF%A6%E8%A7%A3%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%8D%81%E7%A7%8D%E5%86%99%E6%B3%95">24隋心所欲’s Blog</a></li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Java_IO：IO类型</title>
    <url>/Java/Java_IO%EF%BC%9AIO%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<p><img src="/Java/Java_IO%EF%BC%9AIO%E7%B1%BB%E5%9E%8B/IO%E7%B1%BB%E5%9E%8B.png" alt="IO类型"></p>
<span id="more"></span>

<h2 id="BIO、NIO、AIO基本说明"><a href="#BIO、NIO、AIO基本说明" class="headerlink" title="BIO、NIO、AIO基本说明"></a>BIO、NIO、AIO基本说明</h2><ul>
<li><code>BIO:</code> 同步并阻塞(传统阻塞型)，服务器实现模式为一个连接一个线程，即客户端 有连接请求时服务器端就需要启动一个线程进行处理，如果这个连接不做任何事情会造成不必要的线程开销</li>
<li><code>NIO:</code> 同步非阻塞，服务器实现模式为一个线程处理多个请求(连接)，即客户端发 送的连接请求都会注册到多路复用器上，多路复用器轮询到连接有I&#x2F;O请求就进行处理</li>
<li><code>AIO:</code> 异步非阻塞，AIO引入异步通道的概念，采用了 Proactor 模式，简化了程序编写，有效的请求才启动线程，它的特点是先由操作系统完成后才通知服务端程序启动线程去处理，一般使用于连接数较多且连接时间较长的应用</li>
</ul>
<h2 id="BIO、NIO、AIO适用场景分析"><a href="#BIO、NIO、AIO适用场景分析" class="headerlink" title="BIO、NIO、AIO适用场景分析"></a>BIO、NIO、AIO适用场景分析</h2><ul>
<li><code>BIO:</code> 适用于连接数目比较小且固定的架构，这种方式对服务器资源要求比较高， 并发局限于应用中，JDK1.4以前的唯一选择，但程序简单易理解。</li>
<li><code>NIO:</code> 适用于连接数目多且连接比较短(轻操作)的架构，比如聊天服务器，弹幕 系统，服务器间通讯等。编程比较复杂，JDK1.4开始支持。</li>
<li><code>AIO:</code> 使用于连接数目多且连接比较长(重操作)的架构，比如相册服务器，充分 调用OS参与并发操作，编程比较复杂，JDK7开始支持。</li>
</ul>
<h2 id="BIO、NIO、AIO对比"><a href="#BIO、NIO、AIO对比" class="headerlink" title="BIO、NIO、AIO对比"></a>BIO、NIO、AIO对比</h2><table>
<thead>
<tr>
<th></th>
<th>BIO</th>
<th>NIO</th>
<th>AIO</th>
</tr>
</thead>
<tbody><tr>
<td>IO 模型</td>
<td>同步阻塞</td>
<td>同步非阻塞(多路复用)</td>
<td>异步非阻塞</td>
</tr>
<tr>
<td>编程难度</td>
<td>简单</td>
<td>复杂</td>
<td>复杂</td>
</tr>
<tr>
<td>可靠性</td>
<td>差</td>
<td>好</td>
<td>好</td>
</tr>
<tr>
<td>吞吐量</td>
<td>低</td>
<td>高</td>
<td>高</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>Java</tag>
        <tag>IO</tag>
      </tags>
  </entry>
  <entry>
    <title>Java_IO：流体系</title>
    <url>/Java/Java_IO%EF%BC%9A%E6%B5%81%E4%BD%93%E7%B3%BB/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th>分类</th>
<th>字节输入流</th>
<th>字节输出流</th>
<th>字符输入流</th>
<th>字符输出流</th>
</tr>
</thead>
<tbody><tr>
<td>基类</td>
<td>InputStream</td>
<td>OutputStream</td>
<td>Reader</td>
<td>Writer</td>
</tr>
<tr>
<td>文件流</td>
<td>FileInputStream</td>
<td>FileOutputStream</td>
<td>FileReader</td>
<td>FileWriter</td>
</tr>
<tr>
<td>数组流</td>
<td>ByteArrayInputStream</td>
<td>ByteArrayOutputStream</td>
<td>CharArrayReader</td>
<td>CharArrayWriter</td>
</tr>
<tr>
<td>管道流</td>
<td>PipedInputStream</td>
<td>PipedOutputStream</td>
<td>PipedReader</td>
<td>PipedWriter</td>
</tr>
<tr>
<td>序列流</td>
<td>SequenceInputStream</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>对象流</td>
<td>ObjectInputStream</td>
<td>ObjectOutputStream</td>
<td></td>
<td></td>
</tr>
<tr>
<td>字符串流</td>
<td></td>
<td></td>
<td>StringReader</td>
<td>StringWriter</td>
</tr>
<tr>
<td>转换流</td>
<td></td>
<td></td>
<td>InputStreamReader</td>
<td>OutputStreamWriter</td>
</tr>
<tr>
<td>过滤流</td>
<td>FilterInputStream</td>
<td>FilterOutputStream</td>
<td>FilterReader</td>
<td>FilterWriter</td>
</tr>
<tr>
<td>– 缓冲流</td>
<td>BufferedInputStream</td>
<td>BufferedOutputStream</td>
<td>BufferedReader</td>
<td>BufferedWriter</td>
</tr>
<tr>
<td>– 数据流</td>
<td>DataInputStream</td>
<td>DataOutputStream</td>
<td></td>
<td></td>
</tr>
<tr>
<td>– 推回输入流</td>
<td>PushbackInputStream</td>
<td></td>
<td>PushbackReader</td>
<td></td>
</tr>
<tr>
<td>– 打印流</td>
<td></td>
<td>PrintStream</td>
<td></td>
<td>PrintWriter</td>
</tr>
</tbody></table>
<span id="more"></span>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>Java</tag>
        <tag>IO</tag>
      </tags>
  </entry>
  <entry>
    <title>Java_基础：Files工具类</title>
    <url>/Java/Java_%E5%9F%BA%E7%A1%80%EF%BC%9AFiles%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
    <content><![CDATA[<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检查文件是否存在</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;helloword/data.txt&quot;</span>);</span><br><span class="line">    System.out.println(Files.exists(path));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建一级目录</span></span><br><span class="line"><span class="comment"> *   - 如果目录已存在，会抛异常 FileAlreadyExistsException</span></span><br><span class="line"><span class="comment"> *   - 不能一次创建多级目录，否则会抛异常 NoSuchFileException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;helloword/d1&quot;</span>);</span><br><span class="line">    Files.createDirectory(path);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建多级目录用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;helloword/d1/d2&quot;</span>);</span><br><span class="line">    Files.createDirectories(path);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拷贝文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="type">Path</span> <span class="variable">source</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;helloword/data.txt&quot;</span>);</span><br><span class="line">    <span class="type">Path</span> <span class="variable">target</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;helloword/target.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果文件已存在，会抛异常 FileAlreadyExistsException</span></span><br><span class="line">    Files.copy(source, target);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果希望用 source 覆盖掉 target，需要用 StandardCopyOption 来控制</span></span><br><span class="line">    <span class="comment">//Files.copy(source, target, StandardCopyOption.REPLACE_EXISTING);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拷贝多级目录</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test5</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">source</span> <span class="operator">=</span> <span class="string">&quot;D:\\dir1&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">target</span> <span class="operator">=</span> <span class="string">&quot;D:\\dir2&quot;</span>;</span><br><span class="line"></span><br><span class="line">    Files.walk(Paths.get(source)).forEach(path -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">targetName</span> <span class="operator">=</span> path.toString().replace(source, target);</span><br><span class="line">            <span class="comment">// 是目录</span></span><br><span class="line">            <span class="keyword">if</span> (Files.isDirectory(path)) &#123;</span><br><span class="line">                Files.createDirectory(Paths.get(targetName));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 是普通文件</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (Files.isRegularFile(path)) &#123;</span><br><span class="line">                Files.copy(path, Paths.get(targetName));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 移动文件</span></span><br><span class="line"><span class="comment"> *   - StandardCopyOption.ATOMIC_MOVE 保证文件移动的原子性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test6</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="type">Path</span> <span class="variable">source</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;helloword/data.txt&quot;</span>);</span><br><span class="line">    <span class="type">Path</span> <span class="variable">target</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;helloword/data.txt&quot;</span>);</span><br><span class="line">    Files.move(source, target, StandardCopyOption.ATOMIC_MOVE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除文件</span></span><br><span class="line"><span class="comment"> *   - 如果文件不存在，会抛异常 NoSuchFileException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test7</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="type">Path</span> <span class="variable">target</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;helloword/target.txt&quot;</span>);</span><br><span class="line">    Files.delete(target);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除目录</span></span><br><span class="line"><span class="comment"> *   - 如果目录还有内容，会抛异常 DirectoryNotEmptyException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test8</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="type">Path</span> <span class="variable">target</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;helloword/d1&quot;</span>);</span><br><span class="line">    Files.delete(target);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除多级目录</span></span><br><span class="line"><span class="comment"> *   - 注意：删除是危险操作，确保要递归删除的文件夹没有重要内容</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test9</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;d:\\a&quot;</span>);</span><br><span class="line">    Files.walkFileTree(path, <span class="keyword">new</span> <span class="title class_">SimpleFileVisitor</span>&lt;Path&gt;()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> FileVisitResult <span class="title function_">visitFile</span><span class="params">(Path file, BasicFileAttributes attrs)</span></span><br><span class="line">                <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            Files.delete(file);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">super</span>.visitFile(file, attrs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> FileVisitResult <span class="title function_">postVisitDirectory</span><span class="params">(Path dir, IOException exc)</span></span><br><span class="line">                <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            Files.delete(dir);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">super</span>.postVisitDirectory(dir, exc);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 遍历目录文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test10</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;C:\\Program Files\\Java\\jdk1.8.0_91&quot;</span>);</span><br><span class="line">    <span class="type">AtomicInteger</span> <span class="variable">dirCount</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>();</span><br><span class="line">    <span class="type">AtomicInteger</span> <span class="variable">fileCount</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>();</span><br><span class="line">    Files.walkFileTree(path, <span class="keyword">new</span> <span class="title class_">SimpleFileVisitor</span>&lt;Path&gt;()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> FileVisitResult <span class="title function_">preVisitDirectory</span><span class="params">(Path dir, BasicFileAttributes attrs)</span></span><br><span class="line">                <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            System.out.println(dir);</span><br><span class="line">            dirCount.incrementAndGet();</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">super</span>.preVisitDirectory(dir, attrs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> FileVisitResult <span class="title function_">visitFile</span><span class="params">(Path file, BasicFileAttributes attrs)</span></span><br><span class="line">                <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            System.out.println(file);</span><br><span class="line">            fileCount.incrementAndGet();</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">super</span>.visitFile(file, attrs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    System.out.println(dirCount);</span><br><span class="line">    System.out.println(fileCount);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 统计 jar 的数目</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test11</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;C:\\Program Files\\Java\\jdk1.8.0_91&quot;</span>);</span><br><span class="line">    <span class="type">AtomicInteger</span> <span class="variable">fileCount</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>();</span><br><span class="line">    Files.walkFileTree(path, <span class="keyword">new</span> <span class="title class_">SimpleFileVisitor</span>&lt;Path&gt;()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> FileVisitResult <span class="title function_">visitFile</span><span class="params">(Path file, BasicFileAttributes attrs)</span></span><br><span class="line">                <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            <span class="keyword">if</span> (file.toFile().getName().endsWith(<span class="string">&quot;.jar&quot;</span>)) &#123;</span><br><span class="line">                fileCount.incrementAndGet();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">super</span>.visitFile(file, attrs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    System.out.println(fileCount);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>Java</tag>
        <tag>Java_基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Java_基础：Paths工具类</title>
    <url>/Java/Java_%E5%9F%BA%E7%A1%80%EF%BC%9APaths%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
    <content><![CDATA[<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * jdk7 引入了 Path 和 Paths 类</span></span><br><span class="line"><span class="comment"> *    - Path 用来表示文件路径</span></span><br><span class="line"><span class="comment"> *    - Paths 是工具类，用来获取 Path 实例</span></span><br><span class="line"><span class="comment"> *    - . 代表了当前路径</span></span><br><span class="line"><span class="comment"> *    - .. 代表了上一级路径</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Path</span> <span class="variable">source</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;1.txt&quot;</span>); <span class="comment">// 相对路径 使用 user.dir 环境变量来定位 1.txt</span></span><br><span class="line"></span><br><span class="line">    <span class="type">Path</span> <span class="variable">source</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;d:\\1.txt&quot;</span>); <span class="comment">// 绝对路径 代表了  d:\1.txt</span></span><br><span class="line"></span><br><span class="line">    <span class="type">Path</span> <span class="variable">source</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;d:/1.txt&quot;</span>); <span class="comment">// 绝对路径 同样代表了  d:\1.txt</span></span><br><span class="line"></span><br><span class="line">    <span class="type">Path</span> <span class="variable">projects</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;d:\\data&quot;</span>, <span class="string">&quot;projects&quot;</span>); <span class="comment">// 代表了  d:\data\projects</span></span><br><span class="line"></span><br><span class="line">    <span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;d:\\data\\projects\\a\\..\\b&quot;</span>);</span><br><span class="line">    System.out.println(path);   <span class="comment">// 输出：d:\data\projects\a\..\b</span></span><br><span class="line">    System.out.println(path.normalize()); <span class="comment">// 正常化路径，输出：d:\data\projects\b</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>Java</tag>
        <tag>Java_基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Java_基础：String类intern方法</title>
    <url>/Java/Java_%E5%9F%BA%E7%A1%80%EF%BC%9AString%E7%B1%BBintern%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="String-intern-方法"><a href="#String-intern-方法" class="headerlink" title="String::intern()方法"></a>String::intern()方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title function_">intern</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>

<h2 id="String-intern-解释"><a href="#String-intern-解释" class="headerlink" title="String::intern()解释"></a>String::intern()解释</h2><p>String::intern是一个本地方法，它的作用是如果字符串常量池中已经包含一个等于此String对象的字符串，则返回代表池中这个字符串的String对象的引用；否则，会将此String对象包含的字符串添加到常量池中，并且返回此String对象的引用。</p>
<span id="more"></span>

<h2 id="String-intern-面试题"><a href="#String-intern-面试题" class="headerlink" title="String::intern()面试题"></a>String::intern()面试题</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;hello&quot;</span>).append(<span class="string">&quot;world&quot;</span>).toString();</span><br><span class="line">        System.out.println(str1 == str1.intern());  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;ja&quot;</span>).append(<span class="string">&quot;va&quot;</span>).toString();</span><br><span class="line">        System.out.println(str2 == str2.intern());  <span class="comment">// false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>原因：Java系统初始化自带的字符串</p>
<p><img src="/Java/Java_%E5%9F%BA%E7%A1%80%EF%BC%9AString%E7%B1%BBintern%E6%96%B9%E6%B3%95/intern.png" alt="String::intern()"></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>Java</tag>
        <tag>Java_基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Java_基础：二进制</title>
    <url>/Java/Java_%E5%9F%BA%E7%A1%80%EF%BC%9A%E4%BA%8C%E8%BF%9B%E5%88%B6/</url>
    <content><![CDATA[<style>
.article-content div table {
    width: 50%;
    margin-left: 20px;
    margin-bottom: 0px;
}
.article-content div table thead tr th {
    color:rgb(31,73,125);
}
</style>

<h2 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h2><p><code>二进制(binary)</code> 0-1，满2进1，以 <span style="color:red">0b或0B</span> 开头。<br><code>十进制(decimal)</code> 0-9，满10进1。<br><code>八进制(octal)</code> 0-7，满8进1, 以数字 <span style="color:red">0</span> 开头表示。<br><code>十六进制(hex)</code> 0-9及A-F，满16进1，以 <span style="color:red">0x或0X</span> 开头表示。此处的A-F不区分大小写。如：0x21AF +1&#x3D; 0X21B0</p>
<span id="more"></span>

<table>
<thead>
<tr>
<th>0</th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
<th>6</th>
<th>7</th>
<th>8</th>
<th>9</th>
<th>10</th>
<th>11</th>
<th>12</th>
<th>13</th>
<th>14</th>
<th>15</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>1</td>
<td>2</td>
<td>3</td>
<td>4</td>
<td>5</td>
<td>6</td>
<td>7</td>
<td>8</td>
<td>9</td>
<td>A</td>
<td>B</td>
<td>C</td>
<td>D</td>
<td>E</td>
<td>F</td>
</tr>
</tbody></table>
<h2 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h2><ul>
<li>Java整数常量默认是int类型，当用二进制定义整数时，其第32位符号位；当是long类型时，二进制默认占64位，第63位是符号位</li>
<li>二进制的整数有如下三种形式：<ul>
<li><code>原码：</code>直接将一个数值换成二进制数。最高位是符号位</li>
<li><code>负数的反码：</code>是对原码按位取反，只是最高位（符号位）确定为1</li>
<li><code>负数的补码：</code>其反码加1</li>
</ul>
</li>
<li>计算机以二进制 <span style="color:red">补码</span> 的形式保存所有的整数<ul>
<li>正数的原码、反码、补码都相同</li>
<li>负数的补码是其反码+1</li>
</ul>
</li>
</ul>
<h2 id="原码、反码、补码"><a href="#原码、反码、补码" class="headerlink" title="原码、反码、补码"></a>原码、反码、补码</h2><p><img src="/Java/Java_%E5%9F%BA%E7%A1%80%EF%BC%9A%E4%BA%8C%E8%BF%9B%E5%88%B6/%E5%8E%9F%E7%A0%81%E3%80%81%E5%8F%8D%E7%A0%81%E3%80%81%E8%A1%A5%E7%A0%811.jpeg" alt="原码、反码、补码1"></p>
<p><img src="/Java/Java_%E5%9F%BA%E7%A1%80%EF%BC%9A%E4%BA%8C%E8%BF%9B%E5%88%B6/%E5%8E%9F%E7%A0%81%E3%80%81%E5%8F%8D%E7%A0%81%E3%80%81%E8%A1%A5%E7%A0%812.jpeg" alt="原码、反码、补码2"></p>
<h2 id="进制间转化"><a href="#进制间转化" class="headerlink" title="进制间转化"></a>进制间转化</h2><p><img src="/Java/Java_%E5%9F%BA%E7%A1%80%EF%BC%9A%E4%BA%8C%E8%BF%9B%E5%88%B6/%E8%BF%9B%E5%88%B6%E9%97%B4%E8%BD%AC%E5%8C%96.jpeg" alt="进制间转化"></p>
<h3 id="二与十进制互转"><a href="#二与十进制互转" class="headerlink" title="二与十进制互转"></a>二与十进制互转</h3><ul>
<li>二进制转十进制  乘以2的幂数</li>
<li>十进制转二进制  除以2取余数<br><img src="/Java/Java_%E5%9F%BA%E7%A1%80%EF%BC%9A%E4%BA%8C%E8%BF%9B%E5%88%B6/%E8%BF%9B%E5%88%B6%E9%97%B4%E8%BD%AC%E5%8C%96_%E5%8D%81%E4%B8%8E%E4%BA%8C%E4%BA%92%E8%BD%AC.png" alt="进制间转化_十与二互转"></li>
</ul>
<h3 id="二与八-x2F-十六进制互转"><a href="#二与八-x2F-十六进制互转" class="headerlink" title="二与八&#x2F;十六进制互转"></a>二与八&#x2F;十六进制互转</h3><p><img src="/Java/Java_%E5%9F%BA%E7%A1%80%EF%BC%9A%E4%BA%8C%E8%BF%9B%E5%88%B6/%E8%BF%9B%E5%88%B6%E9%97%B4%E8%BD%AC%E5%8C%96_%E4%BA%8C%E8%BD%AC%E5%85%AB%E4%B8%8E%E5%8D%81%E5%85%AD.jpeg" alt="进制间转化_二转八与十六"><br><img src="/Java/Java_%E5%9F%BA%E7%A1%80%EF%BC%9A%E4%BA%8C%E8%BF%9B%E5%88%B6/%E8%BF%9B%E5%88%B6%E9%97%B4%E8%BD%AC%E5%8C%96_%E5%85%AB%E4%B8%8E%E5%8D%81%E5%85%AD%E8%BD%AC%E4%BA%8C.jpeg" alt="进制间转化_八与十六转二"></p>
<h2 id="二进制位运算"><a href="#二进制位运算" class="headerlink" title="二进制位运算"></a>二进制位运算</h2><table>
<thead>
<tr>
<th>符号</th>
<th>含义</th>
<th>规则</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>&amp;</td>
<td>与</td>
<td>两个位都为1时，结果为1</td>
<td>6 &amp; 3 &#x3D; 2</td>
</tr>
<tr>
<td>|</td>
<td>或</td>
<td>有一个位为1时，结果为1</td>
<td>6 | 3 &#x3D; 7</td>
</tr>
<tr>
<td>^</td>
<td>异或</td>
<td>两个位相同为0，不同为1</td>
<td>6 ^ 3 &#x3D; 5</td>
</tr>
<tr>
<td>~</td>
<td>取反</td>
<td>0和1全部取反</td>
<td>~ 6 &#x3D; -7</td>
</tr>
<tr>
<td>&lt;&lt;</td>
<td>左移</td>
<td>位全部左移若干位，高位丢弃，低位补0</td>
<td>3 &lt;&lt; 2 &#x3D; 12; 3 * 2 * 2 &#x3D; 12</td>
</tr>
<tr>
<td>&gt;&gt;</td>
<td>右移</td>
<td>位全部右移若干位，高位正数补0负数补1，低位丢弃</td>
<td>3 &gt;&gt; 1 &#x3D;1; 3 &#x2F; 2 &#x3D; 1</td>
</tr>
<tr>
<td>&gt;&gt;&gt;</td>
<td>无符号右移</td>
<td>位全部右移若干位，高位补0，低位丢弃</td>
<td>3 &gt;&gt;&gt; 1 &#x3D; 1; 3 &#x2F; 2 &#x3D;1</td>
</tr>
</tbody></table>
<h2 id="JDK内置进制转换"><a href="#JDK内置进制转换" class="headerlink" title="JDK内置进制转换"></a>JDK内置进制转换</h2><h3 id="十进制转其他进制"><a href="#十进制转其他进制" class="headerlink" title="十进制转其他进制"></a>十进制转其他进制</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer.toBinaryString(<span class="number">20</span>);     <span class="comment">// 转为二进制</span></span><br><span class="line">Integer.toHexString(<span class="number">20</span>);        <span class="comment">// 转为十六制</span></span><br><span class="line">Integer.toOctalString(<span class="number">20</span>);      <span class="comment">// 转为八进制</span></span><br></pre></td></tr></table></figure>
<h3 id="其他进制转十进制"><a href="#其他进制转十进制" class="headerlink" title="其他进制转十进制"></a>其他进制转十进制</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer.parseInt(<span class="string">&quot;00001101&quot;</span>,<span class="number">2</span>); <span class="comment">// 二进制</span></span><br><span class="line">Integer.parseInt(<span class="string">&quot;17&quot;</span>,<span class="number">8</span>);       <span class="comment">// 八进制</span></span><br><span class="line">Integer.parseInt(<span class="string">&quot;A8&quot;</span>,<span class="number">16</span>);      <span class="comment">// 十六进制</span></span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>Java</tag>
        <tag>Java_基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Java_基础：参数传递</title>
    <url>/Java/Java_%E5%9F%BA%E7%A1%80%EF%BC%9A%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92/</url>
    <content><![CDATA[<h2 id="传递方式"><a href="#传递方式" class="headerlink" title="传递方式"></a>传递方式</h2><ul>
<li><code>值传递</code> 传递的是值的副本。方法中对副本的修改，不会影响到调用方</li>
<li><code>引用传递</code> 传递的是对象的引用。共用一个内存，会影响到调用方。如果方法中对象的引用重新指向其他对象的引用，不会影响到调用方</li>
</ul>
<span id="more"></span>

<h2 id="传递类型"><a href="#传递类型" class="headerlink" title="传递类型"></a>传递类型</h2><ul>
<li><code>对象、数组、容器</code> 传递引用</li>
<li><code>基本类型、包装集</code> 传递值</li>
<li><code>String类型</code> 传递引用<strong>（注意：String是不可变对象，每次对String类型进行改变时，都会生成一个新的String对象，重新指向新对象，不会影响到调用方）</strong></li>
</ul>
<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;yes&quot;</span>);</span><br><span class="line">        <span class="type">char</span>[] ch = &#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">Obj</span> <span class="variable">o1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Obj</span>();</span><br><span class="line">        <span class="type">Obj</span> <span class="variable">o2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Obj</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Demo</span> <span class="variable">demo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Demo</span>();</span><br><span class="line">        demo.change(str, ch, i, x, o1, o2);</span><br><span class="line">        System.out.printf(<span class="string">&quot;str=%s, ch=%s, i=%d, x=%d, o1=%d, o2=%d&quot;</span>,</span><br><span class="line">                str, String.valueOf(ch), i, x, o1.getA(), o2.getA());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">change</span><span class="params">(String str, <span class="type">char</span> ch[], Integer i, <span class="type">int</span> x, Obj o1, Obj o2)</span>&#123;</span><br><span class="line">        str=<span class="string">&quot;no&quot;</span>;</span><br><span class="line">        ch[<span class="number">0</span>]=<span class="string">&#x27;z&#x27;</span>;</span><br><span class="line">        i = <span class="number">1</span>;</span><br><span class="line">        x = <span class="number">2</span>;</span><br><span class="line">        <span class="type">Obj</span> <span class="variable">newObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Obj</span>();</span><br><span class="line">        newObj.setA(<span class="number">100</span>);</span><br><span class="line">        o1 = newObj;</span><br><span class="line">        o2.setA(<span class="number">200</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Obj</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> a;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setA</span><span class="params">(<span class="type">int</span> a)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.a = a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getA</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">str=yes, ch=zbc, i=<span class="number">0</span>, x=<span class="number">0</span>, o1=<span class="number">0</span>, o2=<span class="number">200</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>Java</tag>
        <tag>Java_基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Java_基础：反射</title>
    <url>/Java/Java_%E5%9F%BA%E7%A1%80%EF%BC%9A%E5%8F%8D%E5%B0%84/</url>
    <content><![CDATA[<h2 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul>
<li>Java反射机制是指在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。用一句话总结就是<code>反射可以实现在运行时可以知道任意一个类的属性和方法</code>。</li>
</ul>
<span id="more"></span>

<h3 id="动-x2F-静态编译"><a href="#动-x2F-静态编译" class="headerlink" title="动&#x2F;静态编译"></a>动&#x2F;静态编译</h3><ul>
<li><code>静态编译</code> 在编译时确定类型，绑定对象，即通过</li>
<li><code>动态编译</code> 运行时确定类型，绑定对象，动态编译最大限度发挥了java的灵活性，体现了多态的应用，有以降低类之间的耦合性</li>
</ul>
<h3 id="优-x2F-缺点"><a href="#优-x2F-缺点" class="headerlink" title="优&#x2F;缺点"></a>优&#x2F;缺点</h3><ul>
<li><code>优点</code> 增加程序的灵活性，避免将程序写死到代码里</li>
<li><code>缺点</code> 对性能有影响</li>
</ul>
<h2 id="反射相关操作"><a href="#反射相关操作" class="headerlink" title="反射相关操作"></a>反射相关操作</h2><h3 id="获取Class实例"><a href="#获取Class实例" class="headerlink" title="获取Class实例"></a>获取Class实例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方式一：调用运行时类的属性.class</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">clazz1</span> <span class="operator">=</span> Person.class;</span><br><span class="line">System.out.println(clazz1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式二：通过运行时类的对象调用getClass()</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">clazz2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>().getClass();</span><br><span class="line">System.out.println(clazz2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式三：调用Class的静态方法forName(String classPath)</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">clazz3</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.example.reflect.Person&quot;</span>);</span><br><span class="line">System.out.println(clazz3);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式四：使用类的加载器ClassLoader  (了解)</span></span><br><span class="line"><span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getClassLoader();</span><br><span class="line"><span class="type">Class</span> <span class="variable">clazz4</span> <span class="operator">=</span> classLoader.loadClass(<span class="string">&quot;com.example.reflect.Person&quot;</span>);</span><br><span class="line">System.out.println(clazz4);</span><br></pre></td></tr></table></figure>

<h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.example.reflect.Person&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取一个类的所有公共的构造函数</span></span><br><span class="line">Constructor[] publicConstructors = clazz.getConstructors();</span><br><span class="line"><span class="keyword">for</span>(Constructor constructor : publicConstructors)&#123;</span><br><span class="line">	System.out.println(constructor);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取一个类的所有构造函数，包括私有的在内</span></span><br><span class="line">Constructor[] allConstructors =  clazz.getDeclaredConstructors();</span><br><span class="line"><span class="keyword">for</span>(Constructor constructor : allConstructors)&#123;</span><br><span class="line">	System.out.println(constructor);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取指定的公共构造函数</span></span><br><span class="line"><span class="type">Constructor</span> <span class="variable">publicConstructor</span> <span class="operator">=</span> clazz.getConstructor();</span><br><span class="line">System.out.println(publicConstructor);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取指定的构造函数，包括私有的在内</span></span><br><span class="line"><span class="type">Constructor</span> <span class="variable">privateConstructor</span> <span class="operator">=</span> clazz.getDeclaredConstructor(String.class);</span><br><span class="line">System.out.println(privateConstructor);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建公共的运行时类的对象</span></span><br><span class="line"><span class="type">Person</span> <span class="variable">person1</span> <span class="operator">=</span> (Person)publicConstructor.newInstance();</span><br><span class="line">System.out.println(person1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建私有的运行时类的对象</span></span><br><span class="line">privateConstructor.setAccessible(<span class="literal">true</span>);<span class="comment">//设置私有访问权限</span></span><br><span class="line"><span class="type">Person</span> <span class="variable">person2</span> <span class="operator">=</span> (Person)privateConstructor.newInstance(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">System.out.println(person2);</span><br></pre></td></tr></table></figure>

<h3 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.example.reflect.Person&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取一个类及父类的所有公共成员方法</span></span><br><span class="line">Method[] publicMethods = clazz.getMethods();</span><br><span class="line"><span class="keyword">for</span>(Method method : publicMethods)&#123;</span><br><span class="line">    System.out.println(method);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取一个类的所有成员方法，包括私有的在内</span></span><br><span class="line">Method[] allMethods =  clazz.getDeclaredMethods();</span><br><span class="line"><span class="keyword">for</span>(Method method : allMethods)&#123;</span><br><span class="line">    System.out.println(method);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取指定的公共成员方法</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">publicMethod</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;toString&quot;</span>);</span><br><span class="line">System.out.println(publicMethod);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取指定的成员方法，包括私有的在内</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">privateMethod</span> <span class="operator">=</span> clazz.getDeclaredMethod(<span class="string">&quot;show&quot;</span>, String.class);</span><br><span class="line">System.out.println(privateMethod);</span><br><span class="line"></span><br><span class="line"><span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> (Person)clazz.newInstance();</span><br><span class="line"><span class="comment">// 调用指定的公共的成员方法</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">publicReturnValue</span> <span class="operator">=</span> publicMethod.invoke(person);</span><br><span class="line">System.out.println(publicReturnValue);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用指定的私有的成员方法</span></span><br><span class="line">privateMethod.setAccessible(<span class="literal">true</span>);<span class="comment">//设置私有访问权限</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">privateReturnValue</span> <span class="operator">=</span> privateMethod.invoke(person, <span class="string">&quot;哈哈&quot;</span>);</span><br><span class="line">System.out.println(privateReturnValue);</span><br></pre></td></tr></table></figure>

<h3 id="成员属性"><a href="#成员属性" class="headerlink" title="成员属性"></a>成员属性</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.example.reflect.Person&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取一个类及父类的所有公共成员属性</span></span><br><span class="line">Field[] publicFields = clazz.getFields();</span><br><span class="line"><span class="keyword">for</span>(Field field : publicFields)&#123;</span><br><span class="line">    System.out.println(field);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取一个类的所有成员属性，包括私有的在内</span></span><br><span class="line">Field[] allFields =  clazz.getDeclaredFields();</span><br><span class="line"><span class="keyword">for</span>(Field field : allFields)&#123;</span><br><span class="line">    System.out.println(field);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取指定的公共成员属性</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">publicField</span> <span class="operator">=</span> clazz.getField(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">System.out.println(publicField);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取指定的成员属性，包括私有的在内</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">privateField</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">System.out.println(privateField);</span><br><span class="line"></span><br><span class="line"><span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> (Person)clazz.newInstance();</span><br><span class="line"><span class="comment">// 设置指定的公共的成员属性</span></span><br><span class="line">publicField.set(person, <span class="number">1001</span>);</span><br><span class="line">System.out.println(person);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置指定的私有的成员属性</span></span><br><span class="line">privateField.setAccessible(<span class="literal">true</span>);<span class="comment">//设置私有访问权限</span></span><br><span class="line">privateField.set(person, <span class="string">&quot;tom&quot;</span>);</span><br><span class="line">System.out.println(person);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>Java</tag>
        <tag>Java_基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Java_基础：注解</title>
    <url>/Java/Java_%E5%9F%BA%E7%A1%80%EF%BC%9A%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul>
<li>从 JDK 5.0 开始, Java 增加了对元数据(MetaData) 的支持, 也就是 Annotation(注解)。</li>
<li>Annotation 其实就是代码里的<code>特殊标记</code>, 这些标记可以在编译, 类加载, 运行时被读取, 并执行相应的处理。</li>
<li>Annotation 可以像修饰符一样被使用, 可用于<code>修饰包、类、构造器、方法、成员变量、参数、局部变量的声明</code>, 这些信息被保存在 Annotation 的 “name&#x3D;value” 对中。</li>
</ul>
<span id="more"></span>

<h2 id="文档相关注解"><a href="#文档相关注解" class="headerlink" title="文档相关注解"></a>文档相关注解</h2><ul>
<li><code>@author</code> 标明开发该类模块的作者，多个作者之间使用,分割 @version 标明该类模块的版本。</li>
<li><code>@see</code> 参考转向，也就是相关主题。</li>
<li><code>@since</code> 从哪个版本开始增加的。</li>
<li><code>@param</code> 对方法中某参数的说明，如果没有参数就不能写。</li>
<li><code>@return</code> 对方法返回值的说明，如果方法的返回值类型是void就不能写。</li>
<li><code>@exception</code> 对方法可能抛出的异常进行说明，如果方法没有用throws显式抛出的异常就不能写其中。</li>
</ul>
<h2 id="内置注解"><a href="#内置注解" class="headerlink" title="内置注解"></a>内置注解</h2><ul>
<li><code>@Override</code> 限定重写父类方法, 该注解只能用于方法。</li>
<li><code>@Deprecated</code> 用于表示所修饰的元素(类, 方法等)已过时。通常是因为所修饰的结构危险或存在更好的选择。</li>
<li><code>@SuppressWarnings</code> 抑制编译器警告。</li>
</ul>
<h2 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h2><ul>
<li><code>@Target</code> 用于描述注解的使用范围（即：被描述的注解可以用在什么地方）。</li>
<li><code>@Retention</code> 表示需要在什么级别保存该注释信息，用于描述注解的生命周期（SOURCE &lt; CLASS &lt; RUNTIME）。</li>
<li><code>@Documented</code> 说明该注解将被包含在javadoc中。</li>
<li><code>@Inherited</code> 说明子类可以继承父类中的该注解。</li>
</ul>
<h3 id="Target参数说明"><a href="#Target参数说明" class="headerlink" title="@Target参数说明"></a>@Target参数说明</h3><ul>
<li><code>TYPE</code> 用于描述类、接口（包括注解类型）或enum声明。</li>
<li><code>FIELD</code> 用于描述域。</li>
<li><code>METHOD</code> 用于描述方法。</li>
<li><code>PARAMETER</code> 用于描述参数。</li>
<li><code>CONSTRUCTOR</code> 用于描述构造器。</li>
<li><code>LOCAL_VARIABLE</code> 用于描述局部变量。</li>
<li><code>ANNOTATION_TYPE</code> 用于描述对注解B进行声明，包括第三方注解B、自定义注解B。</li>
<li><code>PACKAGE</code> 用于描述包。</li>
<li><code>TYPE_PARAMETER</code> JDK1.8之后,用于描述在类型变量的声明语句中（如：泛型声明）。</li>
<li><code>TYPE_USE</code> JDK1.8之后,用于描述在使用类型的任何语句中。</li>
</ul>
<h3 id="Retention参数说明"><a href="#Retention参数说明" class="headerlink" title="@Retention参数说明"></a>@Retention参数说明</h3><ul>
<li><code>SOURCE</code> 在源文件中有效，即java文件中保留注释。</li>
<li><code>CLASS</code> 在class文件中有效，即class文件中保留注释。</li>
<li><code>RUNTIME</code> 在运行时有效，即运行程序时保留注释。</li>
</ul>
<h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h2><ul>
<li>定义新的 Annotation 类型使用 <code>@interface</code> 关键字。</li>
<li>自定义注解自动继承了<code>java.lang.annotation.Annotation</code>接口。</li>
<li>Annotation 的成员变量在定义中以无参数方法的形式来声明。其方法名和返回值定义了该成员的名字和类型，称为配置参数。类型只能是<code>八种基本数据类型、String类型、Class类型、enum类型、Annotation类型、以上所有类型的数组</code>。</li>
<li>可以在定义 Annotation 的成员变量时为其指定初始值, 指定成员变量的初始值可使用 <code>default</code> 关键字。</li>
<li>如果只有一个参数成员，建议使用参数名为<code>value</code>。</li>
<li>如果定义的注解含有配置参数，那么使用时必须指定参数值，除非它有默认值。格式是“参数名 &#x3D; 参数值”，如果只有一个参数成员，且名称为value， 可以省略“value&#x3D;”。</li>
<li>没有成员定义的 Annotation 称为<code>标记</code>; 包含成员变量的 Annotation 称为元数据 Annotation。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">	String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>Java</tag>
        <tag>Java_基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Java_基础：类初始化顺序</title>
    <url>/Java/Java_%E5%9F%BA%E7%A1%80%EF%BC%9A%E7%B1%BB%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%BA%E5%BA%8F/</url>
    <content><![CDATA[<h2 id="类初始化顺序"><a href="#类初始化顺序" class="headerlink" title="类初始化顺序"></a>类初始化顺序</h2><ul>
<li><code>父类静态变量/静态初始化块</code> -&gt; <code>子类静态变量/静态初始化块</code> -&gt; <code>父类变量/初始化块</code> -&gt;  <code>父类构造器</code> -&gt; <code>子类变量/初始化块</code> -&gt; <code>子类构造器</code></li>
</ul>
<span id="more"></span>

<h2 id="普通类初始化"><a href="#普通类初始化" class="headerlink" title="普通类初始化"></a>普通类初始化</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">sVariable</span> <span class="operator">=</span> sPrint(<span class="string">&quot;静态变量&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">variable</span> <span class="operator">=</span> print(<span class="string">&quot;普通变量&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;普通代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Base</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造函数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">sPrint</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        System.out.println(str);</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">print</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        System.out.println(str);</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Base</span> <span class="variable">base</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Base</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">静态变量</span><br><span class="line">静态代码块</span><br><span class="line">普通变量</span><br><span class="line">普通代码块</span><br><span class="line">构造函数</span><br></pre></td></tr></table></figure>

<h2 id="继承类初始化"><a href="#继承类初始化" class="headerlink" title="继承类初始化"></a>继承类初始化</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">sVariable</span> <span class="operator">=</span> sPrint(<span class="string">&quot;父类静态变量&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">variable</span> <span class="operator">=</span> print(<span class="string">&quot;父类普通变量&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类普通代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Base</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类构造函数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">sPrint</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        System.out.println(str);</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">print</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        System.out.println(str);</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sub</span> <span class="keyword">extends</span> <span class="title class_">Base</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">sVariable</span> <span class="operator">=</span> sPrint(<span class="string">&quot;子类静态变量&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">variable</span> <span class="operator">=</span> print(<span class="string">&quot;子类普通变量&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子类静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子类普通代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Sub</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子类构造函数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">sPrint</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        System.out.println(str);</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">print</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        System.out.println(str);</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Base</span> <span class="variable">base</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Sub</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">父类静态变量</span><br><span class="line">父类静态代码块</span><br><span class="line">子类静态变量</span><br><span class="line">子类静态代码块</span><br><span class="line">父类普通变量</span><br><span class="line">父类普通代码块</span><br><span class="line">父类构造函数</span><br><span class="line">子类普通变量</span><br><span class="line">子类普通代码块</span><br><span class="line">子类构造函数</span><br></pre></td></tr></table></figure>

<h2 id="笔试题"><a href="#笔试题" class="headerlink" title="笔试题"></a>笔试题</h2><h3 id="案例一"><a href="#案例一" class="headerlink" title="案例一"></a>案例一</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. 先执行父类构造方法</span></span><br><span class="line"><span class="comment"> * 2. new的实例是Sub子类，所以父类构造方法调用的是子类重写的print方法</span></span><br><span class="line"><span class="comment"> * 3. 父类构造方法执行完后，才初始化子类变量，所以输出null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;base&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Base</span><span class="params">()</span> &#123;</span><br><span class="line">        print();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Sub</span> <span class="keyword">extends</span> <span class="title class_">Base</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;sub&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(name) ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Base</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Sub</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="literal">null</span></span><br></pre></td></tr></table></figure>

<h3 id="案例二"><a href="#案例二" class="headerlink" title="案例二"></a>案例二</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 规则1：在类第一次加载的时候，将会进行静态域的初始化：</span></span><br><span class="line"><span class="comment"> *      1.将所有的静态数据域初始化为默认值（0、false 和 null）；</span></span><br><span class="line"><span class="comment"> *      2.按照在类中定义的顺序依次执行静态初始化语句和静态初始化块。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 规则2：调用构造器的具体处理步骤：</span></span><br><span class="line"><span class="comment"> *      1.将所有的数据域初始化为默认值（0、false 和 null）；</span></span><br><span class="line"><span class="comment"> *      2.按照在类中定义的顺序依次执行初始化语句和初始化块；</span></span><br><span class="line"><span class="comment"> *      3.如果构造器调用的其他的构造器，则转而执行另一构造器；</span></span><br><span class="line"><span class="comment"> *      4.执行构造器主体。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">Base</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Base</span>(<span class="string">&quot;b1&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">Base</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Base</span>(<span class="string">&quot;b2&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> print(<span class="string">&quot;i&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">99</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> print(<span class="string">&quot;j&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        print(<span class="string">&quot;构造块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        print(<span class="string">&quot;静态块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Base</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        System.out.println((++k) + <span class="string">&quot;:&quot;</span> + str + <span class="string">&quot;    i=&quot;</span> + i + <span class="string">&quot;    n=&quot;</span> + n);</span><br><span class="line">        ++i;</span><br><span class="line">        ++n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">print</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        System.out.println((++k) + <span class="string">&quot;:&quot;</span> + str + <span class="string">&quot;    i=&quot;</span> + i + <span class="string">&quot;    n=&quot;</span> + n);</span><br><span class="line">        ++n;</span><br><span class="line">        <span class="keyword">return</span> ++i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        <span class="type">Base</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Base</span>(<span class="string">&quot;init&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>:j    i=<span class="number">0</span>    n=<span class="number">0</span></span><br><span class="line"><span class="number">2</span>:构造块    i=<span class="number">1</span>    n=<span class="number">1</span></span><br><span class="line"><span class="number">3</span>:b1    i=<span class="number">2</span>    n=<span class="number">2</span></span><br><span class="line"><span class="number">4</span>:j    i=<span class="number">3</span>    n=<span class="number">3</span></span><br><span class="line"><span class="number">5</span>:构造块    i=<span class="number">4</span>    n=<span class="number">4</span></span><br><span class="line"><span class="number">6</span>:b2    i=<span class="number">5</span>    n=<span class="number">5</span></span><br><span class="line"><span class="number">7</span>:i    i=<span class="number">6</span>    n=<span class="number">6</span></span><br><span class="line"><span class="number">8</span>:静态块    i=<span class="number">7</span>    n=<span class="number">99</span></span><br><span class="line"><span class="number">9</span>:j    i=<span class="number">8</span>    n=<span class="number">100</span></span><br><span class="line"><span class="number">10</span>:构造块    i=<span class="number">9</span>    n=<span class="number">101</span></span><br><span class="line"><span class="number">11</span>:init    i=<span class="number">10</span>    n=<span class="number">102</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>Java</tag>
        <tag>Java_基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Java_基础：自增变量</title>
    <url>/Java/Java_%E5%9F%BA%E7%A1%80%EF%BC%9A%E8%87%AA%E5%A2%9E%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        i = i++;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i++;</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> i + ++i * i++;</span><br><span class="line">        System.out.println(<span class="string">&quot;i=&quot;</span> + i);</span><br><span class="line">        System.out.println(<span class="string">&quot;j=&quot;</span> + j);</span><br><span class="line">        System.out.println(<span class="string">&quot;k=&quot;</span> + k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>运行结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">i=<span class="number">4</span></span><br><span class="line">j=<span class="number">1</span></span><br><span class="line">k=<span class="number">11</span></span><br></pre></td></tr></table></figure>

<h2 id="案例解析"><a href="#案例解析" class="headerlink" title="案例解析"></a>案例解析</h2><p><img src="/Java/Java_%E5%9F%BA%E7%A1%80%EF%BC%9A%E8%87%AA%E5%A2%9E%E5%8F%98%E9%87%8F/1.gif" alt="1"><br><img src="/Java/Java_%E5%9F%BA%E7%A1%80%EF%BC%9A%E8%87%AA%E5%A2%9E%E5%8F%98%E9%87%8F/2.gif" alt="2"><br><img src="/Java/Java_%E5%9F%BA%E7%A1%80%EF%BC%9A%E8%87%AA%E5%A2%9E%E5%8F%98%E9%87%8F/3.gif" alt="3"></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>Java</tag>
        <tag>Java_基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Java_多线程：线程池</title>
    <url>/Java/Java_%E5%A4%9A%E7%BA%BF%E7%A8%8B%EF%BC%9A%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
    <content><![CDATA[<h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><ul>
<li><code>线程池 </code> 主要是控制运行的线程数量。<code>处理过程中将任务放入队列</code>，然后在线程创建后启动这些任务，<code>如果线程数量超过了最大数量超出数量大线程排队等候</code>，等其他线程执行完毕，再从队列中取出任务来执行。</li>
<li>主要特点：<code>线程复用</code>、<code>控制最大并发数</code>、<code>管理线程</code>。</li>
</ul>
<span id="more"></span>

<h2 id="线程池优势"><a href="#线程池优势" class="headerlink" title="线程池优势"></a>线程池优势</h2><ul>
<li><code>降低资源消耗 </code> 通过复用利用已创建的线程降低线程创建和销毁造成的消耗。</li>
<li><code>提高响应速度 </code> 当任务到达时，任务可以不需要的等到线程创建就能立即执行。</li>
<li><code>提高线程的可管理性 </code> 线程数稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一分配，调优和监控。</li>
</ul>
<h2 id="线程池分类"><a href="#线程池分类" class="headerlink" title="线程池分类"></a>线程池分类</h2><ul>
<li><code>FixedThreadPool</code> 创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。</li>
<li><code>SingleThreadExecutor</code> 创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。</li>
<li><code>CachedThreadPool</code> 创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。</li>
<li><code>ScheduledThreadPool</code> 创建一个定长线程池，支持定时及周期性任务执行。</li>
</ul>
<h2 id="线程池弊端"><a href="#线程池弊端" class="headerlink" title="线程池弊端"></a>线程池弊端</h2><ul>
<li><code>FixedThreadPool</code>、<code>SingleThreadExecutor</code> 允许的请求队列长度为Integer.MAX_VALUE，可能会堆积大量的请求，从而导致OOM。</li>
<li><code>CachedThreadPool</code>、<code>ScheduledThreadPool</code> 允许的创建线程数量为Integer.MAX_VALUE，可能会创建大量的线程，从而导致OOM。</li>
</ul>
<h2 id="线程池示意图"><a href="#线程池示意图" class="headerlink" title="线程池示意图"></a>线程池示意图</h2><p><img src="/Java/Java_%E5%A4%9A%E7%BA%BF%E7%A8%8B%EF%BC%9A%E7%BA%BF%E7%A8%8B%E6%B1%A0/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="线程池示意图"></p>
<h2 id="7大参数"><a href="#7大参数" class="headerlink" title="7大参数"></a>7大参数</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> corePoolSize 初始化线程数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> maximumPoolSize 最大线程数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> keepAliveTime 多余的空闲线程等待新任务的最长时间</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> unit keepAliveTime单位</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> workQueue 任务等待队列</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> threadFactory 线程工厂，用于创建线程</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> handler 拒绝策略</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ThreadPoolExecutor</span><span class="params">(<span class="type">int</span> corePoolSize,</span></span><br><span class="line"><span class="params">                          <span class="type">int</span> maximumPoolSize,</span></span><br><span class="line"><span class="params">                          <span class="type">long</span> keepAliveTime,</span></span><br><span class="line"><span class="params">                          TimeUnit unit,</span></span><br><span class="line"><span class="params">                          BlockingQueue&lt;Runnable&gt; workQueue,</span></span><br><span class="line"><span class="params">                          ThreadFactory threadFactory,</span></span><br><span class="line"><span class="params">                          RejectedExecutionHandler handler)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (corePoolSize &lt; <span class="number">0</span> ||</span><br><span class="line">            maximumPoolSize &lt;= <span class="number">0</span> ||</span><br><span class="line">            maximumPoolSize &lt; corePoolSize ||</span><br><span class="line">            keepAliveTime &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">    <span class="keyword">if</span> (workQueue == <span class="literal">null</span> || threadFactory == <span class="literal">null</span> || handler == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">    <span class="built_in">this</span>.acc = System.getSecurityManager() == <span class="literal">null</span> ?</span><br><span class="line">            <span class="literal">null</span> :</span><br><span class="line">            AccessController.getContext();</span><br><span class="line">    <span class="built_in">this</span>.corePoolSize = corePoolSize;</span><br><span class="line">    <span class="built_in">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class="line">    <span class="built_in">this</span>.workQueue = workQueue;</span><br><span class="line">    <span class="built_in">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class="line">    <span class="built_in">this</span>.threadFactory = threadFactory;</span><br><span class="line">    <span class="built_in">this</span>.handler = handler;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4种拒绝策略"><a href="#4种拒绝策略" class="headerlink" title="4种拒绝策略"></a>4种拒绝策略</h2><ul>
<li><code>AbortPolicy</code> 默认策略，终止任务，抛出RejectedException。</li>
<li><code>CallerRunsPolicy</code> 在调用者线程执行当前任务，不抛异常。</li>
<li><code>DiscardPolicy</code> 抛弃策略，直接丢弃任务，不抛异常。</li>
<li><code>DiscardOldersPolicy</code> 抛弃最老的任务，执行当前任务，不抛异常。</li>
</ul>
<h2 id="线程池合理配置（最大线程数）"><a href="#线程池合理配置（最大线程数）" class="headerlink" title="线程池合理配置（最大线程数）"></a>线程池合理配置（最大线程数）</h2><h3 id="CPU密集型"><a href="#CPU密集型" class="headerlink" title="CPU密集型"></a>CPU密集型</h3><ul>
<li>该任务需要大量的运算，而没有阻塞，CPU一直全速运行。公式：<code>CPU核数 + 1个线程数</code></li>
</ul>
<h3 id="IO密集型"><a href="#IO密集型" class="headerlink" title="IO密集型"></a>IO密集型</h3><ul>
<li>方式一：由于IO密集型任务线程并不是一直在执行任务，则应配置尽可能多的线程。公式：<code>CPU核数 * 2</code></li>
<li>方式二：IO密集型时，大部分线程都阻塞，故需要多配置线程数。公式：<code>CPU核数 / (1 - 阻塞系数)</code>，说明：阻塞系数在0.8～0.9之间</li>
</ul>
<h2 id="线程池优雅关闭"><a href="#线程池优雅关闭" class="headerlink" title="线程池优雅关闭"></a>线程池优雅关闭</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">gracefulShutDown</span><span class="params">()</span> &#123;</span><br><span class="line">    Runtime.getRuntime().addShutdownHook(<span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; shutDownThreadPool(threadPool, <span class="string">&quot;threadPoolName&quot;</span>)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 优雅关闭线程池（自身关闭，await 60s，强制关闭）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> threadPool</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> alias</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">shutdownThreadPool</span><span class="params">(ExecutorService threadPool, String alias)</span> &#123;</span><br><span class="line">   log.info(<span class="string">&quot;Start to shutdown the thead pool: &#123;&#125;&quot;</span>, alias);</span><br><span class="line"></span><br><span class="line">   threadPool.shutdown(); <span class="comment">// 使新任务无法提交.</span></span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 等待未完成任务结束</span></span><br><span class="line">      <span class="keyword">if</span> (!threadPool.awaitTermination(<span class="number">60</span>, TimeUnit.SECONDS)) &#123;</span><br><span class="line">         threadPool.shutdownNow(); <span class="comment">// 取消当前执行的任务</span></span><br><span class="line">         log.warn(<span class="string">&quot;Interrupt the worker, which may cause some task inconsistent.&quot;</span>);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 等待任务取消的响应</span></span><br><span class="line">         <span class="keyword">if</span> (!threadPool.awaitTermination(<span class="number">60</span>, TimeUnit.SECONDS))</span><br><span class="line">            log.error(<span class="string">&quot;Thread pool can&#x27;t be shutdown even with interrupting worker threads, which may cause some task inconsistent. &quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125; <span class="keyword">catch</span> (InterruptedException ie) &#123;</span><br><span class="line">      <span class="comment">// 重新取消当前线程进行中断</span></span><br><span class="line">      threadPool.shutdownNow();</span><br><span class="line">      log.error(<span class="string">&quot;The current server thread is interrupted when it is trying to stop the worker threads. This may leave an inconcistent state.&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 保留中断状态</span></span><br><span class="line">      Thread.currentThread().interrupt();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   log.info(<span class="string">&quot;Finally shutdown the thead pool: &#123;&#125;&quot;</span>, alias);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>Java</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>Java_多线程：线程等待与唤醒</title>
    <url>/Java/Java_%E5%A4%9A%E7%BA%BF%E7%A8%8B%EF%BC%9A%E7%BA%BF%E7%A8%8B%E7%AD%89%E5%BE%85%E4%B8%8E%E5%94%A4%E9%86%92/</url>
    <content><![CDATA[<h2 id="Object类wait-x2F-notify方法"><a href="#Object类wait-x2F-notify方法" class="headerlink" title="Object类wait&#x2F;notify方法"></a>Object类wait&#x2F;notify方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Object</span> <span class="variable">objlock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (objlock) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot; -&gt; start&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot; -&gt; wait&quot;</span>);</span><br><span class="line">                    objlock.wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot; -&gt; end&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (objlock) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot; -&gt; notify&quot;</span>);</span><br><span class="line">                objlock.notify();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A -&gt; start</span></span><br><span class="line"><span class="comment">// A -&gt; wait</span></span><br><span class="line"><span class="comment">// B -&gt; notify</span></span><br><span class="line"><span class="comment">// A -&gt; end</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="Condition接口await-x2F-signal方法"><a href="#Condition接口await-x2F-signal方法" class="headerlink" title="Condition接口await&#x2F;signal方法"></a>Condition接口await&#x2F;signal方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Condition</span> <span class="variable">condition</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot; -&gt; start&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot; -&gt; await&quot;</span>);</span><br><span class="line">                    condition.await();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot; -&gt; end&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot; -&gt; signal&quot;</span>);</span><br><span class="line">                condition.signal();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A -&gt; start</span></span><br><span class="line"><span class="comment">// A -&gt; await</span></span><br><span class="line"><span class="comment">// B -&gt; signal</span></span><br><span class="line"><span class="comment">// A -&gt; end</span></span><br></pre></td></tr></table></figure>

<h2 id="LockSupport类park-x2F-unpark方法"><a href="#LockSupport类park-x2F-unpark方法" class="headerlink" title="LockSupport类park&#x2F;unpark方法"></a>LockSupport类park&#x2F;unpark方法</h2><p>park和unpark方法阻塞与解除线程阻塞的过程 </p>
<ul>
<li>每个使用LockSupport的线程都有一个许可(permit)关联。permit相当于1，0的开关，默认是0；</li>
<li>调用一次unpark，permit就变为1，调用一次park，permit就变成0；</li>
<li>如果多次调用unpark和park，是否会堵塞则取决于permit是1还是0；</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; -&gt; start&quot;</span>);</span><br><span class="line"></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; -&gt; park&quot;</span>);</span><br><span class="line">            LockSupport.park(); <span class="comment">// 被阻塞，等待通知放行</span></span><br><span class="line"></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; -&gt; end&quot;</span>);</span><br><span class="line">        &#125;, <span class="string">&quot;A&quot;</span>);</span><br><span class="line">        a.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; -&gt; unpark&quot;</span>);</span><br><span class="line">            LockSupport.unpark(a);  <span class="comment">// 唤醒指定线程，如果先执行unpark再执行park，park相当于无效作用</span></span><br><span class="line">        &#125;, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A -&gt; start</span></span><br><span class="line"><span class="comment">// A -&gt; park</span></span><br><span class="line"><span class="comment">// B -&gt; unpark</span></span><br><span class="line"><span class="comment">// A -&gt; end</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>Java</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>Java_锁机制：CAS</title>
    <url>/Java/Java_%E9%94%81%E6%9C%BA%E5%88%B6%EF%BC%9ACAS/</url>
    <content><![CDATA[<h2 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h2><ul>
<li>CAS 全称是 <code>Compare And Swap</code>，即比较并交换，一种用于在多线程环境下实现同步功能的机制，是利用底层硬件平台特性，实现原子性操作的算法。</li>
<li>CAS 的思想很简单：三个参数，一个当前内存值 V、旧的预期值 A、即将更新的值 B，当且仅当预期值 A 和内存值 V 相同时，将内存值修改为 B 并返回 true，否则什么都不做，并返回 false。</li>
</ul>
<span id="more"></span>

<h2 id="CAS源码分析"><a href="#CAS源码分析" class="headerlink" title="CAS源码分析"></a>CAS源码分析</h2><h3 id="AtomicInteger"><a href="#AtomicInteger" class="headerlink" title="AtomicInteger"></a>AtomicInteger</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getAndIncrement</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> unsafe.getAndAddInt(<span class="built_in">this</span>, valueOffset, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Unsafe"><a href="#Unsafe" class="headerlink" title="Unsafe"></a>Unsafe</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. 用该对象当前的值与var5比较</span></span><br><span class="line"><span class="comment"> * 2. 如果相同, 更新var5 + var4并且返回true</span></span><br><span class="line"><span class="comment"> * 3. 如果不同, 继续取值然后再比较, 直到更新完成</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> var1 AtomicInteger对象本身</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> var2 该对象值的引用地址</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> var4 需要变动的值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> var5 通过var1, var2找出的主内存中的真实值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getAndAddInt</span><span class="params">(Object var1, <span class="type">long</span> var2, <span class="type">int</span> var4)</span> &#123;</span><br><span class="line">    <span class="type">int</span> var5;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        var5 = <span class="built_in">this</span>.getIntVolatile(var1, var2);</span><br><span class="line">    &#125; <span class="keyword">while</span>(!<span class="built_in">this</span>.compareAndSwapInt(var1, var2, var5, var5 + var4));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> var5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="CAS三大问题"><a href="#CAS三大问题" class="headerlink" title="CAS三大问题"></a>CAS三大问题</h2><h3 id="ABA问题"><a href="#ABA问题" class="headerlink" title="ABA问题"></a>ABA问题</h3><ul>
<li><p>因为CAS需要在操作值的时候，检查值有没有发生变化，比如没有发生变化则更新，但是如果一个值原来是A，变成了B，又变成了A，那么使用CAS进行检查时则会发现它的值没有发生变化，但是实际上却变化了。</p>
</li>
<li><p>ABA问题的解决思路就是使用版本号。在变量前面追加上版本号，每次变量更新的时候把版本号加1，那么A-&gt;B-&gt;A就会变成1A-&gt;2B-&gt;3A。</p>
</li>
<li><p>从Java 1.5开始，JDK的Atomic包里提供了一个类<code>AtomicStampedReference</code>来解决ABA问题。这个类的compareAndSet方法的作用是首先检查当前引用是否等于预期引用，并且检查当前标志是否等于预期标志，如果全部相等，则以原子方式将该引用和该标志的值设置为给定的更新值。</p>
</li>
</ul>
<h3 id="循环时间长开销大"><a href="#循环时间长开销大" class="headerlink" title="循环时间长开销大"></a>循环时间长开销大</h3><ul>
<li>自旋CAS如果长时间不成功，会给CPU带来非常大的执行开销。如果JVM能支持处理器提供的pause指令，那么效率会有一定的提升。pause指令有两个作用：第一，它可以延迟流水线执行命令（de-pipeline），使CPU不会消耗过多的执行资源，延迟的时间取决于具体实现的版本，在一些处理器上延迟时间是零；第二，它可以避免在退出循环的时候因内存顺序冲突（Memory Order Violation）而引起CPU流水线被清空（CPU Pipeline Flush），从而提高CPU的执行效率。</li>
</ul>
<h3 id="只能保证一个共享变量的原子操作"><a href="#只能保证一个共享变量的原子操作" class="headerlink" title="只能保证一个共享变量的原子操作"></a>只能保证一个共享变量的原子操作</h3><ul>
<li><p>当对一个共享变量执行操作时，我们可以使用循环CAS的方式来保证原子操作，但是对多个共享变量操作时，循环CAS就无法保证操作的原子性，这个时候就可以用锁。</p>
</li>
<li><p>从Java 1.5开始，JDK提供了<code>AtomicReference</code>类来保证引用对象之间的原子性，就可以把多个变量放在一个对象里来进行CAS操作。</p>
</li>
</ul>
<h2 id="ABA问题与解决"><a href="#ABA问题与解决" class="headerlink" title="ABA问题与解决"></a>ABA问题与解决</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicReference;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicStampedReference;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CASDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">abaProblemProduce</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------以下是ABA问题的产生-----------------&quot;</span>);</span><br><span class="line">        AtomicReference&lt;String&gt; atomicReference = <span class="keyword">new</span> <span class="title class_">AtomicReference</span>(<span class="string">&quot;A&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> atomicReference.compareAndSet(<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>);</span><br><span class="line">            System.out.printf(<span class="string">&quot;%s -&gt; 是否修改成功: %b, 当前值: %s\n&quot;</span>,</span><br><span class="line">                    Thread.currentThread().getName(), flag, atomicReference.get());</span><br><span class="line"></span><br><span class="line">            flag = atomicReference.compareAndSet(<span class="string">&quot;B&quot;</span>, <span class="string">&quot;A&quot;</span>);</span><br><span class="line">            System.out.printf(<span class="string">&quot;%s -&gt; 是否修改成功: %b, 当前值: %s\n&quot;</span>,</span><br><span class="line">                    Thread.currentThread().getName(), flag, atomicReference.get());</span><br><span class="line">        &#125;, <span class="string">&quot;Thread-1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="comment">// 暂停1秒, 保证Thread-1线程完成一次ABA操作</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> atomicReference.compareAndSet(<span class="string">&quot;A&quot;</span>, <span class="string">&quot;C&quot;</span>);</span><br><span class="line">            System.out.printf(<span class="string">&quot;%s -&gt; 是否修改成功: %b, 当前值: %s\n&quot;</span>,</span><br><span class="line">                    Thread.currentThread().getName(), flag, atomicReference.get());</span><br><span class="line">        &#125;, <span class="string">&quot;Thread-2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">abaProblemSolve</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------以下是ABA问题的解决-----------------&quot;</span>);</span><br><span class="line">        AtomicStampedReference&lt;String&gt; atomicStampedReference = <span class="keyword">new</span> <span class="title class_">AtomicStampedReference</span>(<span class="string">&quot;A&quot;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">stamp</span> <span class="operator">=</span> atomicStampedReference.getStamp();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 暂停1秒, 让Thread-4线程能获取到第1次版本号</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> atomicStampedReference.compareAndSet(<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, stamp, stamp + <span class="number">1</span>);</span><br><span class="line">            System.out.printf(<span class="string">&quot;%s -&gt; 是否修改成功: %b, 当前值: %s, 更新前版本号: %s\n&quot;</span>,</span><br><span class="line">                    Thread.currentThread().getName(), flag, atomicStampedReference.getReference(), stamp);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            stamp = atomicStampedReference.getStamp();</span><br><span class="line">            flag = atomicStampedReference.compareAndSet(<span class="string">&quot;B&quot;</span>, <span class="string">&quot;A&quot;</span>, stamp, stamp + <span class="number">1</span>);</span><br><span class="line">            System.out.printf(<span class="string">&quot;%s -&gt; 是否修改成功: %b, 当前值: %s, 更新前版本号: %s\n&quot;</span>,</span><br><span class="line">                    Thread.currentThread().getName(), flag, atomicStampedReference.getReference(), stamp);</span><br><span class="line">        &#125;, <span class="string">&quot;Thread-3&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">stamp</span> <span class="operator">=</span> atomicStampedReference.getStamp();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 暂停3秒, 保证Thread-3线程完成一次ABA操作</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> atomicStampedReference.compareAndSet(<span class="string">&quot;A&quot;</span>, <span class="string">&quot;C&quot;</span>, stamp, stamp + <span class="number">1</span>);</span><br><span class="line">            System.out.printf(<span class="string">&quot;%s -&gt; 是否修改成功: %b, 当前值: %s, 更新前版本号: %s\n&quot;</span>,</span><br><span class="line">                    Thread.currentThread().getName(), flag, atomicStampedReference.getReference(), stamp);</span><br><span class="line">        &#125;, <span class="string">&quot;Thread-4&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">CASDemo</span> <span class="variable">demo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CASDemo</span>();</span><br><span class="line"></span><br><span class="line">        demo.abaProblemProduce();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        demo.abaProblemSolve();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">-----------------以下是ABA问题的产生-----------------</span><br><span class="line">Thread-<span class="number">1</span> -&gt; 是否修改成功: <span class="literal">true</span>, 当前值: B</span><br><span class="line">Thread-<span class="number">1</span> -&gt; 是否修改成功: <span class="literal">true</span>, 当前值: A</span><br><span class="line">Thread-<span class="number">2</span> -&gt; 是否修改成功: <span class="literal">true</span>, 当前值: C</span><br><span class="line">-----------------以下是ABA问题的解决-----------------</span><br><span class="line">Thread-<span class="number">3</span> -&gt; 是否修改成功: <span class="literal">true</span>, 当前值: B, 更新前版本号: <span class="number">1</span></span><br><span class="line">Thread-<span class="number">3</span> -&gt; 是否修改成功: <span class="literal">true</span>, 当前值: A, 更新前版本号: <span class="number">2</span></span><br><span class="line">Thread-<span class="number">4</span> -&gt; 是否修改成功: <span class="literal">false</span>, 当前值: A, 更新前版本号: <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://mritd.me/2017/02/06/java-cas/">漠然</a></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>Java</tag>
        <tag>锁机制</tag>
      </tags>
  </entry>
  <entry>
    <title>Java_锁机制：死锁</title>
    <url>/Java/Java_%E9%94%81%E6%9C%BA%E5%88%B6%EF%BC%9A%E6%AD%BB%E9%94%81/</url>
    <content><![CDATA[<style>
[alt=JConsole] {
        max-width: 60%!important;
}
</style>

<h2 id="死锁概述"><a href="#死锁概述" class="headerlink" title="死锁概述"></a>死锁概述</h2><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><ul>
<li>不同的线程分别占用对方需要的同步资源不放弃，都在等待对方放弃自己需要的同步资源，就形成了线程的死锁</li>
<li>出现死锁后，不会出现异常，不会出现提示，只是所有的线程都处于阻塞状态，无法继续</li>
</ul>
<span id="more"></span>

<h3 id="死锁出现原因"><a href="#死锁出现原因" class="headerlink" title="死锁出现原因"></a>死锁出现原因</h3><ul>
<li>存在两个或者两个以上的线程</li>
<li>存在两个或者两个以上的共享资源</li>
</ul>
<h3 id="死锁解决方法"><a href="#死锁解决方法" class="headerlink" title="死锁解决方法"></a>死锁解决方法</h3><ul>
<li>没有方案。只能尽量避免发生而已</li>
</ul>
<h3 id="死锁预防"><a href="#死锁预防" class="headerlink" title="死锁预防"></a>死锁预防</h3><ul>
<li>加锁顺序（线程按照一定的顺序加锁）</li>
<li>加锁时限（线程尝试获取锁的时候加上一定的时限，超过时限则放弃对该锁的请求，并释放自己占有的锁）</li>
<li>死锁检测</li>
</ul>
<h2 id="死锁场景"><a href="#死锁场景" class="headerlink" title="死锁场景"></a>死锁场景</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeadLockDemo</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Object</span> <span class="variable">A</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>(), B = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;线程1 开始执行...&quot;</span>);</span><br><span class="line">            <span class="keyword">synchronized</span> (A) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;线程1 拿到A锁&quot;</span>);</span><br><span class="line">                    Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">synchronized</span> (B) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;线程1 拿到B锁&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;线程2 开始执行...&quot;</span>);</span><br><span class="line">            <span class="keyword">synchronized</span> (B) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;线程2 拿到B锁&quot;</span>);</span><br><span class="line">                    Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">synchronized</span> (A) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;线程2 拿到A锁&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="死锁检测"><a href="#死锁检测" class="headerlink" title="死锁检测"></a>死锁检测</h2><h3 id="Jstack"><a href="#Jstack" class="headerlink" title="Jstack"></a>Jstack</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~  jps</span><br><span class="line">    35344 Launcher</span><br><span class="line">    26355</span><br><span class="line">    35352 Jps</span><br><span class="line">    35343 DeadLockDemo</span><br><span class="line"></span><br><span class="line"> ~  jstack -l 35343</span><br><span class="line">    .....</span><br><span class="line">    .....</span><br><span class="line">    Found one Java-level deadlock:</span><br><span class="line">    =============================</span><br><span class="line">    <span class="string">&quot;Thread-1&quot;</span>:</span><br><span class="line">      waiting to lock monitor 0x00007feee08090a8 (object 0x000000076acb80c8, a java.lang.Object),</span><br><span class="line">      <span class="built_in">which</span> is held by <span class="string">&quot;Thread-0&quot;</span></span><br><span class="line">    <span class="string">&quot;Thread-0&quot;</span>:</span><br><span class="line">      waiting to lock monitor 0x00007feee0806818 (object 0x000000076acb80d8, a java.lang.Object),</span><br><span class="line">      <span class="built_in">which</span> is held by <span class="string">&quot;Thread-1&quot;</span></span><br><span class="line">    </span><br><span class="line">    Java stack information <span class="keyword">for</span> the threads listed above:</span><br><span class="line">    ===================================================</span><br><span class="line">    <span class="string">&quot;Thread-1&quot;</span>:</span><br><span class="line">    	at com.example.demo.DeadLockDemo.lambda$main<span class="variable">$1</span>(DeadLockDemo.java:34)</span><br><span class="line">    	- waiting to lock &lt;0x000000076acb80c8&gt; (a java.lang.Object)</span><br><span class="line">    	- locked &lt;0x000000076acb80d8&gt; (a java.lang.Object)</span><br><span class="line">    	at com.example.demo.DeadLockDemo$$Lambda<span class="variable">$2</span>/935044096.run(Unknown Source)</span><br><span class="line">    	at java.lang.Thread.run(Thread.java:748)</span><br><span class="line">    <span class="string">&quot;Thread-0&quot;</span>:</span><br><span class="line">    	at com.example.demo.DeadLockDemo.lambda$main<span class="variable">$0</span>(DeadLockDemo.java:19)</span><br><span class="line">    	- waiting to lock &lt;0x000000076acb80d8&gt; (a java.lang.Object)</span><br><span class="line">    	- locked &lt;0x000000076acb80c8&gt; (a java.lang.Object)</span><br><span class="line">    	at com.example.demo.DeadLockDemo$$Lambda<span class="variable">$1</span>/1128032093.run(Unknown Source)</span><br><span class="line">    	at java.lang.Thread.run(Thread.java:748)</span><br></pre></td></tr></table></figure>

<h3 id="JConsole"><a href="#JConsole" class="headerlink" title="JConsole"></a>JConsole</h3><ul>
<li><p>打开JDK自带的图形化界面工具，终端输入：jconsole<br><img src="/Java/Java_%E9%94%81%E6%9C%BA%E5%88%B6%EF%BC%9A%E6%AD%BB%E9%94%81/JConsole.jpg" alt="JConsole"></p>
</li>
<li><p>选择 线程 -&gt; 检测死锁<br><img src="/Java/Java_%E9%94%81%E6%9C%BA%E5%88%B6%EF%BC%9A%E6%AD%BB%E9%94%81/JConsole%E6%AD%BB%E9%94%81%E6%A3%80%E6%B5%8B.jpg" alt="JConsole死锁检测"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>Java</tag>
        <tag>锁机制</tag>
      </tags>
  </entry>
  <entry>
    <title>Java_并发：CountDownLatch计数器</title>
    <url>/Java/Java_%E5%B9%B6%E5%8F%91%EF%BC%9ACountDownLatch%E8%AE%A1%E6%95%B0%E5%99%A8/</url>
    <content><![CDATA[<style>
[alt=CountDownLatch执行流程] {
        max-width: 50%!important;
}
</style>

<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><ul>
<li><code>CountDownLatch</code>计数器，是一个同步辅助类，在完成一组正在其他线程中执行的操作之前，它允许一个或多个线程一直等待。</li>
</ul>
<span id="more"></span>

<p><img src="/Java/Java_%E5%B9%B6%E5%8F%91%EF%BC%9ACountDownLatch%E8%AE%A1%E6%95%B0%E5%99%A8/CountDownLatch%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.gif" alt="CountDownLatch执行流程"></p>
<h2 id="2-使用场景"><a href="#2-使用场景" class="headerlink" title="2. 使用场景"></a>2. 使用场景</h2><p><code>CountDownLatch</code>的典型用法是将一个程序分成独立的N个子任务，并创建一个值为N的<code>CountDownLatch</code>，每个子任务执行完就调用<code>countDown()</code>，等待问题被解决的任务调用这个锁的<code>await()</code>，直到所有子任务执行完才能继续往下执行。</p>
<h2 id="3-应用示例"><a href="#3-应用示例" class="headerlink" title="3. 应用示例"></a>3. 应用示例</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CountDownLatchDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String[] country = &#123;<span class="string">&quot;齐&quot;</span>, <span class="string">&quot;楚&quot;</span>, <span class="string">&quot;燕&quot;</span>, <span class="string">&quot;赵&quot;</span>, <span class="string">&quot;魏&quot;</span>, <span class="string">&quot;韩&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">CountDownLatch</span> <span class="variable">latch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(country.length);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; country.length; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;国被灭..&quot;</span>);</span><br><span class="line">                <span class="comment">// 减少锁存器的计数，如果计数达到零，释放所有等待的线程</span></span><br><span class="line">                latch.countDown();</span><br><span class="line">            &#125;, country[i]).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 等到锁存器计数到零</span></span><br><span class="line">            latch.await();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;秦灭六国，一统华夏..&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>运行结果：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">齐国被灭..</span><br><span class="line">赵国被灭..</span><br><span class="line">燕国被灭..</span><br><span class="line">楚国被灭..</span><br><span class="line">韩国被灭..</span><br><span class="line">魏国被灭..</span><br><span class="line">秦灭六国，一统华夏..</span><br></pre></td></tr></table></figure>

<h2 id="4-实现原理"><a href="#4-实现原理" class="headerlink" title="4. 实现原理"></a>4. 实现原理</h2><ul>
<li><code>CountDownLatch</code>基于<code>AQS(AbstractQueuedSynchronizer，队列同步器)</code>的 <strong>“共享模式”</strong>，以<code>AQS</code>的<code>int</code>类型变量<code>state</code>记录同步状态，用一个双向链表为实现的 <strong>FIFO队列</strong> 记录每一个阻塞等待的线程，让线程自旋等待（利用<code>LockSupport.park()</code>的线程同步原语让线程阻塞），直到countDown到0，才解除线程自旋（利用<code>LockSupport.unpark()</code>的线程同步原语唤醒线程），让所有阻塞等待的线程往下执行。</li>
</ul>
<h2 id="5-源码分析"><a href="#5-源码分析" class="headerlink" title="5. 源码分析"></a>5. 源码分析</h2><h3 id="5-1-主要内部类"><a href="#5-1-主要内部类" class="headerlink" title="5.1. 主要内部类"></a>5.1. 主要内部类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Sync</span> <span class="keyword">extends</span> <span class="title class_">AbstractQueuedSynchronizer</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">4982264981922014374L</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置当前计数器的值</span></span><br><span class="line">        Sync(<span class="type">int</span> count) &#123;</span><br><span class="line">            setState(count);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取当前计数器的值</span></span><br><span class="line">        <span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> getState();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 尝试获取共享锁</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">tryAcquireShared</span><span class="params">(<span class="type">int</span> acquires)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (getState() == <span class="number">0</span>) ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 尝试释放共享锁</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">tryReleaseShared</span><span class="params">(<span class="type">int</span> releases)</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> getState();</span><br><span class="line">                <span class="keyword">if</span> (c == <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                <span class="type">int</span> <span class="variable">nextc</span> <span class="operator">=</span> c-<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (compareAndSetState(c, nextc))</span><br><span class="line">                    <span class="type">return</span> <span class="variable">nextc</span> <span class="operator">=</span>= <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-2-构造方法"><a href="#5-2-构造方法" class="headerlink" title="5.2. 构造方法"></a>5.2. 构造方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构造函数调用时，count参数赋值给AQS的private volatile int state;，用来记录同步状态</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">CountDownLatch</span><span class="params">(<span class="type">int</span> count)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (count &lt; <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;count &lt; 0&quot;</span>);</span><br><span class="line">    <span class="built_in">this</span>.sync = <span class="keyword">new</span> <span class="title class_">Sync</span>(count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-3-await-方法"><a href="#5-3-await-方法" class="headerlink" title="5.3. await()方法"></a>5.3. await()方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 该方法调用内部类Sync为类型的sync变量实现。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">await</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        sync.acquireSharedInterruptibly(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-3-1-acquireSharedInterruptibly-方法"><a href="#5-3-1-acquireSharedInterruptibly-方法" class="headerlink" title="5.3.1. acquireSharedInterruptibly()方法"></a>5.3.1. acquireSharedInterruptibly()方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以可中断模式获取锁(共享模式)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">acquireSharedInterruptibly</span><span class="params">(<span class="type">int</span> arg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="comment">// 如果线程被中断，则抛出中断异常</span></span><br><span class="line">        <span class="keyword">if</span> (Thread.interrupted())</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InterruptedException</span>();</span><br><span class="line">        <span class="comment">// 尝试获取共享锁</span></span><br><span class="line">        <span class="keyword">if</span> (tryAcquireShared(arg) &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="comment">// 进入等待队列</span></span><br><span class="line">            doAcquireSharedInterruptibly(arg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="5-3-2-tryAcquireShared-方法"><a href="#5-3-2-tryAcquireShared-方法" class="headerlink" title="5.3.2. tryAcquireShared()方法"></a>5.3.2. tryAcquireShared()方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 尝试获取共享锁</span></span><br><span class="line"><span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">tryAcquireShared</span><span class="params">(<span class="type">int</span> acquires)</span> &#123;</span><br><span class="line">        <span class="comment">// state==0，表示获取成功；state&gt;0，表示获取失败</span></span><br><span class="line">        <span class="keyword">return</span> (getState() == <span class="number">0</span>) ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="5-3-3-doAcquireSharedInterruptibly-方法"><a href="#5-3-3-doAcquireSharedInterruptibly-方法" class="headerlink" title="5.3.3. doAcquireSharedInterruptibly()方法"></a>5.3.3. doAcquireSharedInterruptibly()方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 进入等待队列</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doAcquireSharedInterruptibly</span><span class="params">(<span class="type">int</span> arg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="comment">// 增加新节点到队列末端（该队列用双向链表实现），该节点持有当前线程的引用</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> addWaiter(Node.SHARED);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">failed</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="comment">// 判断是否是head节点</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">Node</span> <span class="variable">p</span> <span class="operator">=</span> node.predecessor();</span><br><span class="line">            <span class="keyword">if</span> (p == head) &#123;</span><br><span class="line">                <span class="comment">// 尝试获取共享锁</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> tryAcquireShared(arg);</span><br><span class="line">                <span class="comment">// 如果获取成功，把当前节点设置成head节点。并唤醒等待队列的后继节点，结束该方法</span></span><br><span class="line">                <span class="keyword">if</span> (r &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    setHeadAndPropagate(node, r);</span><br><span class="line">                    p.next = <span class="literal">null</span>; <span class="comment">// help GC</span></span><br><span class="line">                    failed = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 让等待节点阻塞等待</span></span><br><span class="line">            <span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp; parkAndCheckInterrupt())</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InterruptedException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 如果获取许可失败，则把当前节点从等待队列中移除</span></span><br><span class="line">        <span class="keyword">if</span> (failed)</span><br><span class="line">            cancelAcquire(node);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-4-countDown-方法"><a href="#5-4-countDown-方法" class="headerlink" title="5.4. countDown()方法"></a>5.4. countDown()方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 该方法调用内部类Sync为类型的sync变量实现。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">countDown</span><span class="params">()</span> &#123;</span><br><span class="line">        sync.releaseShared(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="5-4-1-releaseShared-方法"><a href="#5-4-1-releaseShared-方法" class="headerlink" title="5.4.1. releaseShared()方法"></a>5.4.1. releaseShared()方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 释放操作</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">releaseShared</span><span class="params">(<span class="type">int</span> arg)</span> &#123;</span><br><span class="line">    <span class="comment">// 尝试释放共享锁</span></span><br><span class="line">    <span class="keyword">if</span> (tryReleaseShared(arg)) &#123;</span><br><span class="line">        <span class="comment">// 共享锁释放成功则调用park唤醒AQS队列里面最先挂起的线程</span></span><br><span class="line">        doReleaseShared();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="5-4-2-tryReleaseShared-方法"><a href="#5-4-2-tryReleaseShared-方法" class="headerlink" title="5.4.2. tryReleaseShared()方法"></a>5.4.2. tryReleaseShared()方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 尝试释放共享锁</span></span><br><span class="line"><span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">tryReleaseShared</span><span class="params">(<span class="type">int</span> releases)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> getState();</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">nextc</span> <span class="operator">=</span> c-<span class="number">1</span>;</span><br><span class="line">            <span class="comment">// 使用cas保证更新信号量值的原子性</span></span><br><span class="line">            <span class="keyword">if</span> (compareAndSetState(c, nextc))</span><br><span class="line">                <span class="type">return</span> <span class="variable">nextc</span> <span class="operator">=</span>= <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="5-4-3-doReleaseShared-方法"><a href="#5-4-3-doReleaseShared-方法" class="headerlink" title="5.4.3. doReleaseShared()方法"></a>5.4.3. doReleaseShared()方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 调用unparkSuccessor()唤醒head的后继节点</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doReleaseShared</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="type">Node</span> <span class="variable">h</span> <span class="operator">=</span> head;</span><br><span class="line">            <span class="keyword">if</span> (h != <span class="literal">null</span> &amp;&amp; h != tail) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">ws</span> <span class="operator">=</span> h.waitStatus;</span><br><span class="line">                <span class="keyword">if</span> (ws == Node.SIGNAL) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!compareAndSetWaitStatus(h, Node.SIGNAL, <span class="number">0</span>))</span><br><span class="line">                        <span class="keyword">continue</span>; <span class="comment">// loop to recheck cases</span></span><br><span class="line">                    unparkSuccessor(h);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (ws == <span class="number">0</span> &amp;&amp;</span><br><span class="line">                         !compareAndSetWaitStatus(h, <span class="number">0</span>, Node.PROPAGATE))</span><br><span class="line">                    <span class="keyword">continue</span>; <span class="comment">// loop on failed CAS</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (h == head) <span class="comment">// loop if head changed</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


















]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>Java</tag>
        <tag>并发</tag>
      </tags>
  </entry>
  <entry>
    <title>Java_并发：CyclicBarrier屏障</title>
    <url>/Java/Java_%E5%B9%B6%E5%8F%91%EF%BC%9ACyclicBarrier%E5%B1%8F%E9%9A%9C/</url>
    <content><![CDATA[<style>
[alt=CyclicBarrier执行流程] {
        max-width: 40%!important;
}
</style>

<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><ul>
<li><code>CyclicBarrier</code>屏障，是一个同步辅助类，允许一组线程互相等待，直到到达某个公共屏障点。因为该barrier在释放等待线程后可以重用，所以称它为循环的barrier。</li>
<li>一旦满足barrier条件后，<code>CyclicBarrier</code>可以执行一个（可选的）<code>Runnable</code>任务。</li>
<li>所有等待线程被释放后，<code>CyclicBarrier</code>是可以重用的。</li>
<li><code>CyclicBarrier</code>常用于复杂的并行计算。</li>
</ul>
<span id="more"></span>

<p><img src="/Java/Java_%E5%B9%B6%E5%8F%91%EF%BC%9ACyclicBarrier%E5%B1%8F%E9%9A%9C/CyclicBarrier%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.gif" alt="CyclicBarrier执行流程"></p>
<h2 id="2-应用示例"><a href="#2-应用示例" class="headerlink" title="2. 应用示例"></a>2. 应用示例</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.BrokenBarrierException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CyclicBarrier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CyclicBarrierDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">CyclicBarrier</span> <span class="variable">cyclicBarrier</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CyclicBarrier</span>(<span class="number">7</span>, () -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;集齐7颗龙珠，召唤神龙..&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">7</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;收集到第&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;龙珠..&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    cyclicBarrier.await();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (BrokenBarrierException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>运行结果：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">收集到第<span class="number">2</span>龙珠..</span><br><span class="line">收集到第<span class="number">4</span>龙珠..</span><br><span class="line">收集到第<span class="number">5</span>龙珠..</span><br><span class="line">收集到第<span class="number">3</span>龙珠..</span><br><span class="line">收集到第<span class="number">1</span>龙珠..</span><br><span class="line">收集到第<span class="number">7</span>龙珠..</span><br><span class="line">收集到第<span class="number">6</span>龙珠..</span><br><span class="line">集齐<span class="number">7</span>颗龙珠，召唤神龙..</span><br></pre></td></tr></table></figure>

<h2 id="3-实现原理"><a href="#3-实现原理" class="headerlink" title="3. 实现原理"></a>3. 实现原理</h2><ul>
<li><code>CyclicBarrier</code>是通过<code>ReentrantLock</code>（独占锁）和<code>Condition</code>来实现的。</li>
</ul>
<h2 id="4-源码分析"><a href="#4-源码分析" class="headerlink" title="4. 源码分析"></a>4. 源码分析</h2><h3 id="4-1-构造方法"><a href="#4-1-构造方法" class="headerlink" title="4.1. 构造方法"></a>4.1. 构造方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构造一个拦截线程数量为parties的屏障</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">CyclicBarrier</span><span class="params">(<span class="type">int</span> parties)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(parties, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当所有线程都到达屏障时，优先执行barrierAction这个线程</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">CyclicBarrier</span><span class="params">(<span class="type">int</span> parties, Runnable barrierAction)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (parties &lt;= <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">    <span class="built_in">this</span>.parties = parties;</span><br><span class="line">    <span class="built_in">this</span>.count = parties;</span><br><span class="line">    <span class="built_in">this</span>.barrierCommand = barrierAction;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-2-await-方法"><a href="#4-2-await-方法" class="headerlink" title="4.2. await()方法"></a>4.2. await()方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 等待所有 parties已经在这个障碍上调用了 await</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">await</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, BrokenBarrierException &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dowait(<span class="literal">false</span>, <span class="number">0L</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (TimeoutException toe) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(toe); <span class="comment">// cannot happen;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等待所有 parties已经在此屏障上调用 await ，或指定的等待时间过去</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">await</span><span class="params">(<span class="type">long</span> timeout, TimeUnit unit)</span> </span><br><span class="line">           <span class="keyword">throws</span> InterruptedException, BrokenBarrierException, TimeoutException &#123;</span><br><span class="line">    <span class="keyword">return</span> dowait(<span class="literal">true</span>, unit.toNanos(timeout));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-2-1-dowait-方法"><a href="#4-2-1-dowait-方法" class="headerlink" title="4.2.1. dowait()方法"></a>4.2.1. dowait()方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用内部类Generation表示barrier，每完成一整个循环就重新生成一个Generation。</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">dowait</span><span class="params">(<span class="type">boolean</span> timed, <span class="type">long</span> nanos)</span></span><br><span class="line">           <span class="keyword">throws</span> InterruptedException, BrokenBarrierException, TimeoutException &#123;</span><br><span class="line">    <span class="comment">// 获取锁</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="built_in">this</span>.lock;</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 分代</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Generation</span> <span class="variable">g</span> <span class="operator">=</span> generation;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 当前generation“已损坏”，抛出BrokenBarrierException异常</span></span><br><span class="line">        <span class="comment">// 抛出该异常一般都是某个线程在等待某个处于“断开”状态的CyclicBarrie</span></span><br><span class="line">        <span class="keyword">if</span> (g.broken)</span><br><span class="line">            <span class="comment">// 当某个线程试图等待处于断开状态的 barrier 时，</span></span><br><span class="line">            <span class="comment">// 或者 barrier 进入断开状态而线程处于等待状态时，抛出该异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BrokenBarrierException</span>();</span><br><span class="line">            </span><br><span class="line">        <span class="comment">// 如果线程中断，终止CyclicBarrier</span></span><br><span class="line">        <span class="keyword">if</span> (Thread.interrupted()) &#123;</span><br><span class="line">            breakBarrier();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InterruptedException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">       <span class="comment">// 进来一个线程 count - 1</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> --count;</span><br><span class="line">       <span class="comment">// count == 0 表示所有线程均已到位，触发Runnable任务</span></span><br><span class="line">       <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;  <span class="comment">// tripped</span></span><br><span class="line">           <span class="type">boolean</span> <span class="variable">ranAction</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="keyword">final</span> <span class="type">Runnable</span> <span class="variable">command</span> <span class="operator">=</span> barrierCommand;</span><br><span class="line">               <span class="comment">// 触发任务</span></span><br><span class="line">               <span class="keyword">if</span> (command != <span class="literal">null</span>)</span><br><span class="line">                   command.run();</span><br><span class="line">               ranAction = <span class="literal">true</span>;</span><br><span class="line">               <span class="comment">// 唤醒所有等待线程，并更新generation</span></span><br><span class="line">               nextGeneration();</span><br><span class="line">               <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">           &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">               <span class="comment">// 未执行，说明 barrierCommand 执行报错，或者线程打断等等情况</span></span><br><span class="line">               <span class="keyword">if</span> (!ranAction)</span><br><span class="line">                   breakBarrier();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 如果不是超时等待，则调用Condition.await()方法等待</span></span><br><span class="line">                <span class="keyword">if</span> (!timed)</span><br><span class="line">                    trip.await();</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (nanos &gt; <span class="number">0L</span>)</span><br><span class="line">                    <span class="comment">// 超时等待，调用Condition.awaitNanos()方法等待</span></span><br><span class="line">                    nanos = trip.awaitNanos(nanos);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException ie) &#123;</span><br><span class="line">                <span class="keyword">if</span> (g == generation &amp;&amp; ! g.broken) &#123;</span><br><span class="line">                    breakBarrier();</span><br><span class="line">                    <span class="keyword">throw</span> ie;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// We&#x27;re about to finish waiting even if we had not</span></span><br><span class="line">                    <span class="comment">// been interrupted, so this interrupt is deemed to</span></span><br><span class="line">                    <span class="comment">// &quot;belong&quot; to subsequent execution.</span></span><br><span class="line">                    Thread.currentThread().interrupt();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (g.broken)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BrokenBarrierException</span>();</span><br><span class="line">                </span><br><span class="line">            <span class="comment">// generation已经更新，返回index</span></span><br><span class="line">            <span class="keyword">if</span> (g != generation)</span><br><span class="line">                <span class="keyword">return</span> index;</span><br><span class="line">                </span><br><span class="line">            <span class="comment">// “超时等待”，并且时间已到,终止CyclicBarrier，并抛出异常</span></span><br><span class="line">            <span class="keyword">if</span> (timed &amp;&amp; nanos &lt;= <span class="number">0L</span>) &#123;</span><br><span class="line">                breakBarrier();</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TimeoutException</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 释放锁</span></span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-3-reset-方法"><a href="#4-3-reset-方法" class="headerlink" title="4.3. reset()方法"></a>4.3. reset()方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将屏障重置为其初始状态</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reset</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="built_in">this</span>.lock;</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        breakBarrier();   <span class="comment">// break the current generation</span></span><br><span class="line">        nextGeneration(); <span class="comment">// start a new generation</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-3-1-breakBarrier-方法"><a href="#4-3-1-breakBarrier-方法" class="headerlink" title="4.3.1. breakBarrier()方法"></a>4.3.1. breakBarrier()方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当 barrier 损坏了，或者有一个线程中断了，则通过 breakBarrier() 方法，来终止所有的线程</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">breakBarrier</span><span class="params">()</span> &#123;</span><br><span class="line">    generation.broken = <span class="literal">true</span>;</span><br><span class="line">    count = parties;</span><br><span class="line">    trip.signalAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-3-2-nextGeneration-方法"><a href="#4-3-2-nextGeneration-方法" class="headerlink" title="4.3.2. nextGeneration()方法"></a>4.3.2. nextGeneration()方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 唤醒所有线程，重置 count，重置 generation</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">nextGeneration</span><span class="params">()</span> &#123;</span><br><span class="line">    trip.signalAll();</span><br><span class="line">    count = parties;</span><br><span class="line">    generation = <span class="keyword">new</span> <span class="title class_">Generation</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generation 是 CyclicBarrier 内部静态类，描述了 CyclicBarrier 的更新换代。</span></span><br><span class="line"><span class="comment">// 在CyclicBarrier中，同一批线程属于同一代。</span></span><br><span class="line"><span class="comment">// 当有 parties 个线程全部到达 barrier 时，generation 就会被更新换代。</span></span><br><span class="line"><span class="comment">// 其中 broken 属性，标识该当前 CyclicBarrier 是否已经处于中断状态。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Generation</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">broken</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>














]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>Java</tag>
        <tag>并发</tag>
      </tags>
  </entry>
  <entry>
    <title>Java_并发：Semaphore信号量</title>
    <url>/Java/Java_%E5%B9%B6%E5%8F%91%EF%BC%9ASemaphore%E4%BF%A1%E5%8F%B7%E9%87%8F/</url>
    <content><![CDATA[<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><ul>
<li><code>Semaphore</code>信号量，通过构造函数设定一定数目的许可，通过<code>acquire()</code>方法获得许可，<code>release()</code>释放许可。</li>
<li><code>Semaphore</code>常用来限制访问某些特定资源的线程数。</li>
<li><code>Semaphore</code>初始化为只有一个许可时，称为binary semaphore，变成了一种互斥锁。</li>
<li><code>Semaphore</code>可以通过构造器参数设置成公平和非公平模式。</li>
</ul>
<span id="more"></span>

<h2 id="2-应用示例"><a href="#2-应用示例" class="headerlink" title="2. 应用示例"></a>2. 应用示例</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.Semaphore;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SemaphoreDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Semaphore</span> <span class="variable">semaphore</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Semaphore</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    semaphore.acquire();</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;: 开始买票&quot;</span>);</span><br><span class="line">                    Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;: 购票成功&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                    semaphore.release();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>运行结果</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Thread-0: 开始买票</span><br><span class="line">Thread-2: 开始买票</span><br><span class="line">Thread-1: 开始买票</span><br><span class="line">Thread-0: 购票成功</span><br><span class="line">Thread-1: 购票成功</span><br><span class="line">Thread-2: 购票成功</span><br><span class="line">Thread-3: 开始买票</span><br><span class="line">Thread-4: 开始买票</span><br><span class="line">Thread-5: 开始买票</span><br><span class="line">Thread-4: 购票成功</span><br><span class="line">Thread-3: 购票成功</span><br><span class="line">Thread-6: 开始买票</span><br><span class="line">Thread-5: 购票成功</span><br><span class="line">Thread-7: 开始买票</span><br><span class="line">Thread-6: 购票成功</span><br><span class="line">Thread-7: 购票成功</span><br></pre></td></tr></table></figure>

<h2 id="3-实现原理"><a href="#3-实现原理" class="headerlink" title="3. 实现原理"></a>3. 实现原理</h2><ul>
<li><code>Semaphore</code>使用内部类<code>Sync</code>做一系列的锁控制，该类继承自<code>AQS(AbstractQueuedSynchronizer，队列同步器)</code>，提供公平和非公平两种模式，默认是非公平模式。</li>
</ul>
<h2 id="4-源码分析"><a href="#4-源码分析" class="headerlink" title="4. 源码分析"></a>4. 源码分析</h2><h3 id="4-1-主要内部类"><a href="#4-1-主要内部类" class="headerlink" title="4.1. 主要内部类"></a>4.1. 主要内部类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 抽象类Sync实现了AQS的部分方法</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Sync</span> <span class="keyword">extends</span> <span class="title class_">AbstractQueuedSynchronizer</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NonfairSync实现了Sync，主要用于非公平锁的获取</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">NonfairSync</span> <span class="keyword">extends</span> <span class="title class_">Sync</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// FairSync实现了Sync，主要用于公平锁的获取</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">FairSync</span> <span class="keyword">extends</span> <span class="title class_">Sync</span> &#123;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-2-构造方法"><a href="#4-2-构造方法" class="headerlink" title="4.2. 构造方法"></a>4.2. 构造方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构造方法，创建时要传入许可次数，默认使用非公平模式</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Semaphore</span><span class="params">(<span class="type">int</span> permits)</span> &#123;</span><br><span class="line">    sync = <span class="keyword">new</span> <span class="title class_">NonfairSync</span>(permits);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造方法，需要传入许可次数，及是否公平模式</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Semaphore</span><span class="params">(<span class="type">int</span> permits, <span class="type">boolean</span> fair)</span> &#123;</span><br><span class="line">    sync = fair ? <span class="keyword">new</span> <span class="title class_">FairSync</span>(permits) : <span class="keyword">new</span> <span class="title class_">NonfairSync</span>(permits);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-3-acquire-方法"><a href="#4-3-acquire-方法" class="headerlink" title="4.3. acquire()方法"></a>4.3. acquire()方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取一个许可，可中断方式，如果尝试获取许可失败，会进入AQS的队列中排队</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">acquire</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    sync.acquireSharedInterruptibly(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取多个许可，可中断方式，如果尝试获取许可失败，会进入AQS的队列中排队</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">acquire</span><span class="params">(<span class="type">int</span> permits)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="keyword">if</span> (permits &lt; <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">    sync.acquireSharedInterruptibly(permits);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-3-1-acquireSharedInterruptibly-方法"><a href="#4-3-1-acquireSharedInterruptibly-方法" class="headerlink" title="4.3.1. acquireSharedInterruptibly()方法"></a>4.3.1. acquireSharedInterruptibly()方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以可中断模式获取锁(共享模式)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">acquireSharedInterruptibly</span><span class="params">(<span class="type">int</span> arg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="comment">// 如果线程被中断，则抛出中断异常</span></span><br><span class="line">    <span class="keyword">if</span> (Thread.interrupted())</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InterruptedException</span>();</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 调用sync子类方法尝试获取许可,这里根据构造函数确定使用公平策略</span></span><br><span class="line">    <span class="keyword">if</span> (tryAcquireShared(arg) &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="comment">// 如果获取失败则放入阻塞队列,然后再次尝试如果失败则调用park方法挂起当前线程</span></span><br><span class="line">        doAcquireSharedInterruptibly(arg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-3-2-tryAcquireShared-方法"><a href="#4-3-2-tryAcquireShared-方法" class="headerlink" title="4.3.2. tryAcquireShared()方法"></a>4.3.2. tryAcquireShared()方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 非公平模式尝试获取许可</span></span><br><span class="line"><span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">tryAcquireShared</span><span class="params">(<span class="type">int</span> acquires)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> nonfairTryAcquireShared(acquires);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="title function_">nonfairTryAcquireShared</span><span class="params">(<span class="type">int</span> acquires)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="comment">// 获取当前信号量值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">available</span> <span class="operator">=</span> getState();</span><br><span class="line">        <span class="comment">// 计算当前剩余值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">remaining</span> <span class="operator">=</span> available - acquires;</span><br><span class="line">        <span class="comment">// 如果当前剩余小于0或者CAS设置成功则返回</span></span><br><span class="line">        <span class="keyword">if</span> (remaining &lt; <span class="number">0</span> || compareAndSetState(available, remaining))</span><br><span class="line">            <span class="keyword">return</span> remaining;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 公平模式下尝试获取许可</span></span><br><span class="line"><span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">tryAcquireShared</span><span class="params">(<span class="type">int</span> acquires)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="comment">// 判断等待队列中最长等待时间的节点持有的是否为当前线程</span></span><br><span class="line">        <span class="keyword">if</span> (hasQueuedPredecessors())</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">available</span> <span class="operator">=</span> getState();</span><br><span class="line">        <span class="type">int</span> <span class="variable">remaining</span> <span class="operator">=</span> available - acquires;</span><br><span class="line">        <span class="keyword">if</span> (remaining &lt; <span class="number">0</span> || compareAndSetState(available, remaining))</span><br><span class="line">            <span class="keyword">return</span> remaining;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-3-3-doAcquireSharedInterruptibly-方法"><a href="#4-3-3-doAcquireSharedInterruptibly-方法" class="headerlink" title="4.3.3. doAcquireSharedInterruptibly()方法"></a>4.3.3. doAcquireSharedInterruptibly()方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 进入等待队列</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doAcquireSharedInterruptibly</span><span class="params">(<span class="type">int</span> arg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="comment">// 增加新节点到队列末端（该队列用双向链表实现），该节点持有当前线程的引用</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> addWaiter(Node.SHARED);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">failed</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="comment">// 判断是否是head节点</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">Node</span> <span class="variable">p</span> <span class="operator">=</span> node.predecessor();</span><br><span class="line">            <span class="keyword">if</span> (p == head) &#123;</span><br><span class="line">                <span class="comment">// 尝试获取共享锁</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> tryAcquireShared(arg);</span><br><span class="line">                <span class="comment">// 如果获取成功，把当前节点设置成head节点。并唤醒等待队列的后继节点，结束该方法</span></span><br><span class="line">                <span class="keyword">if</span> (r &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    setHeadAndPropagate(node, r);</span><br><span class="line">                    p.next = <span class="literal">null</span>; <span class="comment">// help GC</span></span><br><span class="line">                    failed = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 让等待节点阻塞等待</span></span><br><span class="line">            <span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp; parkAndCheckInterrupt())</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InterruptedException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 如果获取许可失败，则把当前节点从等待队列中移除</span></span><br><span class="line">        <span class="keyword">if</span> (failed)</span><br><span class="line">            cancelAcquire(node);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-4-release-方法"><a href="#4-4-release-方法" class="headerlink" title="4.4. release()方法"></a>4.4. release()方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 释放许可证，将其返回到信号量</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">release</span><span class="params">()</span> &#123;</span><br><span class="line">    sync.releaseShared(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放给定数量的许可证，将其返回到信号量</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">release</span><span class="params">(<span class="type">int</span> permits)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (permits &lt; <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">    sync.releaseShared(permits);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-4-1-releaseShared-方法"><a href="#4-4-1-releaseShared-方法" class="headerlink" title="4.4.1. releaseShared()方法"></a>4.4.1. releaseShared()方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 释放操作</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">releaseShared</span><span class="params">(<span class="type">int</span> arg)</span> &#123;</span><br><span class="line">    <span class="comment">// 尝试释放共享锁</span></span><br><span class="line">    <span class="keyword">if</span> (tryReleaseShared(arg)) &#123;</span><br><span class="line">        <span class="comment">// 共享锁释放成功则调用park唤醒AQS队列里面最先挂起的线程</span></span><br><span class="line">        doReleaseShared();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-4-2-tryReleaseShared-方法"><a href="#4-4-2-tryReleaseShared-方法" class="headerlink" title="4.4.2. tryReleaseShared()方法"></a>4.4.2. tryReleaseShared()方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 尝试释放共享锁</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">tryReleaseShared</span><span class="params">(<span class="type">int</span> releases)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="comment">// 获取当前信号量值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">current</span> <span class="operator">=</span> getState();</span><br><span class="line">        <span class="comment">// 当前信号量值增加releases，这里为增加1</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">next</span> <span class="operator">=</span> current + releases;</span><br><span class="line">        <span class="comment">// 检测溢出</span></span><br><span class="line">        <span class="keyword">if</span> (next &lt; current) <span class="comment">// overflow</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Maximum permit count exceeded&quot;</span>);</span><br><span class="line">        <span class="comment">// 使用cas保证更新信号量值的原子性</span></span><br><span class="line">        <span class="keyword">if</span> (compareAndSetState(current, next))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-4-3-doReleaseShared-方法"><a href="#4-4-3-doReleaseShared-方法" class="headerlink" title="4.4.3. doReleaseShared()方法"></a>4.4.3. doReleaseShared()方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 调用unparkSuccessor()唤醒AQS队列里面最先挂起的线程</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doReleaseShared</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">h</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">if</span> (h != <span class="literal">null</span> &amp;&amp; h != tail) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">ws</span> <span class="operator">=</span> h.waitStatus;</span><br><span class="line">            <span class="keyword">if</span> (ws == Node.SIGNAL) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!compareAndSetWaitStatus(h, Node.SIGNAL, <span class="number">0</span>))</span><br><span class="line">                    <span class="keyword">continue</span>;            <span class="comment">// loop to recheck cases</span></span><br><span class="line">                unparkSuccessor(h);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (ws == <span class="number">0</span> &amp;&amp; !compareAndSetWaitStatus(h, <span class="number">0</span>, Node.PROPAGATE))</span><br><span class="line">                <span class="keyword">continue</span>;                <span class="comment">// loop on failed CAS</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (h == head)                   <span class="comment">// loop if head changed</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>Java</tag>
        <tag>并发</tag>
      </tags>
  </entry>
  <entry>
    <title>Java_集合：阻塞队列分类</title>
    <url>/Java/Java_%E9%9B%86%E5%90%88%EF%BC%9A%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97%E5%88%86%E7%B1%BB/</url>
    <content><![CDATA[<style>
table {
    margin-bottom: 0px;
}

.article-content ul li ul li::before {
    background: #ffffff;
    border: 1px solid #999;
    width: 2.2px;
    height: 2.2px;
}
</style>

<h2 id="阻塞队列"><a href="#阻塞队列" class="headerlink" title="阻塞队列"></a>阻塞队列</h2><ul>
<li>当阻塞队列是空时，从队列中<code>获取</code>元素的操作将会被阻塞。</li>
<li>当阻塞队列是满时，从队列中<code>添加</code>元素的操作将会被阻塞。</li>
</ul>
<span id="more"></span>

<h2 id="阻塞队列分类"><a href="#阻塞队列分类" class="headerlink" title="阻塞队列分类"></a>阻塞队列分类</h2><p><img src="/Java/Java_%E9%9B%86%E5%90%88%EF%BC%9A%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97%E5%88%86%E7%B1%BB/%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97%E7%B1%BB%E5%9B%BE.png" alt="阻塞队列类图"></p>
<table>
<thead>
<tr>
<th>队列</th>
<th>有界性</th>
<th>锁类型</th>
<th>数据结构</th>
</tr>
</thead>
<tbody><tr>
<td>ArrayBlockingQueue</td>
<td>有界</td>
<td>加锁</td>
<td>数组</td>
</tr>
<tr>
<td>LinkedBlockingQueue</td>
<td>有界</td>
<td>加锁</td>
<td>单链表</td>
</tr>
<tr>
<td>PriorityBlockingQueue</td>
<td>无界</td>
<td>加锁</td>
<td>堆</td>
</tr>
<tr>
<td>DelayQueue</td>
<td>无界</td>
<td>加锁</td>
<td>堆</td>
</tr>
<tr>
<td>SynchronousQueue</td>
<td>有界</td>
<td>无锁(CAS)</td>
<td>-</td>
</tr>
<tr>
<td>LinkedTransferQueue</td>
<td>无界</td>
<td>无锁(CAS)</td>
<td>单链表</td>
</tr>
<tr>
<td>LinkedBlockingDeque</td>
<td>无界</td>
<td>加锁</td>
<td>双链表</td>
</tr>
</tbody></table>
<h2 id="阻塞队列方法"><a href="#阻塞队列方法" class="headerlink" title="阻塞队列方法"></a>阻塞队列方法</h2><table>
<thead>
<tr>
<th>方法\处理方式</th>
<th>抛出异常</th>
<th>返回特殊值</th>
<th>一直阻塞</th>
<th>超时退出</th>
</tr>
</thead>
<tbody><tr>
<td>插入方法</td>
<td>add(e)</td>
<td>offer(e)</td>
<td>put(e)</td>
<td>offer(e,time,unit)</td>
</tr>
<tr>
<td>移除方法</td>
<td>remove()</td>
<td>poll()</td>
<td>take()</td>
<td>poll(time,unit)</td>
</tr>
<tr>
<td>检查方法</td>
<td>element()</td>
<td>peek()</td>
<td>不可用</td>
<td>不可用</td>
</tr>
</tbody></table>
<ul>
<li><strong>抛出异常：</strong><ul>
<li>当队列满时,如果再往队列里插入元素,会抛出<code>IllegalStateException(&quot;Queuefull&quot;)</code>异常。</li>
<li>当队列空时，从队列里获取元素会抛出<code>NoSuchElementException</code>异常。</li>
</ul>
</li>
<li><strong>返回特殊值：</strong><ul>
<li>当往队列插入元素时,会返回元素是否插入成功,成功则返回<code>true</code>。</li>
<li>若是移除方法,则是从队列里取出一个元素,若没有则返回<code>null</code>。</li>
</ul>
</li>
<li><strong>一直阻塞：</strong><ul>
<li>当阻塞队列满时,如果生产者线程往队列里<code>put</code>元素,队列会一直阻塞生产者线程,直到队列有可用空间或响应中断退出。</li>
<li>当队列空时,若消费者线程从队列里<code>take</code>元素,队列会阻塞住消费者线程,直到队列非空。</li>
</ul>
</li>
<li><strong>超时退出：</strong><ul>
<li>当阻塞队列满时,若生产者线程往队列里插入元素,队列会阻塞生产者线程一段时间,若超过指定的时间,生产者线程就会退出。</li>
</ul>
</li>
</ul>
<h2 id="阻塞队列使用"><a href="#阻塞队列使用" class="headerlink" title="阻塞队列使用"></a>阻塞队列使用</h2><h3 id="生产者-x2F-消费者（非阻塞版）"><a href="#生产者-x2F-消费者（非阻塞版）" class="headerlink" title="生产者&#x2F;消费者（非阻塞版）"></a>生产者&#x2F;消费者（非阻塞版）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProdConsumerTraditionDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Product</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                product.increment();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;Producer&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                product.decrement();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;Consumer&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Product</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Condition</span> <span class="variable">condition</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">increment</span><span class="params">()</span> &#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (number != <span class="number">0</span>) &#123;</span><br><span class="line">                condition.await();</span><br><span class="line">            &#125;</span><br><span class="line">            number++;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + number);</span><br><span class="line">            condition.signalAll();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">decrement</span><span class="params">()</span> &#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (number == <span class="number">0</span>) &#123;</span><br><span class="line">                condition.await();</span><br><span class="line">            &#125;</span><br><span class="line">            number--;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + number);</span><br><span class="line">            condition.signalAll();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="生产者-x2F-消费者（阻塞版）"><a href="#生产者-x2F-消费者（阻塞版）" class="headerlink" title="生产者&#x2F;消费者（阻塞版）"></a>生产者&#x2F;消费者（阻塞版）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.ArrayBlockingQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.BlockingQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProdConsumerBlockQueueDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Product</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            product.producer();</span><br><span class="line">        &#125;, <span class="string">&quot;Producer&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            product.consumer();</span><br><span class="line">        &#125;, <span class="string">&quot;Consumer&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        product.setFlag(<span class="literal">false</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;程序停止！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Product</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">AtomicInteger</span> <span class="variable">atomicInteger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>();</span><br><span class="line">    <span class="keyword">private</span> BlockingQueue&lt;Integer&gt; blockingQueue = <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">producer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (flag)&#123;</span><br><span class="line">                <span class="type">Integer</span> <span class="variable">data</span> <span class="operator">=</span> atomicInteger.incrementAndGet();</span><br><span class="line">                blockingQueue.offer(data);</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + data);</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">consumer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (flag)&#123;</span><br><span class="line">                <span class="type">Integer</span> <span class="variable">data</span> <span class="operator">=</span> blockingQueue.poll(<span class="number">2L</span>, TimeUnit.SECONDS);</span><br><span class="line">                <span class="keyword">if</span> (data == <span class="literal">null</span>) &#123;</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFlag</span><span class="params">(<span class="type">boolean</span> flag)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://h2pl.github.io/2018/05/22/concurrent11/">How 2 Play Life</a></li>
<li><a href="https://www.zybuluo.com/adamhand/note/1370224">adamhand</a></li>
<li><a href="http://24suixinsuoyu.com/2019/02/10/Java%20%E5%B9%B6%E5%8F%91%E5%AE%B9%E5%99%A8%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E5%B9%B6%E5%8F%91%E9%98%9F%E5%88%97/">24隋心所欲’s Blog</a></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>Java</tag>
        <tag>集合</tag>
      </tags>
  </entry>
  <entry>
    <title>Java_集合：集合类并发问题解决</title>
    <url>/Java/Java_%E9%9B%86%E5%90%88%EF%BC%9A%E9%9B%86%E5%90%88%E7%B1%BB%E4%B8%8D%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<h2 id="并发异常"><a href="#并发异常" class="headerlink" title="并发异常"></a>并发异常</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ContainerNotSafeDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                list.add(UUID.randomUUID().toString().substring(<span class="number">0</span>, <span class="number">8</span>));</span><br><span class="line">                System.out.println(list);</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[73f524a3]</span><br><span class="line">[73f524a3, e0d338a7, e012d81a, 3fdce3b7, 785ded9a, ba996ac9]</span><br><span class="line">[73f524a3, e0d338a7, e012d81a, 3fdce3b7, 785ded9a]</span><br><span class="line">[73f524a3, e0d338a7, e012d81a, 3fdce3b7, 785ded9a, ba996ac9, c6effe23, cefaa367, 376dcfcd, <span class="number">0e037259</span>]</span><br><span class="line">[73f524a3, e0d338a7, e012d81a]</span><br><span class="line">[73f524a3, e0d338a7]</span><br><span class="line">[73f524a3, e0d338a7, e012d81a, 3fdce3b7, 785ded9a, ba996ac9, c6effe23, cefaa367, 376dcfcd]</span><br><span class="line">[73f524a3, e0d338a7, e012d81a, 3fdce3b7, 785ded9a, ba996ac9, c6effe23, cefaa367]</span><br><span class="line">[73f524a3, e0d338a7, e012d81a, 3fdce3b7, 785ded9a, ba996ac9, c6effe23]</span><br><span class="line">Exception in thread <span class="string">&quot;Thread-4&quot;</span> java.util.ConcurrentModificationException</span><br><span class="line">	at java.util.ArrayList$Itr.checkForComodification(ArrayList.java:<span class="number">909</span>)</span><br><span class="line">	at java.util.ArrayList$Itr.next(ArrayList.java:<span class="number">859</span>)</span><br><span class="line">	at java.util.AbstractCollection.toString(AbstractCollection.java:<span class="number">461</span>)</span><br><span class="line">	at java.lang.String.valueOf(String.java:<span class="number">2994</span>)</span><br><span class="line">	at java.io.PrintStream.println(PrintStream.java:<span class="number">821</span>)</span><br><span class="line">	at com.example.demo.ContainerNotSafeDemo.lambda$main$<span class="number">0</span>(ContainerNotSafeDemo.java:<span class="number">14</span>)</span><br><span class="line">	at java.lang.Thread.run(Thread.java:<span class="number">748</span>)</span><br></pre></td></tr></table></figure>

<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方式一</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vector</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式二</span></span><br><span class="line">Collections.synchronizedList(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式三</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">CopyOnWriteArrayList</span>&lt;&gt;();</span><br></pre></td></tr></table></figure>

<h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方式一</span></span><br><span class="line">Collections.synchronizedSet(<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式二</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">CopyOnWriteArraySet</span>&lt;&gt;();</span><br></pre></td></tr></table></figure>

<h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方式一</span></span><br><span class="line">Collections.synchronizedMap(<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式二</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>Java</tag>
        <tag>集合</tag>
      </tags>
  </entry>
</search>
