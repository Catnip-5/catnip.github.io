<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JDK8_Optional容器类</title>
    <url>/JDK/JDK8_Optional%E5%AE%B9%E5%99%A8%E7%B1%BB/</url>
    <content><![CDATA[<h2 id="传统方式处理null"><a href="#传统方式处理null" class="headerlink" title="传统方式处理null"></a>传统方式处理null</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestOptional1</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * null-安全的第一种尝试：深层质疑</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> person</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCarInsuranceName1</span><span class="params">(Person person)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (person != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> person.getCar();</span><br><span class="line">            <span class="keyword">if</span> (car != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">Insurance</span> <span class="variable">insurance</span> <span class="operator">=</span> car.getInsurance();</span><br><span class="line">                <span class="keyword">if</span> (insurance != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> insurance.getName();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Unknown&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * null-安全的第二种尝试：过多的退出语句</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> person</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCarInsuranceName2</span><span class="params">(Person person)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (person == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Unknown&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> person.getCar();</span><br><span class="line">        <span class="keyword">if</span> (car == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Unknown&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Insurance</span> <span class="variable">insurance</span> <span class="operator">=</span> car.getInsurance();</span><br><span class="line">        <span class="keyword">if</span> (insurance == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Unknown&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> insurance.getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Car car;</span><br><span class="line">    <span class="keyword">public</span> Car <span class="title function_">getCar</span><span class="params">()</span> &#123; <span class="keyword">return</span> car; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Insurance insurance;</span><br><span class="line">    <span class="keyword">public</span> Insurance <span class="title function_">getInsurance</span><span class="params">()</span> &#123; <span class="keyword">return</span> insurance; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Insurance</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123; <span class="keyword">return</span> name; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="Optional容器类避免null"><a href="#Optional容器类避免null" class="headerlink" title="Optional容器类避免null"></a>Optional容器类避免null</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Optional类方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * empty          返回一个空的 Optional 实例</span></span><br><span class="line"><span class="comment"> * filter            如果值存在且满足提供的谓词，就返回包含该值的 Optional 对象；否则返回一个空的Optional 对象</span></span><br><span class="line"><span class="comment"> * flatMap        如果值存在，就对该值执行 mapping 函数调用，返回一个 Optional 类型值，否则就返回一个空的 Optional 对象</span></span><br><span class="line"><span class="comment"> * get              如果该值存在，将该值用 Optional 封装返回，否则抛出一个 NoSuchElementException 异常</span></span><br><span class="line"><span class="comment"> * ifPresent      如果值存在，就执行使用该值的方法调用，否则什么也不做</span></span><br><span class="line"><span class="comment"> * isPresent      如果值存在就返回 true，否则返回 false</span></span><br><span class="line"><span class="comment"> * map             如果值存在，就对该值执行提供的 mapping 函数调用</span></span><br><span class="line"><span class="comment"> * of                将指定值用 Optional 封装之后返回，如果该值为 null，则抛出一个 NullPointerException异常</span></span><br><span class="line"><span class="comment"> * ofNullable     将指定值用 Optional 封装之后返回，如果该值为 null，则返回一个空的 Optional 对象</span></span><br><span class="line"><span class="comment"> * orElse          如果有值则将其返回，否则返回一个默认值</span></span><br><span class="line"><span class="comment"> * orElseGet     如果有值则将其返回，否则返回一个由指定的 Supplier 接口生成的值</span></span><br><span class="line"><span class="comment"> * orElseThrow  如果有值则将其返回，否则抛出一个由指定的 Supplier 接口生成的异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestOptional2</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCarInsuranceName</span><span class="params">(Optional&lt;Person&gt; person)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> person.flatMap(Person::getCar)</span><br><span class="line">                     .flatMap(Car::getInsurance)</span><br><span class="line">                     .map(Insurance::getName)</span><br><span class="line">                     .orElse(<span class="string">&quot;Unknown&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Optional&lt;Car&gt; car;</span><br><span class="line">    <span class="keyword">public</span> Optional&lt;Car&gt; <span class="title function_">getCar</span><span class="params">()</span> &#123; <span class="keyword">return</span> car; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Optional&lt;Insurance&gt; insurance;</span><br><span class="line">    <span class="keyword">public</span> Optional&lt;Insurance&gt; <span class="title function_">getInsurance</span><span class="params">()</span> &#123; <span class="keyword">return</span> insurance; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Insurance</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123; <span class="keyword">return</span> name; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JDK</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>Java</tag>
        <tag>JDK</tag>
      </tags>
  </entry>
  <entry>
    <title>JDK8_新时间日期API</title>
    <url>/JDK/JDK8_%E6%96%B0%E6%97%B6%E9%97%B4%E6%97%A5%E6%9C%9FAPI/</url>
    <content><![CDATA[<h2 id="API使用"><a href="#API使用" class="headerlink" title="API使用"></a>API使用</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.DayOfWeek;</span><br><span class="line"><span class="keyword">import</span> java.time.Duration;</span><br><span class="line"><span class="keyword">import</span> java.time.Instant;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.OffsetDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.Period;</span><br><span class="line"><span class="keyword">import</span> java.time.ZoneId;</span><br><span class="line"><span class="keyword">import</span> java.time.ZoneOffset;</span><br><span class="line"><span class="keyword">import</span> java.time.ZonedDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"><span class="keyword">import</span> java.time.temporal.TemporalAdjusters;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestLocalDateTime</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * LocalDate、LocalTime、LocalDateTime</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * from     依据传入的 Temporal 对象创建对象实例</span></span><br><span class="line"><span class="comment">     * now      依据系统时钟创建 Temporal 对象</span></span><br><span class="line"><span class="comment">     * of       由 Temporal 对象的某个部分创建该对象的实例</span></span><br><span class="line"><span class="comment">     * parse    由字符串创建 Temporal 对象的实例</span></span><br><span class="line"><span class="comment">     * atOffset 将 Temporal 对象和某个时区偏移相结合</span></span><br><span class="line"><span class="comment">     * atZone   将 Temporal 对象和某个时区相结合</span></span><br><span class="line"><span class="comment">     * format   使用某个指定的格式器将Temporal对象转换为字符串（Instant类不提供该方法）</span></span><br><span class="line"><span class="comment">     * get      读取 Temporal 对象的某一部分的值</span></span><br><span class="line"><span class="comment">     * minus    创建 Temporal 对象的一个副本，通过将当前 Temporal 对象的值减去一定的时长创建该副本</span></span><br><span class="line"><span class="comment">     * plus     创建 Temporal 对象的一个副本，通过将当前 Temporal 对象的值加上一定的时长创建该副本</span></span><br><span class="line"><span class="comment">     * with     以该 Temporal 对象为模板，对某些状态进行修改创建该对象的副本</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 获取时间</span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">ldt</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">        System.out.println(ldt);</span><br><span class="line">        System.out.println(ldt.getYear());</span><br><span class="line">        System.out.println(ldt.getMonthValue());</span><br><span class="line">        System.out.println(ldt.getDayOfMonth());</span><br><span class="line">        System.out.println(ldt.getHour());</span><br><span class="line">        System.out.println(ldt.getMinute());</span><br><span class="line">        System.out.println(ldt.getSecond());</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 指定时间</span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">ldt2</span> <span class="operator">=</span> LocalDateTime.of(<span class="number">2020</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">0</span>);</span><br><span class="line">        System.out.println(ldt2);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 加上时间</span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">ldt3</span> <span class="operator">=</span> ldt2.plusYears(<span class="number">20</span>);</span><br><span class="line">        System.out.println(ldt3);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 减去时间</span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">ldt4</span> <span class="operator">=</span> ldt2.minusMonths(<span class="number">2</span>);</span><br><span class="line">        System.out.println(ldt4);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * TemporalAdjuster 时间校正器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * TemporalAdjusters工具类方法：</span></span><br><span class="line"><span class="comment">     *   dayOfWeekInMonth           创建一个新的日期，它的值为同一个月中每一周的第几天</span></span><br><span class="line"><span class="comment">     *   firstDayOfMonth            创建一个新的日期，它的值为当月的第一天</span></span><br><span class="line"><span class="comment">     *   firstDayOfNextMonth        创建一个新的日期，它的值为下月的第一天</span></span><br><span class="line"><span class="comment">     *   firstDayOfNextYear         创建一个新的日期，它的值为明年的第一天</span></span><br><span class="line"><span class="comment">     *   firstDayOfYear             创建一个新的日期，它的值为当年的第一天</span></span><br><span class="line"><span class="comment">     *   firstInMonth               创建一个新的日期，它的值为同一个月中，第一个符合星期几要求的值</span></span><br><span class="line"><span class="comment">     *   lastDayOfMonth             创建一个新的日期，它的值为当月的最后一天</span></span><br><span class="line"><span class="comment">     *   lastDayOfNextMonth         创建一个新的日期，它的值为下月的最后一天</span></span><br><span class="line"><span class="comment">     *   lastDayOfNextYear          创建一个新的日期，它的值为明年的最后一天</span></span><br><span class="line"><span class="comment">     *   lastDayOfYear              创建一个新的日期，它的值为今年的最后一天</span></span><br><span class="line"><span class="comment">     *   lastInMonth                创建一个新的日期，它的值为同一个月中，最后一个符合星期几要求的值</span></span><br><span class="line"><span class="comment">     *   next/previous              创建一个新的日期，并将其值设定为日期调整后或者调整前，第一个符合指定星期几要求的日期</span></span><br><span class="line"><span class="comment">     *   nextOrSame/previousOrSame  创建一个新的日期，并将其值设定为日期调整后或者调整前，第一个符合指定星期几要求的日期，如果该日期已经符合要求，直接返回该对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 获取时间</span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">ldt</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">        System.out.println(ldt);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 修改时间</span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">ldt2</span> <span class="operator">=</span> ldt.withDayOfMonth(<span class="number">10</span>);</span><br><span class="line">        System.out.println(ldt2);</span><br><span class="line"> </span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">ldt3</span> <span class="operator">=</span> ldt.with(TemporalAdjusters.next(DayOfWeek.SUNDAY));</span><br><span class="line">        System.out.println(ldt3);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 自定义时间：下一个工作日</span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">ldt5</span> <span class="operator">=</span> ldt.with((l) -&gt; &#123;</span><br><span class="line">            <span class="type">LocalDateTime</span> <span class="variable">ldt4</span> <span class="operator">=</span> (LocalDateTime) l;</span><br><span class="line"> </span><br><span class="line">            <span class="type">DayOfWeek</span> <span class="variable">dow</span> <span class="operator">=</span> ldt4.getDayOfWeek();</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span>(dow.equals(DayOfWeek.FRIDAY))&#123;</span><br><span class="line">                <span class="keyword">return</span> ldt4.plusDays(<span class="number">3</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(dow.equals(DayOfWeek.SATURDAY))&#123;</span><br><span class="line">                <span class="keyword">return</span> ldt4.plusDays(<span class="number">2</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> ldt4.plusDays(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(ldt5);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Instant 时间戳（使用 Unix 元年  1970年1月1日 00:00:00 所经历的毫秒值）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 默认使用 UTC 时区</span></span><br><span class="line">        <span class="type">Instant</span> <span class="variable">ins1</span> <span class="operator">=</span> Instant.now(); </span><br><span class="line">        System.out.println(ins1);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 设置时区偏移量</span></span><br><span class="line">        <span class="type">OffsetDateTime</span> <span class="variable">odt</span> <span class="operator">=</span> ins1.atOffset(ZoneOffset.ofHours(<span class="number">8</span>));</span><br><span class="line">        System.out.println(odt);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 获取秒值</span></span><br><span class="line">        System.out.println(ins1.getEpochSecond());</span><br><span class="line">        System.out.println(ins1.toEpochMilli());</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 设置秒值</span></span><br><span class="line">        <span class="type">Instant</span> <span class="variable">ins2</span> <span class="operator">=</span> Instant.ofEpochSecond(<span class="number">5</span>);</span><br><span class="line">        System.out.println(ins2);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Duration 用于计算两个“时间”间隔</span></span><br><span class="line"><span class="comment">     * Period   用于计算两个“日期”间隔</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 计算两个“时间”间隔</span></span><br><span class="line">        <span class="type">Instant</span> <span class="variable">ins1</span> <span class="operator">=</span> Instant.now();</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="type">Instant</span> <span class="variable">ins2</span> <span class="operator">=</span> Instant.now();</span><br><span class="line"> </span><br><span class="line">        <span class="type">Duration</span> <span class="variable">duration</span> <span class="operator">=</span> Duration.between(ins1, ins2);</span><br><span class="line">        System.out.println(duration);</span><br><span class="line">        System.out.println(duration.getSeconds());</span><br><span class="line">        System.out.println(duration.toMillis());</span><br><span class="line"> </span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------------&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 计算两个“日期”间隔</span></span><br><span class="line">        <span class="type">LocalDate</span> <span class="variable">ld1</span> <span class="operator">=</span> LocalDate.of(<span class="number">2018</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="type">LocalDate</span> <span class="variable">ld2</span> <span class="operator">=</span> LocalDate.now();</span><br><span class="line"> </span><br><span class="line">        <span class="type">Period</span> <span class="variable">pe</span> <span class="operator">=</span> Period.between(ld1, ld2);</span><br><span class="line">        System.out.println(pe.getYears());</span><br><span class="line">        System.out.println(pe.getMonths());</span><br><span class="line">        System.out.println(pe.getDays());</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * DateTimeFormatter 解析和格式化日期或时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test5</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//DateTimeFormatter dtf = DateTimeFormatter.ISO_DATE;</span></span><br><span class="line">        <span class="type">DateTimeFormatter</span> <span class="variable">dtf</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy年MM月dd日 HH:mm:ss E&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">ldt</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line"> </span><br><span class="line">        <span class="type">String</span> <span class="variable">date</span> <span class="operator">=</span> ldt.format(dtf);</span><br><span class="line">        System.out.println(date);</span><br><span class="line"> </span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">ldt2</span> <span class="operator">=</span> ldt.parse(date, dtf);</span><br><span class="line">        System.out.println(ldt2);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取所有可用时区</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test6</span><span class="params">()</span> &#123;</span><br><span class="line">        Set&lt;String&gt; set = ZoneId.getAvailableZoneIds();</span><br><span class="line">        set.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ZonedDate、ZonedTime、ZonedDateTime 带时区的时间或日期</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test7</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">ldt</span> <span class="operator">=</span> LocalDateTime.now(ZoneId.of(<span class="string">&quot;Asia/Shanghai&quot;</span>));</span><br><span class="line">        System.out.println(ldt);</span><br><span class="line"> </span><br><span class="line">        <span class="type">ZonedDateTime</span> <span class="variable">zdt</span> <span class="operator">=</span> ZonedDateTime.now(ZoneId.of(<span class="string">&quot;US/Pacific&quot;</span>));</span><br><span class="line">        System.out.println(zdt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="传统日期转换"><a href="#传统日期转换" class="headerlink" title="传统日期转换"></a>传统日期转换</h2><table>
<thead>
<tr>
<th>类</th>
<th>To 遗留类</th>
<th>From 遗留类</th>
</tr>
</thead>
<tbody><tr>
<td>java.time.Instant<br>java.util.Date</td>
<td>Date.from(instant)</td>
<td>date.toInstant()</td>
</tr>
<tr>
<td>java.time.Instant<br>java.sql.Timestamp</td>
<td>Timestamp.from(instant)</td>
<td>timestamp.toInstant()</td>
</tr>
<tr>
<td>java.time.ZonedDateTime<br>java.util.GregorianCalendar</td>
<td>GregorianCalendar.from(zonedDateTime)</td>
<td>cal.toZonedDateTime()</td>
</tr>
<tr>
<td>java.time.LocalDate<br>java.sql.Time</td>
<td>Date.valueOf(localDate)</td>
<td>date.toLocalDate()</td>
</tr>
<tr>
<td>java.time.LocalTime<br>java.sql.Time</td>
<td>Date.valueOf(localDate)</td>
<td>date.toLocalTime()</td>
</tr>
<tr>
<td>java.time.LocalDateTime<br>java.sql.Timestamp</td>
<td>Timestamp.valueOf(localDateTime)</td>
<td>timestamp.toLocalDateTime()</td>
</tr>
<tr>
<td>java.time.ZoneId<br>java.util.TimeZone</td>
<td>Timezone.getTimeZone(id)</td>
<td>timeZone.toZoneId()</td>
</tr>
<tr>
<td>java.time.format.DateTimeFormatter<br>java.text.DateFormat</td>
<td>formatter.toFormat()</td>
<td>无</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>JDK</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>Java</tag>
        <tag>JDK</tag>
      </tags>
  </entry>
  <entry>
    <title>JDK8_函数式接口</title>
    <url>/JDK/JDK8_%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<style>
table td, table th {
    font-size: 14px;
}
</style>

<h2 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h2><ul>
<li>函数式接口就是只有一个抽象方法的接口，如<code>Runnable</code>、<code>Callable</code>、<code>Comparable</code>都称作函数式接口。</li>
<li>java8专门新增 <code>FunctionalInterface</code> 注解, 防止破坏函数式接口的定义； <code>默认方法</code>和<code>静态方法</code>不会破坏函数式接口的定义。</li>
</ul>
<span id="more"></span>

<h2 id="内置函数式接口"><a href="#内置函数式接口" class="headerlink" title="内置函数式接口"></a>内置函数式接口</h2><table>
<thead>
<tr>
<th>名称</th>
<th>一元接口</th>
<th>说明</th>
<th>二元接口</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>函数类接口</td>
<td>Function&lt;T, R&gt;</td>
<td>接收T值，返回R值</td>
<td>BiFunction&lt;T, U, R&gt;</td>
<td>接收T, U值，返回R值</td>
</tr>
<tr>
<td>操作类接口</td>
<td>UnaryOperator&lt;T&gt;</td>
<td>接收T值，返回T值</td>
<td>BinaryOperator&lt;T&gt;</td>
<td>接收T, T值，返回T值</td>
</tr>
<tr>
<td>断言类接口</td>
<td>Predicate&lt;T&gt;</td>
<td>接收T值，返回boolean值</td>
<td>BiPredicate&lt;T, U&gt;</td>
<td>接收T, U值，返回boolean值</td>
</tr>
<tr>
<td>消费类接口</td>
<td>Consumer&lt;T&gt;</td>
<td>接收T值，无返回值</td>
<td>BiConsumer&lt;T, U&gt;</td>
<td>接收T, U值，无返回值</td>
</tr>
<tr>
<td>生产类接口</td>
<td>Supplier&lt;T&gt;</td>
<td>无接收值，返回T值</td>
<td>-</td>
<td>-</td>
</tr>
</tbody></table>
<h2 id="自定义函数式接口"><a href="#自定义函数式接口" class="headerlink" title="自定义函数式接口"></a>自定义函数式接口</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. 函数式接口只有一个抽象方法</span></span><br><span class="line"><span class="comment"> * 2. default、static方法不是抽象方法</span></span><br><span class="line"><span class="comment"> * 3. java.lang.Object中的方法不是抽象方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span> <span class="comment">// 用于编译级错误检查</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Fun</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">defaultMethod</span><span class="params">()</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">staticMethod</span><span class="params">()</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object target)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JDK</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>Java</tag>
        <tag>JDK</tag>
      </tags>
  </entry>
  <entry>
    <title>JDK_版本选择</title>
    <url>/JDK/JDK_%E7%89%88%E6%9C%AC%E9%80%89%E6%8B%A9/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th>Java SE 版本</th>
<th>JDK 版本</th>
<th>开发代号</th>
<th>发行日期</th>
<th>最终支持日期</th>
<th>最终版本</th>
</tr>
</thead>
<tbody><tr>
<td>Oak</td>
<td>-</td>
<td>Oak(橡树)</td>
<td>1995-05-23</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Java 1.0</td>
<td>JDK 1.0</td>
<td>-</td>
<td>1996-01-23</td>
<td>-</td>
<td>1.0.2<br>1996-05-07</td>
</tr>
<tr>
<td>Java 1.1</td>
<td>JDK 1.1</td>
<td>-</td>
<td>1997-02-18</td>
<td>-</td>
<td>1.1.8_010<br>2002-10-09</td>
</tr>
<tr>
<td>J2SE 1.2</td>
<td>JDK 1.2</td>
<td>Playground(运动场)</td>
<td>1998-12-04</td>
<td>-</td>
<td>1.2.2_017<br>2003-10-02</td>
</tr>
<tr>
<td>J2SE 1.3</td>
<td>JDK 1.3</td>
<td>Kestrel(美洲红隼)</td>
<td>2000-05-08</td>
<td>-</td>
<td>1.3.1_29<br>2010-10-12</td>
</tr>
<tr>
<td>J2SE 1.4</td>
<td>JDK 1.4</td>
<td>Merlin(灰背隼)</td>
<td>2002-02-13</td>
<td>2013-02</td>
<td>1.4.2_42<br>2013-02-19</td>
</tr>
<tr>
<td>Java SE 5.0</td>
<td>JDK 1.5</td>
<td>Tiger(老虎)</td>
<td>2004-09-29</td>
<td>2015-04</td>
<td>5.0u85<br>2015-04-15</td>
</tr>
<tr>
<td>Java SE 6</td>
<td>JDK 1.6</td>
<td>Mustang(野马)</td>
<td>2006-12-12</td>
<td>2018-12</td>
<td>6u211<br>2018-10-16</td>
</tr>
<tr>
<td>Java SE 7</td>
<td>JDK 1.7</td>
<td>Dolphin(海豚)</td>
<td>2011-07-11</td>
<td>2022-07-19</td>
<td>7u321<br>2021-10-19</td>
</tr>
<tr>
<td>Java SE 8</td>
<td>JDK 1.8</td>
<td>Spider(蜘蛛)</td>
<td>2014-03-18</td>
<td>2030-12-31</td>
<td>8u311<br>2021-10-19</td>
</tr>
<tr>
<td>Java SE 9</td>
<td>JDK 1.9</td>
<td>-</td>
<td>2017-09-21</td>
<td>-</td>
<td>9.0.4<br>2018-01-16</td>
</tr>
<tr>
<td>Java SE 10</td>
<td>JDK 10</td>
<td>-</td>
<td>2018-03-20</td>
<td>-</td>
<td>10.0.2<br>2018-07-17</td>
</tr>
<tr>
<td>Java SE 11</td>
<td>JDK 11</td>
<td>-</td>
<td>2018-09-25</td>
<td>2026-09-30</td>
<td>11.0.13<br>2021-10-19</td>
</tr>
<tr>
<td>Java SE 12</td>
<td>JDK 12</td>
<td>-</td>
<td>2019-03-19</td>
<td>-</td>
<td>12.0.2<br>2019-07-16</td>
</tr>
<tr>
<td>Java SE 13</td>
<td>JDK 13</td>
<td>-</td>
<td>2019-09-19</td>
<td>-</td>
<td>13.0.2<br>2020-01-14</td>
</tr>
<tr>
<td>Java SE 14</td>
<td>JDK 14</td>
<td>-</td>
<td>2020-03-17</td>
<td>-</td>
<td>14.0.2<br>2020-07-14</td>
</tr>
<tr>
<td>Java SE 15</td>
<td>JDK 15</td>
<td>-</td>
<td>2020-09-15</td>
<td>-</td>
<td>15.0.2<br>2021-01-19</td>
</tr>
<tr>
<td>Java SE 16</td>
<td>JDK 16</td>
<td>-</td>
<td>2021-03-16</td>
<td>-</td>
<td>16.0.2<br>2021-07-20</td>
</tr>
<tr>
<td>Java SE 17</td>
<td>JDK 17</td>
<td>-</td>
<td>2021-09-14</td>
<td>2029-09-30</td>
<td>17<br>2021-09-14</td>
</tr>
<tr>
<td>Java SE 18</td>
<td>JDK 18</td>
<td>-</td>
<td>2022-03-22</td>
<td>-</td>
<td>-</td>
</tr>
</tbody></table>
<span id="more"></span>
]]></content>
      <categories>
        <category>JDK</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>Java</tag>
        <tag>JDK</tag>
      </tags>
  </entry>
  <entry>
    <title>UML类图</title>
    <url>/UML/UML%E7%B1%BB%E5%9B%BE/</url>
    <content><![CDATA[<style>
[alt="类之间的关系"] {
    width: 360px;
}
</style>

<h2 id="UML图分类"><a href="#UML图分类" class="headerlink" title="UML图分类"></a>UML图分类</h2><ul>
<li>用例图(use case)</li>
<li>静态结构图：类图、对象图、包图、组件图、部署图</li>
<li>动态行为图：交互图(时序图与协作图)、状态图、活动图</li>
</ul>
<span id="more"></span>

<h2 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h2><ul>
<li>用于描述系统中的类(对象)本身的组成和类(对象)之间的各种静态关系</li>
</ul>
<h3 id="属性、方法表达式"><a href="#属性、方法表达式" class="headerlink" title="属性、方法表达式"></a>属性、方法表达式</h3><ul>
<li>属性：<code>可见性 名称:类型 [ = 缺省值 ]</code></li>
<li>方法：<code>可见性 名称(参数列表) [ : 返回类型]</code></li>
</ul>
<p>可见性说明：<code>- private</code>、<code>～ default</code>、<code># protected</code>、<code>+ public</code></p>
<h3 id="类之间的关系"><a href="#类之间的关系" class="headerlink" title="类之间的关系"></a>类之间的关系</h3><p><img src="/UML/UML%E7%B1%BB%E5%9B%BE/%E7%B1%BB%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB.png" alt="类之间的关系"></p>
<h2 id="依赖关系-Dependence"><a href="#依赖关系-Dependence" class="headerlink" title="依赖关系(Dependence)"></a>依赖关系(Dependence)</h2><p><img src="/UML/UML%E7%B1%BB%E5%9B%BE/%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB.png" alt="依赖关系"></p>
<h2 id="关联关系-Association"><a href="#关联关系-Association" class="headerlink" title="关联关系(Association)"></a>关联关系(Association)</h2><p><img src="/UML/UML%E7%B1%BB%E5%9B%BE/%E5%85%B3%E8%81%94%E5%85%B3%E7%B3%BB.png" alt="关联关系"></p>
<h2 id="泛化关系-Generalization"><a href="#泛化关系-Generalization" class="headerlink" title="泛化关系(Generalization)"></a>泛化关系(Generalization)</h2><p><img src="/UML/UML%E7%B1%BB%E5%9B%BE/%E6%B3%9B%E5%8C%96%E5%85%B3%E7%B3%BB.png" alt="泛化关系"></p>
<h2 id="实现关系-Implementation"><a href="#实现关系-Implementation" class="headerlink" title="实现关系(Implementation)"></a>实现关系(Implementation)</h2><p><img src="/UML/UML%E7%B1%BB%E5%9B%BE/%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB.png" alt="实现关系"></p>
<h2 id="聚合关系-Aggregation"><a href="#聚合关系-Aggregation" class="headerlink" title="聚合关系(Aggregation)"></a>聚合关系(Aggregation)</h2><p><img src="/UML/UML%E7%B1%BB%E5%9B%BE/%E8%81%9A%E5%90%88%E5%85%B3%E7%B3%BB.png" alt="聚合关系"></p>
<h2 id="组合关系-Composition"><a href="#组合关系-Composition" class="headerlink" title="组合关系(Composition)"></a>组合关系(Composition)</h2><p><img src="/UML/UML%E7%B1%BB%E5%9B%BE/%E7%BB%84%E5%90%88%E5%85%B3%E7%B3%BB.png" alt="组合关系"></p>
]]></content>
      <categories>
        <category>UML</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>UML</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL_优化：Show Profile分析</title>
    <url>/MySQL/MySQL_%E4%BC%98%E5%8C%96%EF%BC%9AShow%20Profile%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h2 id="什么是Show-Profile"><a href="#什么是Show-Profile" class="headerlink" title="什么是Show Profile"></a>什么是Show Profile</h2><ul>
<li>是MySQL提供可以用来分析当前会话中语句执行的资源消耗情况。可以用于SQL的调优的测量</li>
</ul>
<span id="more"></span>

<h2 id="开启Show-Profile"><a href="#开启Show-Profile" class="headerlink" title="开启Show Profile"></a>开启Show Profile</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查看</span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;profiling&#x27;</span>;</span><br><span class="line"></span><br><span class="line"># 开启（默认关闭，使用前需要开启）</span><br><span class="line"><span class="keyword">SET</span> profiling <span class="operator">=</span> <span class="keyword">ON</span>;</span><br></pre></td></tr></table></figure>

<h2 id="诊断SQL"><a href="#诊断SQL" class="headerlink" title="诊断SQL"></a>诊断SQL</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 执行<span class="keyword">SQL</span>后查看结果</span><br><span class="line"><span class="keyword">SHOW</span> PROFILES;</span><br><span class="line"></span><br><span class="line"># 根据查询结果的Query_ID诊断<span class="keyword">SQL</span></span><br><span class="line"><span class="keyword">SHOW</span> PROFILE cpu,block io <span class="keyword">FOR</span> QUERY [Query_ID];</span><br><span class="line"></span><br><span class="line"># PROFILE TYPE:  </span><br><span class="line"><span class="keyword">ALL</span>                            # 显示所有的开销信息  </span><br><span class="line">BLOCK IO                       # 显示块IO相关开销  </span><br><span class="line">CONTEXT SWITCHES               #上下文切换相关开销  </span><br><span class="line">CPU                            # 显示CPU相关开销信息  </span><br><span class="line">IPC                            # 显示发送和接收相关开销信息  </span><br><span class="line">MEMORY                         # 显示内存相关开销信息  </span><br><span class="line">PAGE FAULTS                    # 显示页面错误相关开销信息  </span><br><span class="line">SOURCE                         # 显示和Source_function，Source_file，Source_line相关的开销信息  </span><br><span class="line">SWAPS                          # 显示交换次数相关开销的信息  </span><br><span class="line"></span><br><span class="line"># 需要注意的诊断Status结论</span><br><span class="line">converting HEAP <span class="keyword">to</span> MyISAM      # 查询结果太大，内存不够往磁盘上搬</span><br><span class="line">Creating tmp <span class="keyword">table</span>             # 创建临时表</span><br><span class="line">Copying <span class="keyword">to</span> tmp <span class="keyword">table</span> <span class="keyword">on</span> disk   # 把内存中临时表复制到磁盘</span><br><span class="line">locked                         # 锁住了</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>数据库</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL_优化：性能分析Explain</title>
    <url>/MySQL/MySQL_%E4%BC%98%E5%8C%96%EF%BC%9A%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90Explain/</url>
    <content><![CDATA[<h2 id="什么是Explain"><a href="#什么是Explain" class="headerlink" title="什么是Explain"></a>什么是Explain</h2><ul>
<li>EXPLAIN关键字可以模拟优化器执行SQL查询语句，从而知道MySQL如何处理SQL语句。进行分析查询语句或是表结构的性能瓶颈。</li>
</ul>
<span id="more"></span>

<h2 id="Explain分析结果"><a href="#Explain分析结果" class="headerlink" title="Explain分析结果"></a>Explain分析结果</h2><ul>
<li>表的读取顺序</li>
<li>数据读取操作的操作类型</li>
<li>哪些索引可以使用</li>
<li>哪些索引被实际使用</li>
<li>表之间的引用</li>
<li>每张表有多少行被优化器查询</li>
</ul>
<h2 id="Explain语法"><a href="#Explain语法" class="headerlink" title="Explain语法"></a>Explain语法</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXPLAIN <span class="operator">&lt;</span><span class="keyword">SQL</span>查询语句<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Explain字段解释"><a href="#Explain字段解释" class="headerlink" title="Explain字段解释"></a>Explain字段解释</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">--+---------+----+--------+----+-----------+---+------+----+----+-----+-----+</span></span><br><span class="line"> <span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> partitions <span class="operator">|</span> type  <span class="operator">|</span> possible_keys <span class="operator">|</span> key <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--+---------+----+--------+----+-----------+---+------+----+----+-----+-----+</span></span><br><span class="line"></span><br><span class="line">id：查询标识符</span><br><span class="line">select_type：查询类型</span><br><span class="line"><span class="keyword">table</span>：输出行描述的表的表名</span><br><span class="line">partitions：匹配的分区</span><br><span class="line">type：连接类型</span><br><span class="line">possible_keys：可供选择使用的索引</span><br><span class="line">key：实际使用的索引</span><br><span class="line">key_len：实际使用的索引的长度</span><br><span class="line"><span class="keyword">ref</span>：与索引进行比较的列，也就是关联表使用的列</span><br><span class="line"><span class="keyword">rows</span>：估计要检查的行数</span><br><span class="line">filtered：按表条件过滤的行的百分比</span><br><span class="line">Extra：附加信息</span><br></pre></td></tr></table></figure>

<h3 id="id"><a href="#id" class="headerlink" title="id"></a>id</h3><ul>
<li>id相同，执行顺序由上至下</li>
<li>id不同，id值越大优先级越高，越先被执行</li>
</ul>
<h3 id="select-type"><a href="#select-type" class="headerlink" title="select_type"></a>select_type</h3><ul>
<li><code>SIMPLE </code> 简单SELECT，不使用UNION或子查询等</li>
<li><code>PRIMARY </code> 查询中若包含任何复杂的子部分，最外层的SELECT被标记为PRIMARY</li>
<li><code>UNION </code> 在 UNION 查询中的第二个或者之后的 SELECT 语句</li>
<li><code>UNION RESULT </code> UNION的结果</li>
<li><code>SUBQUERY </code> 在子查询中的第一个SELECT</li>
<li><code>DERIVED </code> 衍生表的SELECT，FROM子句的子查询</li>
</ul>
<h3 id="table"><a href="#table" class="headerlink" title="table"></a>table</h3><ul>
<li>对应行正在访问哪一个表，表名或者别名</li>
</ul>
<h3 id="type"><a href="#type" class="headerlink" title="type"></a>type</h3><p>依次从好到差：<code>system</code> &gt; <code>const</code> &gt; <code>eq_ref</code> &gt; <code>ref</code> &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; <code>range</code> &gt; <code>index</code> &gt; <code>ALL</code></p>
<ul>
<li><code>system </code> 表只有一行数据（等于系统表）</li>
<li><code>const </code> 针对主键或唯一索引的等值查询扫描, 最多只返回一行数据</li>
<li><code>eq_ref </code> 主键或唯一索引的所有部分被join连接使用 ，最多只会返回一条符合条件的记录</li>
<li><code>ref </code> 相比eq_ref，不使用唯一索引，而是使用普通索引或者唯一性索引的部分前缀，索引要和某个值相比较，可能会找到多个符合条件的行</li>
<li><code>range </code> 范围扫描通常出现在 in()，between ，&gt; ，&lt;，&gt;&#x3D; 等操作中</li>
<li><code>index </code> 和ALL一样全表扫描，不同就是mysql只需扫描索引树，这通常比ALL快一些</li>
<li><code>ALL </code> 最坏的情况，全表扫描</li>
</ul>
<h3 id="possible-keys"><a href="#possible-keys" class="headerlink" title="possible_keys"></a>possible_keys</h3><ul>
<li>在当前查询中可能使用到的索引. 注意，即使有些索引在 <code>possible_keys</code> 中出现, 但是并不表示此索引会真正地被 MySQL 使用到. MySQL 在查询时具体使用了哪些索引, 由 <code>key</code> 字段决定</li>
</ul>
<h3 id="key"><a href="#key" class="headerlink" title="key"></a>key</h3><ul>
<li>此字段是 MySQL 在当前查询时所真正使用到的索引</li>
</ul>
<h3 id="key-len"><a href="#key-len" class="headerlink" title="key_len"></a>key_len</h3><ul>
<li>索引最大长度是768字节，当字符串过长时，mysql会做一个类似左前缀索引的处理，将前半部分的字符提取出来做索引</li>
</ul>
<h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><ul>
<li>表示上述表的连接匹配条件，即哪些列或常量被用于查找索引列上的值</li>
</ul>
<h3 id="rows"><a href="#rows" class="headerlink" title="rows"></a>rows</h3><ul>
<li>rows列显示MySQL认为它执行查询时必须检查的行数。注意这是一个预估值</li>
</ul>
<h3 id="Extra"><a href="#Extra" class="headerlink" title="Extra"></a>Extra</h3><ul>
<li><code>Using filesort </code> 表示 MySQL 需额外的排序操作, 不能通过索引顺序达到排序效果. 一般有 Using filesort, 都建议优化去掉, 因为这样的查询 CPU 资源消耗大</li>
<li><code>Using temporary </code> 查询中会使用临时表, 一般出现于排序, 分组和多表 join 的情况, 查询效率不高, 建议优化</li>
<li><code>Using index </code> “覆盖索引扫描”, 表示查询在索引树中就可查找所需数据, 不用扫描表数据文件, 往往说明性能不错</li>
<li><code>Using where </code> 表示使用了where过滤</li>
<li><code>Using join buffer </code> 表示使用了连接缓存</li>
<li><code>impossible where </code> where子句的值总是false，不能用来获取任何元组</li>
<li><code>select tables optimized away </code> 在没有GROUP BY子句的情况下，基于索引优化MIN&#x2F;MAX操作或者对于MyISAM存储引擎优化COUNT(*)操作，不必等到执行阶段再进行计算，查询执行计划生成的阶段即完成优化</li>
<li><code>distinct </code> 优化distinct操作，在找到第一匹配的元组后即停止找同样值的动作</li>
</ul>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>数据库</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL_优化：慢查询日志</title>
    <url>/MySQL/MySQL_%E4%BC%98%E5%8C%96%EF%BC%9A%E6%85%A2%E6%9F%A5%E8%AF%A2%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<h2 id="什么是慢查询日志"><a href="#什么是慢查询日志" class="headerlink" title="什么是慢查询日志"></a>什么是慢查询日志</h2><ul>
<li>慢查询日志是MySQL提供多一种日志记录，它用来记录在MySQL中响应时间超过阀值的语句，具体指运行时间超过long_query_time值的SQL，则会被记录到慢查询日志中</li>
<li>慢查询日志默认是关闭的，开启慢查询日志会带来一定的性能影响，不是调优需要，一般不建议开启</li>
</ul>
<span id="more"></span>

<h2 id="开启慢查询日志"><a href="#开启慢查询日志" class="headerlink" title="开启慢查询日志"></a>开启慢查询日志</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查看</span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;%slow_query_log%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"># 开启（当前数据库生效，重启MySQL失效）</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> slow_query_log <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"># 关闭</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> slow_query_log <span class="operator">=</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<h2 id="设置慢查询阀值时间"><a href="#设置慢查询阀值时间" class="headerlink" title="设置慢查询阀值时间"></a>设置慢查询阀值时间</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查看（默认<span class="number">10</span>秒）</span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;%long_query_time%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"># 设置（判断大于long_query_time，而非大于等于；设置后需重新连接或新开会话才能看到修改值）</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> long_query_time<span class="operator">=</span><span class="number">3</span>;</span><br></pre></td></tr></table></figure>

<h2 id="查询慢查询当前系统总记录"><a href="#查询慢查询当前系统总记录" class="headerlink" title="查询慢查询当前系统总记录"></a>查询慢查询当前系统总记录</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GLOBAL</span> STATUS <span class="keyword">LIKE</span> <span class="string">&#x27;%slow_queries%&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="慢查询配置版"><a href="#慢查询配置版" class="headerlink" title="慢查询配置版"></a>慢查询配置版</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 修改my.cnf文件，[mysqld]下添加参数</span><br><span class="line">slow_query_log <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">slow_query_log_file<span class="operator">=</span><span class="operator">/</span>var<span class="operator">/</span>lib<span class="operator">/</span>mysql<span class="operator">/</span>host_name<span class="operator">-</span>slow.log</span><br><span class="line">long_query_time<span class="operator">=</span><span class="number">3</span>;</span><br><span class="line">log_output<span class="operator">=</span>FILE</span><br></pre></td></tr></table></figure>

<h2 id="日志分析工具mysqldumpslow"><a href="#日志分析工具mysqldumpslow" class="headerlink" title="日志分析工具mysqldumpslow"></a>日志分析工具mysqldumpslow</h2><h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><p>s：是表示按照何种方式排序<br>c：访问次数<br>l：锁定时间<br>r：返回记录<br>t：查询时间<br>al：平均锁定时间<br>ar：平均返回记录数<br>at：平均查询时间<br>t NUM：显示头num条记录<br>g PATTERN：正则匹配，大小写不敏感</p>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 得到返回记录集最多的<span class="number">10</span>个<span class="keyword">SQL</span></span><br><span class="line">mysqldumpslow <span class="operator">-</span>s r <span class="operator">-</span>t <span class="number">10</span> <span class="operator">/</span>var<span class="operator">/</span>lib<span class="operator">/</span>mysql<span class="operator">/</span>host_name<span class="operator">-</span>slow.log</span><br><span class="line"></span><br><span class="line"># 得到访问次数最多的<span class="number">10</span>个<span class="keyword">SQL</span></span><br><span class="line">mysqldumpslow <span class="operator">-</span>s c <span class="operator">-</span>t <span class="number">10</span> <span class="operator">/</span>var<span class="operator">/</span>lib<span class="operator">/</span>mysql<span class="operator">/</span>host_name<span class="operator">-</span>slow.log</span><br><span class="line"></span><br><span class="line"># 得到按照时间排序的前<span class="number">10</span>条里面含有左连接的查询语句</span><br><span class="line">mysqldumpslow <span class="operator">-</span>s t <span class="operator">-</span>t <span class="number">10</span> <span class="operator">-</span>g &quot;left join&quot; <span class="operator">/</span>var<span class="operator">/</span>lib<span class="operator">/</span>mysql<span class="operator">/</span>host_name<span class="operator">-</span>slow.log</span><br><span class="line"></span><br><span class="line"># 另外建议在使用这些命令结合 <span class="operator">|</span> 和more使用，否则有可能出现爆屏情况</span><br><span class="line">mysqldumpslow <span class="operator">-</span>s r <span class="operator">-</span>t <span class="number">10</span> <span class="operator">/</span>var<span class="operator">/</span>lib<span class="operator">/</span>mysql<span class="operator">/</span>host_name<span class="operator">-</span>slow.log <span class="operator">|</span> more</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>数据库</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL_优化：查询优化</title>
    <url>/MySQL/MySQL_%E4%BC%98%E5%8C%96%EF%BC%9A%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h2 id="查询优化"><a href="#查询优化" class="headerlink" title="查询优化"></a>查询优化</h2><h3 id="小表驱动大表"><a href="#小表驱动大表" class="headerlink" title="小表驱动大表"></a>小表驱动大表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 当B表的数据集小于A表的数据集时，用<span class="keyword">IN</span>优于<span class="keyword">EXISTS</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> A <span class="keyword">WHERE</span> id <span class="keyword">IN</span> (<span class="keyword">SELECT</span> id <span class="keyword">FROM</span> B)</span><br><span class="line"></span><br><span class="line"># 当A表的数据集小于B表的数据集时，用<span class="keyword">EXISTS</span>优于<span class="keyword">IN</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> A <span class="keyword">WHERE</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">FROM</span> B <span class="keyword">WHERE</span> B.id <span class="operator">=</span> A.id)</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="ORDER-BY关键字优化"><a href="#ORDER-BY关键字优化" class="headerlink" title="ORDER BY关键字优化"></a>ORDER BY关键字优化</h2><ul>
<li>MySQL支持二种方式的排序，FileSort和Index。Index指MySQL扫描索引本身完成排序，Index方式效率高。</li>
</ul>
<h3 id="Index方式排序"><a href="#Index方式排序" class="headerlink" title="Index方式排序"></a>Index方式排序</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">索引：KEY a_b_c(a, b, c)</span><br><span class="line"></span><br><span class="line"># <span class="keyword">ORDER</span> <span class="keyword">BY</span>能使用索引最左前缀</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> a</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> a, b</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> a, b, c</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> a <span class="keyword">DESC</span>, b <span class="keyword">DESC</span>, c <span class="keyword">DESC</span></span><br><span class="line"></span><br><span class="line"># <span class="keyword">WHERE</span>使用索引的最左前缀定义为常量，则<span class="keyword">ORDER</span> <span class="keyword">BY</span>能使用索引</span><br><span class="line"><span class="keyword">WHERE</span> a <span class="operator">=</span> const <span class="keyword">ORDER</span> <span class="keyword">BY</span> b, c</span><br><span class="line"><span class="keyword">WHERE</span> a <span class="operator">=</span> const <span class="keyword">AND</span> b <span class="operator">=</span> const <span class="keyword">ORDER</span> <span class="keyword">BY</span> c</span><br><span class="line"><span class="keyword">WHERE</span> a <span class="operator">=</span> const <span class="keyword">AND</span> b <span class="operator">&gt;</span> const <span class="keyword">ORDER</span> <span class="keyword">BY</span> b, c</span><br><span class="line"></span><br><span class="line"># 不能使用索引进行排序</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> a <span class="keyword">ASC</span>, b <span class="keyword">DESC</span>, c <span class="keyword">DESC</span>	         # 排序不一致</span><br><span class="line"><span class="keyword">WHERE</span> g <span class="operator">=</span> const <span class="keyword">ORDER</span> <span class="keyword">BY</span> b, c	         # 丢失a索引</span><br><span class="line"><span class="keyword">WHERE</span> a <span class="operator">=</span> const <span class="keyword">ORDER</span> <span class="keyword">BY</span> c	                 # 丢失b索引</span><br><span class="line"><span class="keyword">WHERE</span> a <span class="operator">=</span> const <span class="keyword">ORDER</span> <span class="keyword">BY</span> a, d	         # d不是索引的一部分</span><br><span class="line"><span class="keyword">WHERE</span> a <span class="keyword">in</span> (...) <span class="keyword">ORDER</span> <span class="keyword">BY</span> b, c                    # 对于排序来说，多个相等条件也是范围查询</span><br></pre></td></tr></table></figure>

<h3 id="FileSort方式排序算法"><a href="#FileSort方式排序算法" class="headerlink" title="FileSort方式排序算法"></a>FileSort方式排序算法</h3><ul>
<li><strong>双路排序：</strong>MySQL 4.1之前是使用双路排序,字面意思就是两次扫描磁盘，最终得到数据，读取行指针和orderby列，对他们进行排序，然后扫描已经排序好的列表，按照列表中的值重新从列表中读取对应的数据输出</li>
<li><strong>单路排序：</strong>从磁盘读取查询需要的所有列，按照order by列在buffer对它们进行排序，然后扫描排序后的列表进行输出，它的效率更快一些，避免了第二次读取数据。并且把随机IO变成了顺序IO,但是它会使用更多的空间，因为它把每一行都保存在内存中了。</li>
</ul>
<h3 id="FileSort方式优化策略"><a href="#FileSort方式优化策略" class="headerlink" title="FileSort方式优化策略"></a>FileSort方式优化策略</h3><ul>
<li>不用SELECT *</li>
<li>增大max_length_for_sort_data参数的设置</li>
<li>增大sort_buffer_size参数的设置</li>
</ul>
<h2 id="GROUP-BY关键字优化"><a href="#GROUP-BY关键字优化" class="headerlink" title="GROUP BY关键字优化"></a>GROUP BY关键字优化</h2><ul>
<li>GROUP BY实质是<code>先排序后分组</code>，遵照索引建的最佳左前缀</li>
<li>WHERE高于HAVING，能写在WHERE限定的条件就不要去HAVING限定了</li>
<li>优化方式同ORDER BY</li>
</ul>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>数据库</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL_优化：索引分析</title>
    <url>/MySQL/MySQL_%E4%BC%98%E5%8C%96%EF%BC%9A%E7%B4%A2%E5%BC%95%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h2 id="单表"><a href="#单表" class="headerlink" title="单表"></a>单表</h2><h3 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `article` ( </span><br><span class="line">	`id` <span class="type">INT</span>(<span class="number">10</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT, </span><br><span class="line">	`author_id` <span class="type">INT</span>(<span class="number">10</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span>, </span><br><span class="line">	`category_id` <span class="type">INT</span>(<span class="number">10</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span>, </span><br><span class="line">	`views` <span class="type">INT</span>(<span class="number">10</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span>, </span><br><span class="line">	`comments` <span class="type">INT</span>(<span class="number">10</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span>, </span><br><span class="line">	`title` <span class="type">VARBINARY</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>, </span><br><span class="line">	`content` TEXT <span class="keyword">NOT</span> <span class="keyword">NULL</span> </span><br><span class="line">); </span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `article`(`author_id`, `category_id`, `views`, `comments`, `title`, `content`) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>), (<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;2&#x27;</span>), (<span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;3&#x27;</span>); </span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="优化分析"><a href="#优化分析" class="headerlink" title="优化分析"></a>优化分析</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 问题：type 是 <span class="keyword">ALL</span>，Extra 里出现了 <span class="keyword">Using</span> filesort</span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> id,author_id <span class="keyword">FROM</span> article <span class="keyword">WHERE</span> category_id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">AND</span> comments <span class="operator">&gt;</span> <span class="number">1</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> views <span class="keyword">DESC</span> LIMIT <span class="number">1</span>; </span><br><span class="line"></span><br><span class="line"># 优化<span class="number">1</span>：type 是 <span class="keyword">range</span>，Extra 里出现了 <span class="keyword">Using</span> filesort</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `article` <span class="keyword">ADD</span> INDEX idx_article_ccv ( `category_id` , `comments`, `views` ); </span><br><span class="line"></span><br><span class="line"># 优化<span class="number">2</span>：type 是 <span class="keyword">ref</span></span><br><span class="line"><span class="keyword">DROP</span> INDEX idx_article_ccv <span class="keyword">ON</span> article;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `article` <span class="keyword">ADD</span> INDEX idx_article_cv ( `category_id` , `views` );</span><br></pre></td></tr></table></figure>

<h2 id="两表"><a href="#两表" class="headerlink" title="两表"></a>两表</h2><h3 id="SQL-1"><a href="#SQL-1" class="headerlink" title="SQL"></a>SQL</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `class` (</span><br><span class="line">`id` <span class="type">INT</span>(<span class="number">10</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">`card` <span class="type">INT</span>(<span class="number">10</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `book` (</span><br><span class="line">`bookid` <span class="type">INT</span>(<span class="number">10</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">`card` <span class="type">INT</span>(<span class="number">10</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`bookid`)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> class(card) <span class="keyword">VALUES</span>(<span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> (RAND() <span class="operator">*</span> <span class="number">10</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> class(card) <span class="keyword">VALUES</span>(<span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> (RAND() <span class="operator">*</span> <span class="number">10</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> class(card) <span class="keyword">VALUES</span>(<span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> (RAND() <span class="operator">*</span> <span class="number">10</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> class(card) <span class="keyword">VALUES</span>(<span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> (RAND() <span class="operator">*</span> <span class="number">10</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> class(card) <span class="keyword">VALUES</span>(<span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> (RAND() <span class="operator">*</span> <span class="number">10</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> class(card) <span class="keyword">VALUES</span>(<span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> (RAND() <span class="operator">*</span> <span class="number">10</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> class(card) <span class="keyword">VALUES</span>(<span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> (RAND() <span class="operator">*</span> <span class="number">10</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> class(card) <span class="keyword">VALUES</span>(<span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> (RAND() <span class="operator">*</span> <span class="number">10</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> class(card) <span class="keyword">VALUES</span>(<span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> (RAND() <span class="operator">*</span> <span class="number">10</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> class(card) <span class="keyword">VALUES</span>(<span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> (RAND() <span class="operator">*</span> <span class="number">10</span>)));</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> book(card) <span class="keyword">VALUES</span>(<span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> (RAND() <span class="operator">*</span> <span class="number">10</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> book(card) <span class="keyword">VALUES</span>(<span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> (RAND() <span class="operator">*</span> <span class="number">10</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> book(card) <span class="keyword">VALUES</span>(<span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> (RAND() <span class="operator">*</span> <span class="number">10</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> book(card) <span class="keyword">VALUES</span>(<span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> (RAND() <span class="operator">*</span> <span class="number">10</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> book(card) <span class="keyword">VALUES</span>(<span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> (RAND() <span class="operator">*</span> <span class="number">10</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> book(card) <span class="keyword">VALUES</span>(<span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> (RAND() <span class="operator">*</span> <span class="number">10</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> book(card) <span class="keyword">VALUES</span>(<span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> (RAND() <span class="operator">*</span> <span class="number">10</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> book(card) <span class="keyword">VALUES</span>(<span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> (RAND() <span class="operator">*</span> <span class="number">10</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> book(card) <span class="keyword">VALUES</span>(<span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> (RAND() <span class="operator">*</span> <span class="number">10</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> book(card) <span class="keyword">VALUES</span>(<span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> (RAND() <span class="operator">*</span> <span class="number">10</span>)));</span><br></pre></td></tr></table></figure>

<h3 id="优化分析-1"><a href="#优化分析-1" class="headerlink" title="优化分析"></a>优化分析</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 问题：两表type 是 <span class="keyword">ALL</span> </span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> class <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> book <span class="keyword">ON</span> class.card <span class="operator">=</span> book.card; </span><br><span class="line"></span><br><span class="line"># 优化<span class="number">1</span>：左表type 是 index，右表type 是 <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `class` <span class="keyword">ADD</span> INDEX idx_card ( `card`); </span><br><span class="line"></span><br><span class="line"># 优化<span class="number">2</span>：左表type 是 <span class="keyword">ALL</span>，右表type 是 <span class="keyword">ref</span></span><br><span class="line"><span class="keyword">DROP</span> INDEX idx_card <span class="keyword">ON</span> class; </span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `book` <span class="keyword">ADD</span> INDEX idx_card ( `card`); </span><br></pre></td></tr></table></figure>

<h2 id="三表"><a href="#三表" class="headerlink" title="三表"></a>三表</h2><h3 id="SQL-2"><a href="#SQL-2" class="headerlink" title="SQL"></a>SQL</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `phone` (</span><br><span class="line">`phoneid` <span class="type">INT</span>(<span class="number">10</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">`card` <span class="type">INT</span>(<span class="number">10</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`phoneid`)</span><br><span class="line">) ENGINE <span class="operator">=</span> INNODB;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> phone(card) <span class="keyword">VALUES</span>(<span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> (RAND() <span class="operator">*</span> <span class="number">10</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> phone(card) <span class="keyword">VALUES</span>(<span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> (RAND() <span class="operator">*</span> <span class="number">10</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> phone(card) <span class="keyword">VALUES</span>(<span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> (RAND() <span class="operator">*</span> <span class="number">10</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> phone(card) <span class="keyword">VALUES</span>(<span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> (RAND() <span class="operator">*</span> <span class="number">10</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> phone(card) <span class="keyword">VALUES</span>(<span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> (RAND() <span class="operator">*</span> <span class="number">10</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> phone(card) <span class="keyword">VALUES</span>(<span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> (RAND() <span class="operator">*</span> <span class="number">10</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> phone(card) <span class="keyword">VALUES</span>(<span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> (RAND() <span class="operator">*</span> <span class="number">10</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> phone(card) <span class="keyword">VALUES</span>(<span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> (RAND() <span class="operator">*</span> <span class="number">10</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> phone(card) <span class="keyword">VALUES</span>(<span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> (RAND() <span class="operator">*</span> <span class="number">10</span>)));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> phone(card) <span class="keyword">VALUES</span>(<span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> (RAND() <span class="operator">*</span> <span class="number">10</span>)));</span><br></pre></td></tr></table></figure>

<h3 id="优化分析-2"><a href="#优化分析-2" class="headerlink" title="优化分析"></a>优化分析</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 问题：三表type 是 <span class="keyword">ALL</span> </span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> class <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> book <span class="keyword">ON</span> class.card<span class="operator">=</span>book.card <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> phone <span class="keyword">ON</span> book.card <span class="operator">=</span> phone.card; </span><br><span class="line"></span><br><span class="line"># 优化<span class="number">1</span>：左表type 是 <span class="keyword">ALL</span>，两个右表type 是 <span class="keyword">ref</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `phone` <span class="keyword">ADD</span> INDEX idx_card ( `card`); </span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `book` <span class="keyword">ADD</span> INDEX idx_card ( `card`); </span><br></pre></td></tr></table></figure>














]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>数据库</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Git_常用命令</title>
    <url>/Git/Git_%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="初始化配置"><a href="#初始化配置" class="headerlink" title="初始化配置"></a>初始化配置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询配置信息</span></span><br><span class="line">git config --list                                <span class="comment"># 列出当前配置</span></span><br><span class="line">git config --<span class="built_in">local</span> --list                        <span class="comment"># 列出仓库配置</span></span><br><span class="line">git config --global --list                       <span class="comment"># 列出全局配置</span></span><br><span class="line">git config --system --list                       <span class="comment"># 列出系统配置</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置用户信息</span></span><br><span class="line">git config --global user.name &lt;user&gt;             <span class="comment"># 配置用户名</span></span><br><span class="line">git config --global user.email &lt;email&gt;           <span class="comment"># 配置用户邮箱</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 其他配置</span></span><br><span class="line">git config --global merge.tool vimdiff           <span class="comment"># 配置解决冲突时使用哪种差异分析工具，比如要使用vimdiff</span></span><br><span class="line">git config --global alias.co checkout    　　　   <span class="comment"># 配置别名</span></span><br><span class="line">git config --global color.ui auto    　　　　　　  <span class="comment"># 配置git命令输出为彩色的</span></span><br><span class="line">git config --global core.editor vi    　　　　　　 <span class="comment"># 配置git使用的文本编辑器</span></span><br><span class="line">git config --global credential.helper cache      <span class="comment"># 配置到缓存 默认15分钟</span></span><br><span class="line">git config --global credential.helper <span class="string">&#x27;cache --timeout=3600&#x27;</span>      <span class="comment"># 修改缓存时间</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 增加文件</span></span><br><span class="line">git add .                                        <span class="comment"># 添加当前目录的所有文件到暂存区</span></span><br><span class="line">git add &lt;file&gt;...                                <span class="comment"># 添加指定文件到暂存区</span></span><br><span class="line">git add &lt;<span class="built_in">dir</span>&gt;                                    <span class="comment"># 添加指定目录到暂存区，包括子目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除文件</span></span><br><span class="line">git <span class="built_in">rm</span> &lt;file&gt;...                                 <span class="comment"># 将工作区，暂存区文件删除</span></span><br><span class="line">git <span class="built_in">rm</span> --cached &lt;file&gt;                           <span class="comment"># 将暂存区文件删除，工作区保留</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交文件</span></span><br><span class="line">git commit -m &lt;message&gt;                          <span class="comment"># 提交暂存区的所有文件到本地库</span></span><br><span class="line">git commit &lt;file&gt;... -m &lt;message&gt;                <span class="comment"># 提交暂存区的指定文件到本地库</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 撤销文件</span></span><br><span class="line"><span class="comment"># reset [&lt;mode&gt;] 参数说明：</span></span><br><span class="line"><span class="comment">#   - soft：在本地库移动 HEAD 指针</span></span><br><span class="line"><span class="comment">#   - mixed：在本地库移动 HEAD 指针, 重置暂存区</span></span><br><span class="line"><span class="comment">#   - hard：在本地库移动 HEAD 指针, 重置暂存区, 重置工作区</span></span><br><span class="line">git reset --hard HEAD                            <span class="comment"># 将暂存区文件恢复到工作区</span></span><br><span class="line">git reset --hard &lt;<span class="built_in">id</span>&gt;                            <span class="comment"># 基于索引值, 可前进后退</span></span><br><span class="line">git reset --hard HEAD^                           <span class="comment"># 使用^符号：只能前进 (一个^表示前进一步，n 个表示前进 n 步)</span></span><br><span class="line">git reset --hard HEAD~n                          <span class="comment"># 使用~符号：只能前进 (表示前进 n 步)</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 比较文件</span></span><br><span class="line">git diff &lt;file&gt;                                  <span class="comment"># 比较工作区和暂存区文件差异 </span></span><br><span class="line">git diff &lt;<span class="built_in">id</span>&gt; &lt;file&gt;                             <span class="comment"># 比较工作区和本地库文件差异 </span></span><br><span class="line">git diff &lt;id1&gt; &lt;id2&gt;                             <span class="comment"># 比较本地库两个文件差异</span></span><br><span class="line">git diff &lt;branch1&gt; &lt;branch2&gt;                     <span class="comment"># 比较两个分支之间的文件差异</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重命名文件  </span></span><br><span class="line">git <span class="built_in">mv</span> &lt;file&gt; &lt;renamefile&gt;                       <span class="comment"># 重命名文件  </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看工作区、暂存区状态</span></span><br><span class="line">git status                                       <span class="comment"># 查看所有文件状态</span></span><br><span class="line">git status &lt;file&gt;                                <span class="comment"># 查看指定文件状态</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看历史记录</span></span><br><span class="line">git <span class="built_in">log</span>                                          <span class="comment"># 查看所有历史记录 (多屏显示控制方式：空格向下翻页, b 向上翻页, q 退出)    </span></span><br><span class="line">git <span class="built_in">log</span> &lt;file&gt;                                   <span class="comment"># 查看指定文件历史记录  </span></span><br><span class="line">git <span class="built_in">log</span> &lt;<span class="built_in">dir</span>&gt;                                    <span class="comment"># 查看指定目录历史记录</span></span><br><span class="line">git <span class="built_in">log</span> --pretty=oneline                         <span class="comment"># 每条记录只显示一行，只能查看之前历史记录</span></span><br><span class="line">git <span class="built_in">log</span> --oneline                                <span class="comment"># 每条记录只显示一行，只能查看之前历史记录</span></span><br><span class="line">git reflog                                       <span class="comment"># 查看所有分支的所有操作记录</span></span><br></pre></td></tr></table></figure>

<h2 id="远程操作"><a href="#远程操作" class="headerlink" title="远程操作"></a>远程操作</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建远程库地址别名</span></span><br><span class="line">git remote add &lt;remote&gt; &lt;url&gt;                    <span class="comment"># 创建远程库url别名</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改远程库地址url</span></span><br><span class="line">git remote set-url &lt;remote&gt; &lt;url&gt;                <span class="comment"># 修改远程库url地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程库地址别名</span></span><br><span class="line">git remote <span class="built_in">rm</span> &lt;remote&gt;                           <span class="comment"># 删除远程库url别名</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看远程库</span></span><br><span class="line">git remote -v                                    <span class="comment"># 查看所有远程库</span></span><br><span class="line">git remote show &lt;remote&gt;                         <span class="comment"># 查看某个远程仓库的信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送远程库</span></span><br><span class="line">git push                                         <span class="comment"># 推送本地所有分支到远程仓库</span></span><br><span class="line">git push &lt;remote&gt; &lt;branch&gt;                       <span class="comment"># 推送本地指定分支到远程仓库</span></span><br><span class="line">git push &lt;remote&gt; &lt;local-branch&gt;:&lt;remote-branch&gt; <span class="comment"># 推送本地指定分支到远程仓库指定分支</span></span><br><span class="line">git push &lt;remote&gt; --force                        <span class="comment"># 强行推送当前分支到远程仓库，即使有冲突</span></span><br><span class="line">git push &lt;remote&gt; --all                          <span class="comment"># 推送所有分支到远程仓库</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 克隆远程库</span></span><br><span class="line">git <span class="built_in">clone</span> &lt;url&gt;                                  <span class="comment"># 克隆项目(1.完整的把远程库下载到本地; 2.创建&lt;remote&gt;远程地址别名; 3.初始化本地库)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 拉取远程库</span></span><br><span class="line">git fetch &lt;remote&gt; &lt;branch&gt;                      <span class="comment"># 从远程库拉取指定分支到本地库</span></span><br><span class="line">git pull                                         <span class="comment"># 从远程库拉取所有分支到本地库，并合并到工作区(pull = fetch + merge)</span></span><br><span class="line">git pull &lt;remote&gt; &lt;branch&gt;                       <span class="comment"># 从远程库拉取指定分支到本地库，并合并到工作区(pull = fetch + merge)</span></span><br></pre></td></tr></table></figure>

<h2 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看分支</span></span><br><span class="line">git branch                                       <span class="comment"># 列出所有本地分支</span></span><br><span class="line">git branch -r                                    <span class="comment"># 列出所有远程分支</span></span><br><span class="line">git branch -a                                    <span class="comment"># 列出所有本地和远程分支</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建分支</span></span><br><span class="line">git branch &lt;branch&gt;                              <span class="comment"># 新建本地分支，但依然停留在当前分支</span></span><br><span class="line">git checkout -b &lt;branch&gt;                         <span class="comment"># 新建本地分支，并切换到该分支</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line">git branch -d &lt;branch&gt;                           <span class="comment"># 删除本地分支</span></span><br><span class="line">git branch -dr &lt;remote/branch&gt;                   <span class="comment"># 删除远程分支</span></span><br><span class="line">git push &lt;remote&gt; --delete &lt;branch&gt;              <span class="comment"># 删除远程分支</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换分支</span></span><br><span class="line">git checkout &lt;branch&gt;                            <span class="comment"># 切换到指定分支</span></span><br><span class="line">git checkout -                                   <span class="comment"># 切换到上一个分支</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并分支</span></span><br><span class="line">git merge &lt;branch&gt;                               <span class="comment"># 合并指定分支到当前分支</span></span><br></pre></td></tr></table></figure>

<h2 id="版本操作"><a href="#版本操作" class="headerlink" title="版本操作"></a>版本操作</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看版本</span></span><br><span class="line">git tag                                          <span class="comment"># 查看本地库版本</span></span><br><span class="line">git tag -r                                       <span class="comment"># 查看远程库版本</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建版本</span></span><br><span class="line">git tag &lt;tag&gt;                                    <span class="comment"># 创建本地库版本</span></span><br><span class="line">git tag -a &lt;tag&gt; -m &lt;message&gt;                    <span class="comment"># 创建本地库版本(带注释)</span></span><br><span class="line">git push &lt;remote&gt; &lt;tag&gt;                          <span class="comment"># 创建远程库版本(本地库版本push到远程)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除版本</span></span><br><span class="line">git tag -d &lt;name&gt;                                <span class="comment"># 删除本地库版本</span></span><br><span class="line">git push &lt;remote&gt; --delete tag &lt;tag&gt;             <span class="comment"># 删除远程库版本</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换版本</span></span><br><span class="line">git checkout &lt;tag&gt;                               <span class="comment"># 切换版本</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 拉取远程版本</span></span><br><span class="line">git pull &lt;remote&gt; --tags                         <span class="comment"># 拉取远程库所有版本到本地</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送远程版本</span></span><br><span class="line">git push &lt;remote&gt; &lt;tag&gt;                          <span class="comment"># 推送本地库指定版本到远程</span></span><br><span class="line">git push &lt;remote&gt; --tags                         <span class="comment"># 推送本地库所有版本到远程</span></span><br></pre></td></tr></table></figure>

<h2 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">help</span> &lt;<span class="built_in">command</span>&gt;                               <span class="comment"># 显示command的help</span></span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://git-scm.com/docs">Git文档</a></li>
<li><a href="https://gitee.com/progit/">Pro Git 中文版</a></li>
<li><a href="http://rogerdudler.github.io/git-guide/index.zh.html">Git 简明指南</a></li>
<li><a href="http://gitbook.liuhui998.com/index.html">Git Community Book 中文版</a></li>
<li><a href="http://marklodato.github.io/visual-git-guide/index-zh-cn.html">图解Git</a></li>
</ul>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>版本控制</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式_七大原则</title>
    <url>/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99/</url>
    <content><![CDATA[<h2 id="设计模式目的"><a href="#设计模式目的" class="headerlink" title="设计模式目的"></a>设计模式目的</h2><ul>
<li><code>重用性</code>  相同功能的代码，不用多次编写</li>
<li><code>可读性</code> 编程规范性, 便于其他程序员的阅读和理解</li>
<li><code>可扩展性</code> 当需要增加新的功能时，非常的方便，称为”可维护”</li>
<li><code>可靠性</code> 当我们增加新的功能后，对原来的功能没有影响</li>
<li>使程序呈现<code>高内聚</code>，<code>低耦合</code>的特性</li>
</ul>
<span id="more"></span>

<h2 id="设计模式七大原则"><a href="#设计模式七大原则" class="headerlink" title="设计模式七大原则"></a>设计模式七大原则</h2><h3 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h3><ul>
<li><code>Single Responsibility Principle (SRP)</code> 即一个类应该只负责一项职责</li>
</ul>
<h4 id="问题案例"><a href="#问题案例" class="headerlink" title="问题案例"></a>问题案例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. 违反了单一职责原则</span></span><br><span class="line"><span class="comment"> * 2. 解决的方案非常的简单，根据交通工具运行方法不同，分解成不同类即可</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingleResponsibility</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Vehicle</span> <span class="variable">vehicle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Vehicle</span>();</span><br><span class="line">        vehicle.run(<span class="string">&quot;汽车&quot;</span>);</span><br><span class="line">        vehicle.run(<span class="string">&quot;摩托车&quot;</span>);</span><br><span class="line">        vehicle.run(<span class="string">&quot;飞机&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String vehicle)</span> &#123;</span><br><span class="line">        System.out.println(vehicle + <span class="string">&quot; 在公路上行驶....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="解决案例一"><a href="#解决案例一" class="headerlink" title="解决案例一"></a>解决案例一</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. 遵守单一职责原则</span></span><br><span class="line"><span class="comment"> * 2. 但是这样做的改动很大，即将类分解，同时修改客户端</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingleResponsibility</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">RoadVehicle</span> <span class="variable">roadVehicle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RoadVehicle</span>();</span><br><span class="line">        roadVehicle.run(<span class="string">&quot;汽车&quot;</span>);</span><br><span class="line">        roadVehicle.run(<span class="string">&quot;摩托车&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">AirVehicle</span> <span class="variable">airVehicle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AirVehicle</span>();</span><br><span class="line">        airVehicle.run(<span class="string">&quot;飞机&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RoadVehicle</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String vehicle)</span> &#123;</span><br><span class="line">        System.out.println(vehicle + <span class="string">&quot; 在公路上行驶....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AirVehicle</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String vehicle)</span> &#123;</span><br><span class="line">        System.out.println(vehicle + <span class="string">&quot; 在天空上行驶....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="解决案例二"><a href="#解决案例二" class="headerlink" title="解决案例二"></a>解决案例二</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. 没有在类级别上遵守单一职责原则，但是在方法级别上仍然是遵守单一职责</span></span><br><span class="line"><span class="comment"> * 2. 这种修改方法没有对原来的类做大的修改，只是增加方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingleResponsibility</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Vehicle</span> <span class="variable">vehicle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Vehicle</span>();</span><br><span class="line">        vehicle.roadRun(<span class="string">&quot;汽车&quot;</span>);</span><br><span class="line">        vehicle.roadRun(<span class="string">&quot;摩托车&quot;</span>);</span><br><span class="line">        vehicle.airRun(<span class="string">&quot;飞机&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">roadRun</span><span class="params">(String vehicle)</span> &#123;</span><br><span class="line">        System.out.println(vehicle + <span class="string">&quot; 在公路上行驶....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">airRun</span><span class="params">(String vehicle)</span> &#123;</span><br><span class="line">        System.out.println(vehicle + <span class="string">&quot; 在天空上行驶....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h3><ul>
<li><code>Interface Segregation Principle (ISP)</code> 使用多个专门的接口，而不使用单一的总接口，即客户端不应该依赖那些它不需要的接口</li>
</ul>
<h4 id="问题案例-1"><a href="#问题案例-1" class="headerlink" title="问题案例"></a>问题案例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 类A通过接口I会依赖(使用)类B，但类A中只会使用到接口的1、2、3三个方法</span></span><br><span class="line"><span class="comment"> * 类C通过接口I会依赖(使用)类D，但类C中只会使用到接口的1、4、5三个方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterfaceSegregation</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        a.depend1(<span class="keyword">new</span> <span class="title class_">B</span>());</span><br><span class="line">        a.depend2(<span class="keyword">new</span> <span class="title class_">B</span>());</span><br><span class="line">        a.depend3(<span class="keyword">new</span> <span class="title class_">B</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">C</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">C</span>();</span><br><span class="line">        c.depend1(<span class="keyword">new</span> <span class="title class_">D</span>());</span><br><span class="line">        c.depend4(<span class="keyword">new</span> <span class="title class_">D</span>());</span><br><span class="line">        c.depend5(<span class="keyword">new</span> <span class="title class_">D</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">I</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method3</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method4</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method5</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend1</span><span class="params">(I i)</span>&#123;</span><br><span class="line">        i.method1();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend2</span><span class="params">(I i)</span>&#123;</span><br><span class="line">        i.method2();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend3</span><span class="params">(I i)</span>&#123;</span><br><span class="line">        i.method3();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">implements</span> <span class="title class_">I</span>&#123;</span><br><span class="line">    <span class="comment">// 类 B 只需要实现方法 1，2, 3，而其它方法它并不需要，但是也需要实现</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;类 B 实现接口 I 的方法 1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;类 B 实现接口 I 的方法 2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method3</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;类 B 实现接口 I 的方法 3&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method4</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method5</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend1</span><span class="params">(I i)</span>&#123;</span><br><span class="line">        i.method1();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend4</span><span class="params">(I i)</span>&#123;</span><br><span class="line">        i.method4();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend5</span><span class="params">(I i)</span>&#123;</span><br><span class="line">        i.method5();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span> <span class="keyword">implements</span> <span class="title class_">I</span>&#123;</span><br><span class="line">    <span class="comment">// 类 D 只需要实现方法 1，4，5，而其它方法它并不需要，但是也需要实现</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;类 D 实现接口 I 的方法 1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method3</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method4</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;类 D 实现接口 I 的方法 4&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method5</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;类 D 实现接口 I 的方法 5&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="解决案例"><a href="#解决案例" class="headerlink" title="解决案例"></a>解决案例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将接口I拆分为独立的几个接口，类A和类C分别与他们需要的接口建立依赖关系。也就是采用接口隔离原则</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterfaceSegregation</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        a.depend1(<span class="keyword">new</span> <span class="title class_">B</span>());</span><br><span class="line">        a.depend2(<span class="keyword">new</span> <span class="title class_">B</span>());</span><br><span class="line">        a.depend3(<span class="keyword">new</span> <span class="title class_">B</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">C</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">C</span>();</span><br><span class="line">        c.depend1(<span class="keyword">new</span> <span class="title class_">D</span>());</span><br><span class="line">        c.depend4(<span class="keyword">new</span> <span class="title class_">D</span>());</span><br><span class="line">        c.depend5(<span class="keyword">new</span> <span class="title class_">D</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">I1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">I2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method3</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">I3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method4</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method5</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend1</span><span class="params">(I1 i)</span>&#123;</span><br><span class="line">        i.method1();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend2</span><span class="params">(I2 i)</span>&#123;</span><br><span class="line">        i.method2();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend3</span><span class="params">(I2 i)</span>&#123;</span><br><span class="line">        i.method3();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">implements</span> <span class="title class_">I1</span>, I2&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;类 B 实现接口 I1 的方法 1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;类 B 实现接口 I2 的方法 2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method3</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;类 B 实现接口 I2 的方法 3&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend1</span><span class="params">(I1 i)</span>&#123;</span><br><span class="line">        i.method1();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend4</span><span class="params">(I3 i)</span>&#123;</span><br><span class="line">        i.method4();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend5</span><span class="params">(I3 i)</span>&#123;</span><br><span class="line">        i.method5();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span> <span class="keyword">implements</span> <span class="title class_">I1</span>, I3&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;类 D 实现接口 I1 的方法 1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method4</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;类 D 实现接口 I3 的方法 4&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method5</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;类 D 实现接口 I3 的方法 5&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="依赖倒转原则"><a href="#依赖倒转原则" class="headerlink" title="依赖倒转原则"></a>依赖倒转原则</h3><ul>
<li><code>Dependency Inversion Principle (DIP)</code> 抽象不应该依赖于细节，细节应当依赖于抽象。换言之，要针对接口编程，而不是针对实现编程</li>
</ul>
<h4 id="问题案例-2"><a href="#问题案例-2" class="headerlink" title="问题案例"></a>问题案例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如果获取的对象是微信，短信等等，则新增类，同时 Perons 也要增加相应的接收方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DependenceInversion</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        person.receive(<span class="keyword">new</span> <span class="title class_">Email</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Email</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;电子邮件信息...&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive</span><span class="params">(Email email)</span> &#123;</span><br><span class="line">        System.out.println(email.getInfo());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="解决案例-1"><a href="#解决案例-1" class="headerlink" title="解决案例"></a>解决案例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 引入一个抽象的接口 IReceiver 表示接收者, 这样 Person 类与接口 IReceiver 发生依赖</span></span><br><span class="line"><span class="comment"> * 让他们各自实现 IReceiver 接口, 这样就符合依赖倒置原则了</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DependenceInversion</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        person.receive(<span class="keyword">new</span> <span class="title class_">Email</span>());</span><br><span class="line">        person.receive(<span class="keyword">new</span> <span class="title class_">SMS</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IReceiver</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Email</span> <span class="keyword">implements</span> <span class="title class_">IReceiver</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;电子邮件信息...&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SMS</span> <span class="keyword">implements</span> <span class="title class_">IReceiver</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;短信信息...&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive</span><span class="params">(IReceiver iReceiver)</span> &#123;</span><br><span class="line">        System.out.println(iReceiver.getInfo());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h3><ul>
<li><code>Liskov Substitution Principle (LSP)</code> 所有引用基类（父类） 的地方必须能透明地使用其子类的对象</li>
</ul>
<h4 id="问题案例-3"><a href="#问题案例-3" class="headerlink" title="问题案例"></a>问题案例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 类B无意中重写了父类的方法，造成原有功能出现错误</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LiskovSubstitution</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;11-3=&quot;</span> + a.func1(<span class="number">11</span>, <span class="number">3</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;1-8=&quot;</span> + a.func1(<span class="number">1</span>, <span class="number">8</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------&quot;</span>);</span><br><span class="line">        <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;11-3=&quot;</span> + b.func1(<span class="number">11</span>, <span class="number">3</span>)); <span class="comment">//这里本意其实是要求出 11-3</span></span><br><span class="line">        System.out.println(<span class="string">&quot;1-8=&quot;</span> + b.func1(<span class="number">1</span>, <span class="number">8</span>)); <span class="comment">//这里本意其实是要求出 1-8</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">func1</span><span class="params">(<span class="type">int</span> num1, <span class="type">int</span> num2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> num1 - num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">func1</span><span class="params">(<span class="type">int</span> num1, <span class="type">int</span> num2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> num1 + num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="解决案例-2"><a href="#解决案例-2" class="headerlink" title="解决案例"></a>解决案例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 原来的父类和子类都继承一个更通俗的基类，原有的继承关系去掉，采用依赖，聚合，组合等 关系代替</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LiskovSubstitution</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;11-3=&quot;</span> + a.func1(<span class="number">11</span>, <span class="number">3</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;1-8=&quot;</span> + a.func1(<span class="number">1</span>, <span class="number">8</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------&quot;</span>);</span><br><span class="line">        <span class="comment">//因为 B 类不再继承 A 类，因此调用者，不会再 func1 是求减法</span></span><br><span class="line">        <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;11+3=&quot;</span> + b.func1(<span class="number">11</span>, <span class="number">3</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;1+8=&quot;</span> + b.func1(<span class="number">1</span>, <span class="number">8</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用组合仍然可以使用到 A 类相关方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;11-3=&quot;</span> + b.func2(<span class="number">11</span>, <span class="number">3</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">extends</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">func1</span><span class="params">(<span class="type">int</span> num1, <span class="type">int</span> num2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> num1 - num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">func1</span><span class="params">(<span class="type">int</span> num1, <span class="type">int</span> num2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> num1 + num2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">func2</span><span class="params">(<span class="type">int</span> num1, <span class="type">int</span> num2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a.func1(num1, num2); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h3><ul>
<li><code>Open-Closed Principle (OCP)</code> 一个软件实体应当对扩展开放，对修改关闭。即软件实体应尽量在不修改原有代码的情况下进行扩展</li>
</ul>
<h4 id="问题案例-4"><a href="#问题案例-4" class="headerlink" title="问题案例"></a>问题案例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 违反了开闭原则，对扩展开放(提供方)，对修改关闭(使用方)</span></span><br><span class="line"><span class="comment"> * 即当增加新图形类的时候，尽量不修改代码，或者尽可能少修改代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OpenClosed</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">GraphicEditor</span> <span class="variable">graphicEditor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GraphicEditor</span>();</span><br><span class="line">        graphicEditor.drawShape(<span class="keyword">new</span> <span class="title class_">Rectangle</span>());</span><br><span class="line">        graphicEditor.drawShape(<span class="keyword">new</span> <span class="title class_">Circle</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="type">int</span> type;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    Rectangle() &#123;</span><br><span class="line">        <span class="built_in">super</span>.type = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    Circle() &#123;</span><br><span class="line">        <span class="built_in">super</span>.type = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GraphicEditor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drawShape</span><span class="params">(Shape s)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (s.type == <span class="number">1</span>)</span><br><span class="line">            drawRectangle(s);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (s.type == <span class="number">2</span>)</span><br><span class="line">            drawCircle(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drawRectangle</span><span class="params">(Shape r)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;绘制矩形...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drawCircle</span><span class="params">(Shape r)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;绘制圆形...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="解决案例-3"><a href="#解决案例-3" class="headerlink" title="解决案例"></a>解决案例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 把创建 Shape 类做成抽象类，并提供一个抽象的 draw 方法, 让子类去实现即可</span></span><br><span class="line"><span class="comment"> * 当增加新图形类时, 只需继承 Shape 并实现 draw 方法即可, 使用方的代码就不需要修改, 满足了开闭原则</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OpenClosed</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">GraphicEditor</span> <span class="variable">graphicEditor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GraphicEditor</span>();</span><br><span class="line">        graphicEditor.drawShape(<span class="keyword">new</span> <span class="title class_">Rectangle</span>());</span><br><span class="line">        graphicEditor.drawShape(<span class="keyword">new</span> <span class="title class_">Circle</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;绘制矩形...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;绘制圆形...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GraphicEditor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drawShape</span><span class="params">(Shape s)</span> &#123;</span><br><span class="line">        s.draw();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h3><ul>
<li><code>Law Of Demeter (LOD)</code> 一个对象就尽可能少的去了解其它对象，从而实现松耦合</li>
</ul>
<h4 id="问题案例-5"><a href="#问题案例-5" class="headerlink" title="问题案例"></a>问题案例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 迪米特法则更简单的定义：只与直接的朋友通信</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 直接的朋友：</span></span><br><span class="line"><span class="comment"> *  出现在成员变量，方法参数，方法返回值中的类称为直接的朋友</span></span><br><span class="line"><span class="comment"> *  出现在局部变量中的类不是直接的朋友。也就是说，陌生的类最好不要以局部变量的形式出现在类的内部</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LawOfDemeter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">CompanyManager</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CompanyManager</span>();</span><br><span class="line">        e.printAllEmployee(<span class="keyword">new</span> <span class="title class_">SubCompanyManager</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(String id)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SubEmployee</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(String id)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SubCompanyManager</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;SubEmployee&gt; <span class="title function_">getSubEmployee</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;SubEmployee&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)&#123;</span><br><span class="line">            <span class="type">SubEmployee</span> <span class="variable">emp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubEmployee</span>();</span><br><span class="line">            emp.setId(<span class="string">&quot;分公司员工：&quot;</span>+i);</span><br><span class="line">            list.add(emp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CompanyManager</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Employee&gt; <span class="title function_">getEmployee</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Employee&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Employee&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++)&#123;</span><br><span class="line">            <span class="type">Employee</span> <span class="variable">emp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>();</span><br><span class="line">            emp.setId(<span class="string">&quot;总公司员工：&quot;</span>+i);</span><br><span class="line">            list.add(emp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1. 这里的 SubEmployee 以局部变量方式出现，不是 CompanyManager 的直接朋友</span></span><br><span class="line"><span class="comment">     * 2. 违反了 迪米特法则</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printAllEmployee</span><span class="params">(SubCompanyManager sub)</span>&#123;</span><br><span class="line">        List&lt;SubEmployee&gt; list1 = sub.getSubEmployee();</span><br><span class="line">        <span class="keyword">for</span>(SubEmployee e:list1)&#123;</span><br><span class="line">            System.out.println(e.getId());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;Employee&gt; list2 = <span class="built_in">this</span>.getEmployee();</span><br><span class="line">        <span class="keyword">for</span>(Employee e:list2)&#123;</span><br><span class="line">            System.out.println(e.getId());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="解决案例-4"><a href="#解决案例-4" class="headerlink" title="解决案例"></a>解决案例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 为分公司增加了打印人员ID的方法，总公司直接调用来打印，从而避免了与分公司的员工发生耦合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LawOfDemeter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">CompanyManager</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CompanyManager</span>();</span><br><span class="line">        e.printAllEmployee(<span class="keyword">new</span> <span class="title class_">SubCompanyManager</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(String id)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SubEmployee</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(String id)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SubCompanyManager</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;SubEmployee&gt; <span class="title function_">getSubEmployee</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;SubEmployee&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)&#123;</span><br><span class="line">            <span class="type">SubEmployee</span> <span class="variable">emp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubEmployee</span>();</span><br><span class="line">            emp.setId(<span class="string">&quot;分公司员工：&quot;</span>+i);</span><br><span class="line">            list.add(emp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printSubEmployee</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;SubEmployee&gt; list = <span class="built_in">this</span>.getSubEmployee();</span><br><span class="line">        <span class="keyword">for</span>(SubEmployee e:list)&#123;</span><br><span class="line">            System.out.println(e.getId());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CompanyManager</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Employee&gt; <span class="title function_">getEmployee</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Employee&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Employee&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++)&#123;</span><br><span class="line">            <span class="type">Employee</span> <span class="variable">emp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>();</span><br><span class="line">            emp.setId(<span class="string">&quot;总公司员工：&quot;</span>+i);</span><br><span class="line">            list.add(emp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printAllEmployee</span><span class="params">(SubCompanyManager sub)</span>&#123;</span><br><span class="line">        sub.printSubEmployee();</span><br><span class="line"></span><br><span class="line">        List&lt;Employee&gt; list = <span class="built_in">this</span>.getEmployee();</span><br><span class="line">        <span class="keyword">for</span>(Employee e:list)&#123;</span><br><span class="line">            System.out.println(e.getId());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="组合-x2F-聚合复用原则"><a href="#组合-x2F-聚合复用原则" class="headerlink" title="组合&#x2F;聚合复用原则"></a>组合&#x2F;聚合复用原则</h3><ul>
<li><code>Composite/Aggregate Reuse Principle (CRP)</code> 如果只是达到代码复用的目的，尽量使用组合与聚合，而不是继承</li>
</ul>
<h4 id="问题案例-6"><a href="#问题案例-6" class="headerlink" title="问题案例"></a>问题案例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. 如果基类的实现发生改变，那么派生类的实现也不得不发生改变</span></span><br><span class="line"><span class="comment"> * 2. 应用中需要变化之处应该把它们独立出来，不要和那些不需要变化的代码混在一起</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CompositeReuse</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">DebitCard</span> <span class="variable">debitCard</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DebitCard</span>(<span class="string">&quot;储蓄卡&quot;</span>);</span><br><span class="line">        debitCard.deposit();</span><br><span class="line">        debitCard.withdrawals();</span><br><span class="line">        debitCard.overdraft();</span><br><span class="line"></span><br><span class="line">        <span class="type">CreditCard</span> <span class="variable">creditCard</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CreditCard</span>(<span class="string">&quot;信用卡&quot;</span>);</span><br><span class="line">        creditCard.deposit();</span><br><span class="line">        creditCard.withdrawals();</span><br><span class="line">        creditCard.overdraft();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BankCard</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String cardType;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deposit</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(cardType + <span class="string">&quot;存款...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">withdrawals</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(cardType + <span class="string">&quot;取款...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">overdraft</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(cardType + <span class="string">&quot;透支...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DebitCard</span> <span class="keyword">extends</span> <span class="title class_">BankCard</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DebitCard</span><span class="params">(String cardType)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.cardType = cardType;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CreditCard</span> <span class="keyword">extends</span> <span class="title class_">BankCard</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CreditCard</span><span class="params">(String cardType)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.cardType = cardType;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="解决案例-5"><a href="#解决案例-5" class="headerlink" title="解决案例"></a>解决案例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如果只是达到代码复用的目的，尽量使用组合与聚合，而不是继承</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CompositeReuse</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">DebitCard</span> <span class="variable">debitCard</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DebitCard</span>(<span class="keyword">new</span> <span class="title class_">BankCard</span>(), <span class="string">&quot;储蓄卡&quot;</span>);</span><br><span class="line">        debitCard.deposit();</span><br><span class="line">        debitCard.withdrawals();</span><br><span class="line"></span><br><span class="line">        <span class="type">CreditCard</span> <span class="variable">creditCard</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CreditCard</span>(<span class="keyword">new</span> <span class="title class_">BankCard</span>(), <span class="string">&quot;信用卡&quot;</span>);</span><br><span class="line">        creditCard.overdraft();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BankCard</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String cardType;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deposit</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(cardType + <span class="string">&quot;存款...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">withdrawals</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(cardType + <span class="string">&quot;取款...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">overdraft</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(cardType + <span class="string">&quot;透支...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DebitCard</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> BankCard bankCard;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DebitCard</span><span class="params">(BankCard bankCard, String cardType)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bankCard = bankCard;</span><br><span class="line">        <span class="built_in">this</span>.bankCard.cardType = cardType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deposit</span><span class="params">()</span> &#123;</span><br><span class="line">        bankCard.deposit();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">withdrawals</span><span class="params">()</span> &#123;</span><br><span class="line">        bankCard.withdrawals();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CreditCard</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> BankCard bankCard;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CreditCard</span><span class="params">(BankCard bankCard, String cardType)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bankCard = bankCard;</span><br><span class="line">        <span class="built_in">this</span>.bankCard.cardType = cardType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">overdraft</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bankCard.overdraft();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://github.com/AlfredTheBest/Design-Pattern">Design-Pattern</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/24614363">设计模式之七大基本原则</a></li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式_单利模式</title>
    <url>/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_%E5%8D%95%E5%88%A9%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="懒汉模式，线程不安全"><a href="#懒汉模式，线程不安全" class="headerlink" title="懒汉模式，线程不安全"></a>懒汉模式，线程不安全</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒汉模式</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 是否 Lazy 初始化：是</span></span><br><span class="line"><span class="comment"> * 是否多线程安全：否</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 描述：这种方式 lazy loading 很明显，但是致命的是在多线程不能正常工作。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="literal">null</span>)&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="懒汉模式，线程安全"><a href="#懒汉模式，线程安全" class="headerlink" title="懒汉模式，线程安全"></a>懒汉模式，线程安全</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒汉模式   </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 是否 Lazy 初始化：是</span></span><br><span class="line"><span class="comment"> * 是否多线程安全：是</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 描述：这种方式具备很好的 lazy loading，能够在多线程中很好的工作，但是效率很低，99% 情况下不需要同步。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 优点：第一次调用才初始化，避免内存浪费。</span></span><br><span class="line"><span class="comment"> * 缺点：必须加锁 synchronized 才能保证单例，但加锁会影响效率。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="literal">null</span>)&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="懒汉模式-双重校验锁-，线程安全"><a href="#懒汉模式-双重校验锁-，线程安全" class="headerlink" title="懒汉模式 (双重校验锁)，线程安全"></a>懒汉模式 (双重校验锁)，线程安全</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒汉模式（双检锁/双重校验锁）  </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 是否 Lazy 初始化：是</span></span><br><span class="line"><span class="comment"> * 是否多线程安全：是</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 描述：这种方式采用双锁机制，安全且在多线程情况下能保持高性能。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton instance;  </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span> <span class="params">()</span>&#123;&#125;  </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;  </span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;  </span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;  </span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="饿汉模式-实例公有化-，线程安全"><a href="#饿汉模式-实例公有化-，线程安全" class="headerlink" title="饿汉模式 (实例公有化)，线程安全"></a>饿汉模式 (实例公有化)，线程安全</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 饿汉模式</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 是否 Lazy 初始化：否</span></span><br><span class="line"><span class="comment"> * 是否多线程安全：是</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 描述：写法比较简洁</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>(); </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span> <span class="params">()</span>&#123;&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="饿汉模式-实例私有化-，线程安全"><a href="#饿汉模式-实例私有化-，线程安全" class="headerlink" title="饿汉模式 (实例私有化)，线程安全"></a>饿汉模式 (实例私有化)，线程安全</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 饿汉模式</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 是否 Lazy 初始化：否</span></span><br><span class="line"><span class="comment"> * 是否多线程安全：是</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 描述：这种方式比较常用，但容易产生垃圾对象。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 优点：没有加锁，执行效率会提高。</span></span><br><span class="line"><span class="comment"> * 缺点：类加载时就初始化，浪费内存。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>(); </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span> <span class="params">()</span>&#123;&#125;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="饿汉模式-静态代码块-，线程安全"><a href="#饿汉模式-静态代码块-，线程安全" class="headerlink" title="饿汉模式 (静态代码块)，线程安全"></a>饿汉模式 (静态代码块)，线程安全</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 饿汉模式（变种）</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 是否 Lazy 初始化：否</span></span><br><span class="line"><span class="comment"> * 是否多线程安全：是</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 描述：和上一种饿汉模式差不多，都是在类初始化即实例化instance。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 优点：没有加锁，执行效率会提高。</span></span><br><span class="line"><span class="comment"> * 缺点：类加载时就初始化，浪费内存。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span> <span class="params">()</span>&#123;&#125; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="静态内部类，线程安全"><a href="#静态内部类，线程安全" class="headerlink" title="静态内部类，线程安全"></a>静态内部类，线程安全</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 静态内部类</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 是否 Lazy 初始化：是</span></span><br><span class="line"><span class="comment"> * 是否多线程安全：是</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 描述：这种方式能达到双检锁方式一样的功效，但实现更简单。</span></span><br><span class="line"><span class="comment"> *          对静态域使用延迟初始化，应使用这种方式而不是双检锁方式。</span></span><br><span class="line"><span class="comment"> *          这种方式只适用于静态域的情况，双检锁方式可在实例域需要延迟初始化时使用。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SingletonHolder</span> &#123;  </span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singleton</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();  </span><br><span class="line">    &#125;  </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span> <span class="params">()</span>&#123;&#125;  </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;  </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="CAS方式，线程安全"><a href="#CAS方式，线程安全" class="headerlink" title="CAS方式，线程安全"></a>CAS方式，线程安全</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * CAS方式</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 是否 Lazy 初始化：是</span></span><br><span class="line"><span class="comment"> * 是否多线程安全：是</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 描述：通过自旋 + CAS方式无锁方式实现</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 优点：不需要使用传统的锁机制来保证线程安全。</span></span><br><span class="line"><span class="comment"> * 缺点：自旋CAS如果长时间不成功，会给CPU带来非常大的执行开销。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicReference;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AtomicReference&lt;Singleton&gt; INSTANCE = <span class="keyword">new</span> <span class="title class_">AtomicReference</span>&lt;Singleton&gt; ();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(;;) &#123;</span><br><span class="line">            <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> INSTANCE.get();</span><br><span class="line">            <span class="keyword">if</span>(instance != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> instance;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">            <span class="keyword">if</span>(INSTANCE.compareAndSet(<span class="literal">null</span>, instance)) &#123;</span><br><span class="line">                <span class="keyword">return</span> instance;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="枚举，线程安全"><a href="#枚举，线程安全" class="headerlink" title="枚举，线程安全"></a>枚举，线程安全</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 枚举</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 是否 Lazy 初始化：否</span></span><br><span class="line"><span class="comment"> * 是否多线程安全：是</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 描述：这种实现方式还没有被广泛采用，但这是实现单例模式的最佳方法。</span></span><br><span class="line"><span class="comment"> *          它更简洁，自动支持序列化机制，绝对防止多次实例化。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Singleton</span> &#123;  </span><br><span class="line">    </span><br><span class="line">    INSTANCE;  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>



<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="http://24suixinsuoyu.com/2019/03/09/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E8%AF%A6%E8%A7%A3%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%8D%81%E7%A7%8D%E5%86%99%E6%B3%95">24隋心所欲’s Blog</a></li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
</search>
